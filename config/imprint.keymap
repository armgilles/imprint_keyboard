
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

//
// WORLD_USE_COMPOSE uses OS-native Compose keycodes instead of Unicode
// for characters in the "compositions" section of the world layer.
//
#define WORLD_USE_COMPOSE

//
// COMPOSE_KEY_LINUX specifies the keycode for Compose key in Linux,
// which may be RALT by default but can be reconfigured.
//
#ifndef COMPOSE_KEY_LINUX
#define COMPOSE_KEY_LINUX RALT
#endif

//
// COMPOSE_SEQ_LINUX() prefixes keystrokes with the Linux Compose key.
//
#ifndef COMPOSE_SEQ_LINUX
#define COMPOSE_SEQ_LINUX(keystrokes) \
    <&macro_tap &kp COMPOSE_KEY_LINUX keystrokes>
#endif

//
// COMPOSE_SEQ_MACOS() formats keystrokes for macOS character entry.
//
#ifndef COMPOSE_SEQ_MACOS
#define COMPOSE_SEQ_MACOS(keystrokes) \
    <&macro_tap keystrokes>
#endif

//
// COMPOSE_SEQ_WINDOWS() wraps keystrokes in Windows AltCode sequence.
//
#ifndef COMPOSE_SEQ_WINDOWS
#define COMPOSE_SEQ_WINDOWS(keystrokes) \
    <&macro_release &kp LALT>
#endif

// Detect operating system (default to macOS for now)
#ifndef OPERATING_SYSTEM
#define OPERATING_SYSTEM 'M'
#endif

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    behaviors {
        // Constantes temporelles du Glove80 (DIFFICULTY_LEVEL = 0)

        #define TAPPING_RESOLUTION 140
        #define INDEX_HOLDING_TIME (TAPPING_RESOLUTION + 5)     // 145ms
        #define MIDDY_HOLDING_TIME (TAPPING_RESOLUTION + 40)    // 180ms  
        #define RINGY_HOLDING_TIME (TAPPING_RESOLUTION + 90)    // 230ms
        #define PINKY_HOLDING_TIME (TAPPING_RESOLUTION + 90)    // 230ms
        #define HOMEY_REPEAT_DECAY (TAPPING_RESOLUTION + 150)   // 290ms
        #define INDEX_STREAK_DECAY (TAPPING_RESOLUTION - 50)    // 90ms
        #define HOMEY_STREAK_DECAY TAPPING_RESOLUTION           // 140ms
        // Hold-tap behaviors avec les valeurs exactes du Glove80 par doigt

        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <INDEX_HOLDING_TIME>;     // 145ms pour index (Shift)
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms 
            require-prior-idle-ms = <INDEX_STREAK_DECAY>; // 90ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 57 74>; // Main droite + thumbs
            hold-trigger-on-release;
        };

        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <INDEX_HOLDING_TIME>;     // 145ms pour index (Shift)
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms
            require-prior-idle-ms = <INDEX_STREAK_DECAY>; // 90ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 69 52>; // Main gauche + thumbs
            hold-trigger-on-release;
        };

        // Behaviors différenciés par doigt pour appliquer les bonnes valeurs temporelles

        lmt_pinky: left_mod_tap_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <PINKY_HOLDING_TIME>;     // 230ms
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>; // 140ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 57 74>;
            hold-trigger-on-release;
        };

        lmt_ringy: left_mod_tap_ringy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <RINGY_HOLDING_TIME>;     // 230ms
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>; // 140ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 57 74>;
            hold-trigger-on-release;
        };

        lmt_middy: left_mod_tap_middy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <MIDDY_HOLDING_TIME>;     // 180ms
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>; // 140ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62 63 75 76 77 78 79 57 74>;
            hold-trigger-on-release;
        };

        // Idem pour la main droite

        rmt_pinky: right_mod_tap_pinky {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <PINKY_HOLDING_TIME>;     // 230ms
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>; // 140ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 69 52>;
            hold-trigger-on-release;
        };

        rmt_ringy: right_mod_tap_ringy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <RINGY_HOLDING_TIME>;     // 230ms
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>; // 140ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 69 52>;
            hold-trigger-on-release;
        };

        rmt_middy: right_mod_tap_middy {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <MIDDY_HOLDING_TIME>;     // 180ms
            quick-tap-ms = <HOMEY_REPEAT_DECAY>;        // 290ms
            require-prior-idle-ms = <HOMEY_STREAK_DECAY>; // 140ms
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 64 65 66 67 68 69 52>;
            hold-trigger-on-release;
        };

        // World character behaviors et caractères spéciaux.
        //////////////////////////////////////////////////////////////////////////
        //
        // World layer - international characters
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // WORLD_USE_COMPOSE uses OS-native Compose keycodes instead of Unicode
        // for characters in the "compositions" section of the `world.yaml` file.
        //
        //#define WORLD_USE_COMPOSE

        //
        // WORLD_HOST_AZERTY indicates that your computer is set to AZERTY locale.
        //
        //#define WORLD_HOST_AZERTY
        #ifdef WORLD_HOST_AZERTY
            #define WORLD_SHIFT_NUMBER
            #define _NA Q
        #endif

        //
        // WORLD_SHIFT_NUMBER indicates that Shift must be applied when typing out
        // digits from the number row, which is needed for locales such as AZERTY.
        //
        //#define WORLD_SHIFT_NUMBER
        #ifdef WORLD_SHIFT_NUMBER
            #define _N0 LS(N0)
            #define _N1 LS(N1)
            #define _N2 LS(N2)
            #define _N3 LS(N3)
            #define _N4 LS(N4)
            #define _N5 LS(N5)
            #define _N6 LS(N6)
            #define _N7 LS(N7)
            #define _N8 LS(N8)
            #define _N9 LS(N9)
        #endif

        //
        // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
        // between keystrokes while inputting the Unicode codepoint shortcut.
        //
        #ifndef UNICODE_TAP_DELAY
        #define UNICODE_TAP_DELAY 1
        #endif

        //
        // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
        // between emitting Unicode codepoints in multi-codepoint characters.
        //
        #ifndef UNICODE_SEQ_DELAY
        #define UNICODE_SEQ_DELAY 10
        #endif

        #define UNICODE(name, ...) \
            ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
            )

        //
        // UNICODE_SEQ_LINUX() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under Linux.
        //
        #ifndef UNICODE_SEQ_LINUX
        #define UNICODE_SEQ_LINUX(keystrokes) \
            <&macro_tap &kp LC(LS(U)) keystrokes &kp ENTER>
        #endif

        //
        // UNICODE_SEQ_MACOS() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under macOS.
        //
        #ifndef UNICODE_SEQ_MACOS
        #define UNICODE_SEQ_MACOS(keystrokes) \
            <&macro_press &kp LALT> ,\
            <&macro_tap keystrokes> ,\
            <&macro_release &kp LALT>
        #endif

        //
        // UNICODE_SEQ_WINDOWS() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under Windows.
        //
        // If you've configured WinCompose to use a different trigger hotkey,
        // such as F13 instead of the default RA(U) shortcut, simply override
        // this definition to adapt all UNICODE() function calls accordingly.
        //
        #ifndef UNICODE_SEQ_WINDOWS
        #define UNICODE_SEQ_WINDOWS(keystrokes) \
            <&macro_tap &kp RALT &kp U keystrokes &kp ENTER>
        #endif

        //
        // COMPOSE_KEY_LINUX specifies the keycode for Compose key in Linux,
        // which may be RALT by default but can be reconfigured as follows:
        //
        // $ setxkbmap -option compose:sclk # use ScrollLock as Compose key
        //
        // See xkeyboard-config(7) for possible choices for the Compose key:
        // https://manpages.debian.org/stable/xkb-data/xkeyboard-config.7.en.html#Position_of_Compose_key
        //
        // #define COMPOSE_KEY_LINUX RALT            // compose:ralt
        // #define COMPOSE_KEY_LINUX LGUI            // compose:lwin
        // #define COMPOSE_KEY_LINUX RA(LGUI)        // compose:lwin-altgr
        // #define COMPOSE_KEY_LINUX RGUI            // compose:rwin
        // #define COMPOSE_KEY_LINUX RA(RGUI)        // compose:rwin-altgr
        // #define COMPOSE_KEY_LINUX K_MENU          // compose:menu
        // #define COMPOSE_KEY_LINUX RA(K_MENU)      // compose:menu-altgr
        // #define COMPOSE_KEY_LINUX LCTL            // compose:lctrl
        // #define COMPOSE_KEY_LINUX RA(LCTL)        // compose:lctrl-altgr
        // #define COMPOSE_KEY_LINUX RCTL            // compose:rctrl
        // #define COMPOSE_KEY_LINUX RA(RCTL)        // compose:rctrl-altgr
        // #define COMPOSE_KEY_LINUX CAPS            // compose:caps
        // #define COMPOSE_KEY_LINUX RA(CAPS)        // compose:caps-altgr
        // #define COMPOSE_KEY_LINUX NON_US_BSLH     // compose:102
        // #define COMPOSE_KEY_LINUX RA(NON_US_BSLH) // compose:102-altgr
        // #define COMPOSE_KEY_LINUX PAUSE_BREAK     // compose:paus
        // #define COMPOSE_KEY_LINUX PSCRN           // compose:prsc
        // #define COMPOSE_KEY_LINUX SLCK            // compose:sclk
        //
        #ifndef COMPOSE_KEY_LINUX
        #define COMPOSE_KEY_LINUX RALT
        #endif

        //
        // COMPOSE_SEQ_LINUX() prefixes keystrokes with the Linux Compose key.
        //
        #ifndef COMPOSE_SEQ_LINUX
        #define COMPOSE_SEQ_LINUX(keystrokes) \
            <&macro_tap &kp COMPOSE_KEY_LINUX keystrokes>
        #endif

        //
        // COMPOSE_SEQ_MACOS() formats keystrokes for macOS character entry.
        //
        #ifndef COMPOSE_SEQ_MACOS
        #define COMPOSE_SEQ_MACOS(keystrokes) \
            <&macro_tap keystrokes>
        #endif

        //
        // COMPOSE_SEQ_WINDOWS() wraps keystrokes in Windows AltCode sequence.
        //
        #ifndef COMPOSE_SEQ_WINDOWS
        #define COMPOSE_SEQ_WINDOWS(keystrokes) \
            <&macro_press &kp LALT>, \
            <&macro_tap keystrokes>, \
            <&macro_release &kp LALT>
        #endif
        #if OPERATING_SYSTEM == 'L'
            #define UNICODE_MORPH_MODS (MOD_LCTL|MOD_LSFT)
        #elif OPERATING_SYSTEM == 'M'
            #define UNICODE_MORPH_MODS MOD_LALT
        #elif OPERATING_SYSTEM == 'W'
            #define UNICODE_MORPH_MODS MOD_RALT
        #endif
        #if OPERATING_SYSTEM == 'L'
            // $ grep "compose:" /usr/share/X11/xkb/rules/base.lst
            // compose:ralt         Right Alt
            #if COMPOSE_KEY_LINUX == RALT
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:lwin         Left Win
            #elif COMPOSE_KEY_LINUX == LGUI
            #define COMPOSE_MORPH_MODS MOD_LGUI
            // compose:lwin-altgr   3rd level of Left Win
            #elif COMPOSE_KEY_LINUX == RA(LGUI)
            #define COMPOSE_MORPH_MODS (MOD_LGUI|MOD_RALT)
            // compose:rwin         Right Win
            #elif COMPOSE_KEY_LINUX == RGUI
            #define COMPOSE_MORPH_MODS MOD_RGUI
            // compose:rwin-altgr   3rd level of Right Win
            #elif COMPOSE_KEY_LINUX == RA(RGUI)
            #define COMPOSE_MORPH_MODS (MOD_RGUI|MOD_RALT)
            // compose:menu         Menu
            // compose:menu-altgr   3rd level of Menu
            #elif COMPOSE_KEY_LINUX == RA(K_MENU)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:lctrl        Left Ctrl
            #elif COMPOSE_KEY_LINUX == LCTL
            #define COMPOSE_MORPH_MODS MOD_LCTL
            // compose:lctrl-altgr  3rd level of Left Ctrl
            #elif COMPOSE_KEY_LINUX == RA(LCTL)
            #define COMPOSE_MORPH_MODS (MOD_LCTL|MOD_RALT)
            // compose:rctrl        Right Ctrl
            #elif COMPOSE_KEY_LINUX == RCTL
            #define COMPOSE_MORPH_MODS MOD_RCTL
            // compose:rctrl-altgr  3rd level of Right Ctrl
            #elif COMPOSE_KEY_LINUX == RA(RCTL)
            #define COMPOSE_MORPH_MODS (MOD_RCTL|MOD_RALT)
            // compose:caps         Caps Lock
            // compose:caps-altgr   3rd level of Caps Lock
            #elif COMPOSE_KEY_LINUX == RA(CAPS)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:102          The "&lt; &gt;" key
            // compose:102-altgr    3rd level of the "&lt; &gt;" key
            #elif COMPOSE_KEY_LINUX == RA(NON_US_BSLH)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:paus         Pause
            // compose:prsc         PrtSc
            // compose:sclk         Scroll Lock
            #else
            #define COMPOSE_MORPH_MODS 0
            #endif
        #elif OPERATING_SYSTEM == 'M'
            #define COMPOSE_MORPH_MODS 0
        #elif OPERATING_SYSTEM == 'W'
            #define COMPOSE_MORPH_MODS MOD_LALT
        #endif
        #ifndef _N0
        #define _N0 N0
        #endif
        #ifndef _N1
        #define _N1 N1
        #endif
        #ifndef _N2
        #define _N2 N2
        #endif
        #ifndef _N3
        #define _N3 N3
        #endif
        #ifndef _N4
        #define _N4 N4
        #endif
        #ifndef _N5
        #define _N5 N5
        #endif
        #ifndef _N6
        #define _N6 N6
        #endif
        #ifndef _N7
        #define _N7 N7
        #endif
        #ifndef _N8
        #define _N8 N8
        #endif
        #ifndef _N9
        #define _N9 N9
        #endif
        #ifndef _NA
        #define _NA A
        #endif
        #ifndef _NB
        #define _NB B
        #endif
        #ifndef _NC
        #define _NC C
        #endif
        #ifndef _ND
        #define _ND D
        #endif
        #ifndef _NE
        #define _NE E
        #endif
        #ifndef _NF
        #define _NF F
        #endif

        //
        // NOTE: edit the world.yaml file and run `rake` to generate this:
        //

        //
        // codepoints
        //
        UNICODE(world_degree_sign_macro, /* ° */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_LINUX(&kp O &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_MACOS(&kp LA(LS(N8)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N0)
            #endif
            #endif
        )
        world_degree_sign: world_degree_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_degree_sign_macro>, <&world_degree_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_degree_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_section_sign_macro, /* § */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_LINUX(&kp S &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_MACOS(&kp LA(N6))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N7)
            #endif
            #endif
        )
        world_section_sign: world_section_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_section_sign_macro>, <&world_section_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_section_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_paragraph_sign_macro, /* ¶ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_LINUX(&kp P &kp EXCL)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_MACOS(&kp LA(N7))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N6)
            #endif
            #endif
        )
        world_paragraph_sign: world_paragraph_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_paragraph_sign_macro>, <&world_paragraph_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_paragraph_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_ordinal_macro, /* º */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_MACOS(&kp LA(N0))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NA)
            #endif
            #endif
        )
        world_o_ordinal: world_o_ordinal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_ordinal_macro>, <&world_o_ordinal_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_ordinal
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_ordinal_macro, /* ª */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_MACOS(&kp LA(N9))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NA)
            #endif
            #endif
        )
        world_a_ordinal: world_a_ordinal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ordinal_macro>, <&world_a_ordinal_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ordinal
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_exclaim_left_macro, /* ¡ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_LINUX(&kp EXCL &kp EXCL)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_MACOS(&kp LA(N1))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N1)
            #endif
            #endif
        )
        world_exclaim_left: world_exclaim_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_exclaim_left_macro>, <&world_exclaim_left_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_exclaim_left
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_question_left_macro, /* ¿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_LINUX(&kp QMARK &kp QMARK)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_MACOS(&kp LA(LS(FSLH)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NF)
            #endif
            #endif
        )
        world_question_left: world_question_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_question_left_macro>, <&world_question_left_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_question_left
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_crypto_macro, /* ₿ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NB &kp _NF)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NB &kp _NF)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NB &kp _NF)
            #endif
        )
        world_currency_crypto: world_currency_crypto {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_crypto_macro>, <&world_currency_crypto_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_crypto
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_cent_macro, /* ¢ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N2)
            #endif
        )
        world_currency_cent: world_currency_cent {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_cent_macro>, <&world_currency_cent_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_cent
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_sign_macro, /* ¤ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N4)
            #endif
        )
        world_currency_sign: world_currency_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_sign_macro>, <&world_currency_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_micro_sign_macro, /* µ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_LINUX(&kp M &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_MACOS(&kp LA(M))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N5)
            #endif
            #endif
        )
        world_micro_sign: world_micro_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_micro_sign_macro>, <&world_micro_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_micro_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };

        //
        // characters
        //
        UNICODE(world_i_acute_lower_macro, /* í */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _ND)
            #endif
            #endif
        )
        world_i_acute_lower: world_i_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_lower_macro>, <&world_i_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_acute_upper_macro, /* Í */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _ND)
            #endif
            #endif
        )
        world_i_acute_upper: world_i_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_upper_macro>, <&world_i_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_acute: world_i_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_diaeresis_lower_macro, /* ï */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NF)
            #endif
            #endif
        )
        world_i_diaeresis_lower: world_i_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_lower_macro>, <&world_i_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_diaeresis_upper_macro, /* Ï */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NF)
            #endif
            #endif
        )
        world_i_diaeresis_upper: world_i_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_upper_macro>, <&world_i_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_diaeresis: world_i_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_circumflex_lower_macro, /* î */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NE)
            #endif
            #endif
        )
        world_i_circumflex_lower: world_i_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_lower_macro>, <&world_i_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_circumflex_upper_macro, /* Î */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NE)
            #endif
            #endif
        )
        world_i_circumflex_upper: world_i_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_upper_macro>, <&world_i_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_circumflex: world_i_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_grave_lower_macro, /* ì */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NC)
            #endif
            #endif
        )
        world_i_grave_lower: world_i_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_lower_macro>, <&world_i_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_grave_upper_macro, /* Ì */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NC)
            #endif
            #endif
        )
        world_i_grave_upper: world_i_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_upper_macro>, <&world_i_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_grave: world_i_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_acute_lower_macro, /* é */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N9)
            #endif
            #endif
        )
        world_e_acute_lower: world_e_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_lower_macro>, <&world_e_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_acute_upper_macro, /* É */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N9)
            #endif
            #endif
        )
        world_e_acute_upper: world_e_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_upper_macro>, <&world_e_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_acute: world_e_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_diaeresis_lower_macro, /* ë */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NB)
            #endif
            #endif
        )
        world_e_diaeresis_lower: world_e_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_lower_macro>, <&world_e_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_diaeresis_upper_macro, /* Ë */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NB)
            #endif
            #endif
        )
        world_e_diaeresis_upper: world_e_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_upper_macro>, <&world_e_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_diaeresis: world_e_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_circumflex_lower_macro, /* ê */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NA)
            #endif
            #endif
        )
        world_e_circumflex_lower: world_e_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_lower_macro>, <&world_e_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_circumflex_upper_macro, /* Ê */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NA)
            #endif
            #endif
        )
        world_e_circumflex_upper: world_e_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_upper_macro>, <&world_e_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_circumflex: world_e_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_grave_lower_macro, /* è */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N8)
            #endif
            #endif
        )
        world_e_grave_lower: world_e_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_lower_macro>, <&world_e_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_grave_upper_macro, /* È */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N8)
            #endif
            #endif
        )
        world_e_grave_upper: world_e_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_upper_macro>, <&world_e_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_grave: world_e_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_oe_lower_macro, /* œ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N5 &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N5 &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N5 &kp _N3)
            #endif
        )
        world_e_oe_lower: world_e_oe_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower_macro>, <&world_e_oe_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_oe_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_oe_upper_macro, /* Œ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N5 &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N5 &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N5 &kp _N2)
            #endif
        )
        world_e_oe_upper: world_e_oe_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_upper_macro>, <&world_e_oe_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_oe_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_oe: world_e_oe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower>, <&world_e_oe_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_ae_lower_macro, /* æ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_LINUX(&kp A &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_MACOS(&kp LA(SQT))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N6)
            #endif
            #endif
        )
        world_e_ae_lower: world_e_ae_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_lower_macro>, <&world_e_ae_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_ae_upper_macro, /* Æ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_LINUX(&kp LS(A) &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(SQT)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N6)
            #endif
            #endif
        )
        world_e_ae_upper: world_e_ae_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_upper_macro>, <&world_e_ae_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_ae: world_e_ae {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_acute_lower_macro, /* á */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N1)
            #endif
            #endif
        )
        world_a_acute_lower: world_a_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_lower_macro>, <&world_a_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_acute_upper_macro, /* Á */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N1)
            #endif
            #endif
        )
        world_a_acute_upper: world_a_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_upper_macro>, <&world_a_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_acute: world_a_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_diaeresis_lower_macro, /* ä */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N4)
            #endif
            #endif
        )
        world_a_diaeresis_lower: world_a_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_lower_macro>, <&world_a_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_diaeresis_upper_macro, /* Ä */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N4)
            #endif
            #endif
        )
        world_a_diaeresis_upper: world_a_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_upper_macro>, <&world_a_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_diaeresis: world_a_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_circumflex_lower_macro, /* â */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N2)
            #endif
            #endif
        )
        world_a_circumflex_lower: world_a_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_lower_macro>, <&world_a_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_circumflex_upper_macro, /* Â */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N2)
            #endif
            #endif
        )
        world_a_circumflex_upper: world_a_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_upper_macro>, <&world_a_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_circumflex: world_a_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_grave_lower_macro, /* à */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N0)
            #endif
            #endif
        )
        world_a_grave_lower: world_a_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_lower_macro>, <&world_a_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_grave_upper_macro, /* À */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N0)
            #endif
            #endif
        )
        world_a_grave_upper: world_a_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_upper_macro>, <&world_a_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_grave: world_a_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_tilde_lower_macro, /* ã */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N3)
            #endif
            #endif
        )
        world_a_tilde_lower: world_a_tilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_lower_macro>, <&world_a_tilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_tilde_upper_macro, /* Ã */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N3)
            #endif
            #endif
        )
        world_a_tilde_upper: world_a_tilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_upper_macro>, <&world_a_tilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_tilde: world_a_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_ring_lower_macro, /* å */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_LINUX(&kp O &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_MACOS(&kp LA(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N5)
            #endif
            #endif
        )
        world_a_ring_lower: world_a_ring_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_lower_macro>, <&world_a_ring_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_ring_upper_macro, /* Å */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_LINUX(&kp O &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(A)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N5)
            #endif
            #endif
        )
        world_a_ring_upper: world_a_ring_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_upper_macro>, <&world_a_ring_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_ring: world_a_ring {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_y_acute_lower_macro, /* ý */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp Y)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp Y)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _ND)
            #endif
            #endif
        )
        world_y_acute_lower: world_y_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_lower_macro>, <&world_y_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_y_acute_upper_macro, /* Ý */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(Y))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(Y))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _ND)
            #endif
            #endif
        )
        world_y_acute_upper: world_y_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_upper_macro>, <&world_y_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_y_acute: world_y_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_y_diaeresis_lower_macro, /* ÿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp Y)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp Y)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NF)
            #endif
            #endif
        )
        world_y_diaeresis_lower: world_y_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_lower_macro>, <&world_y_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_y_diaeresis_upper_macro, /* Ÿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(Y))
            #else
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N7 &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(Y))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N7 &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N7 &kp _N8)
            #endif
            #endif
        )
        world_y_diaeresis_upper: world_y_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_upper_macro>, <&world_y_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_y_diaeresis: world_y_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_acute_lower_macro, /* ó */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N3)
            #endif
            #endif
        )
        world_o_acute_lower: world_o_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_lower_macro>, <&world_o_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_acute_upper_macro, /* Ó */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N3)
            #endif
            #endif
        )
        world_o_acute_upper: world_o_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_upper_macro>, <&world_o_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_acute: world_o_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_diaeresis_lower_macro, /* ö */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N6)
            #endif
            #endif
        )
        world_o_diaeresis_lower: world_o_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_lower_macro>, <&world_o_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_diaeresis_upper_macro, /* Ö */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N6)
            #endif
            #endif
        )
        world_o_diaeresis_upper: world_o_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_upper_macro>, <&world_o_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_diaeresis: world_o_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_circumflex_lower_macro, /* ô */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N4)
            #endif
            #endif
        )
        world_o_circumflex_lower: world_o_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_lower_macro>, <&world_o_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_circumflex_upper_macro, /* Ô */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N4)
            #endif
            #endif
        )
        world_o_circumflex_upper: world_o_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_upper_macro>, <&world_o_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_circumflex: world_o_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_grave_lower_macro, /* ò */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N2)
            #endif
            #endif
        )
        world_o_grave_lower: world_o_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_lower_macro>, <&world_o_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_grave_upper_macro, /* Ò */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N2)
            #endif
            #endif
        )
        world_o_grave_upper: world_o_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_upper_macro>, <&world_o_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_grave: world_o_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_tilde_lower_macro, /* õ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N5)
            #endif
            #endif
        )
        world_o_tilde_lower: world_o_tilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_lower_macro>, <&world_o_tilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_tilde_upper_macro, /* Õ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N5)
            #endif
            #endif
        )
        world_o_tilde_upper: world_o_tilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_upper_macro>, <&world_o_tilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_tilde: world_o_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_slash_lower_macro, /* ø */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_LINUX(&kp FSLH &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_MACOS(&kp LA(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N8)
            #endif
            #endif
        )
        world_o_slash_lower: world_o_slash_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_lower_macro>, <&world_o_slash_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_slash_upper_macro, /* Ø */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_LINUX(&kp FSLH &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(O)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N8)
            #endif
            #endif
        )
        world_o_slash_upper: world_o_slash_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_upper_macro>, <&world_o_slash_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_slash: world_o_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
            mods = <MOD_LSFT>;
        };
        world_o_oe: world_o_oe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower>, <&world_e_oe_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_acute_lower_macro, /* ú */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NA)
            #endif
            #endif
        )
        world_u_acute_lower: world_u_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_lower_macro>, <&world_u_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_acute_upper_macro, /* Ú */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NA)
            #endif
            #endif
        )
        world_u_acute_upper: world_u_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_upper_macro>, <&world_u_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_acute: world_u_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_diaeresis_lower_macro, /* ü */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NC)
            #endif
            #endif
        )
        world_u_diaeresis_lower: world_u_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_lower_macro>, <&world_u_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_diaeresis_upper_macro, /* Ü */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NC)
            #endif
            #endif
        )
        world_u_diaeresis_upper: world_u_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_upper_macro>, <&world_u_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_diaeresis: world_u_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_circumflex_lower_macro, /* û */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NB)
            #endif
            #endif
        )
        world_u_circumflex_lower: world_u_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_lower_macro>, <&world_u_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_circumflex_upper_macro, /* Û */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NB)
            #endif
            #endif
        )
        world_u_circumflex_upper: world_u_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_upper_macro>, <&world_u_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_circumflex: world_u_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_grave_lower_macro, /* ù */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N9)
            #endif
            #endif
        )
        world_u_grave_lower: world_u_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_lower_macro>, <&world_u_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_grave_upper_macro, /* Ù */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N9)
            #endif
            #endif
        )
        world_u_grave_upper: world_u_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_upper_macro>, <&world_u_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_grave: world_u_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_cedilla_lower_macro, /* ç */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_LINUX(&kp COMMA &kp C)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_MACOS(&kp LA(C))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N7)
            #endif
            #endif
        )
        world_consonants_cedilla_lower: world_consonants_cedilla_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_lower_macro>, <&world_consonants_cedilla_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_cedilla_upper_macro, /* Ç */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_LINUX(&kp COMMA &kp LS(C))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(C)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N7)
            #endif
            #endif
        )
        world_consonants_cedilla_upper: world_consonants_cedilla_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_upper_macro>, <&world_consonants_cedilla_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_cedilla: world_consonants_cedilla {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_lower>, <&world_consonants_cedilla_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_eszett_lower_macro, /* ß */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_LINUX(&kp S &kp S)
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_MACOS(&kp LA(S))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NF)
            #endif
            #endif
        )
        world_consonants_eszett_lower: world_consonants_eszett_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_lower_macro>, <&world_consonants_eszett_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_eszett_upper_macro, /* ẞ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
            COMPOSE_SEQ_LINUX(&kp LS(S) &kp LS(S))
            #else
            UNICODE_SEQ_LINUX(&kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(S)))
            #else
            UNICODE_SEQ_MACOS(&kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
        )
        world_consonants_eszett_upper: world_consonants_eszett_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_upper_macro>, <&world_consonants_eszett_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_eszett: world_consonants_eszett {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_lower>, <&world_consonants_eszett_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_ntilde_lower_macro, /* ñ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp N)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp N)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N1)
            #endif
            #endif
        )
        world_consonants_ntilde_lower: world_consonants_ntilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_lower_macro>, <&world_consonants_ntilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_ntilde_upper_macro, /* Ñ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(N))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(N))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N1)
            #endif
            #endif
        )
        world_consonants_ntilde_upper: world_consonants_ntilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_upper_macro>, <&world_consonants_ntilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_ntilde: world_consonants_ntilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_lower>, <&world_consonants_ntilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_angle_lower_macro, /* ‹ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #endif
        )
        world_quotes_left_angle_lower: world_quotes_left_angle_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_lower_macro>, <&world_quotes_left_angle_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_angle_upper_macro, /* « */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _NB)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NB)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NB)
            #endif
        )
        world_quotes_left_angle_upper: world_quotes_left_angle_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_upper_macro>, <&world_quotes_left_angle_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_angle: world_quotes_left_angle {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_lower>, <&world_quotes_left_angle_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_curly_lower_macro, /* ‘ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #endif
        )
        world_quotes_left_curly_lower: world_quotes_left_curly_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_lower_macro>, <&world_quotes_left_curly_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_curly_upper_macro, /* “ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #endif
        )
        world_quotes_left_curly_upper: world_quotes_left_curly_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_upper_macro>, <&world_quotes_left_curly_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_curly: world_quotes_left_curly {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_lower>, <&world_quotes_left_curly_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_low_lower_macro, /* ‚ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #endif
        )
        world_quotes_left_low_lower: world_quotes_left_low_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower_macro>, <&world_quotes_left_low_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_low_upper_macro, /* „ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #endif
        )
        world_quotes_left_low_upper: world_quotes_left_low_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_upper_macro>, <&world_quotes_left_low_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_low: world_quotes_left_low {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_corner1_lower_macro, /* 「 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #endif
        )
        world_quotes_left_corner1_lower: world_quotes_left_corner1_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_lower_macro>, <&world_quotes_left_corner1_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_corner1_upper_macro, /* ﹁ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N1)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N1)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N1)
            #endif
        )
        world_quotes_left_corner1_upper: world_quotes_left_corner1_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_upper_macro>, <&world_quotes_left_corner1_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_corner1: world_quotes_left_corner1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_lower>, <&world_quotes_left_corner1_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_corner2_lower_macro, /* 『 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #endif
        )
        world_quotes_left_corner2_lower: world_quotes_left_corner2_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_lower_macro>, <&world_quotes_left_corner2_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_corner2_upper_macro, /* ﹃ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N3)
            #endif
        )
        world_quotes_left_corner2_upper: world_quotes_left_corner2_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_upper_macro>, <&world_quotes_left_corner2_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_corner2: world_quotes_left_corner2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_lower>, <&world_quotes_left_corner2_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_grave_macro, /* ` */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N6 &kp _N0)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _N6 &kp _N0)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N6 &kp _N0)
            #endif
        )
        world_quotes_left_grave: world_quotes_left_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_grave_macro>, <&world_quotes_left_grave_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_grave
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_angle_lower_macro, /* › */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #endif
        )
        world_quotes_right_angle_lower: world_quotes_right_angle_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_lower_macro>, <&world_quotes_right_angle_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_angle_upper_macro, /* » */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NB &kp _NB)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NB)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NB)
            #endif
        )
        world_quotes_right_angle_upper: world_quotes_right_angle_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_upper_macro>, <&world_quotes_right_angle_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_angle: world_quotes_right_angle {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_lower>, <&world_quotes_right_angle_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_curly_lower_macro, /* ’ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #endif
        )
        world_quotes_right_curly_lower: world_quotes_right_curly_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_lower_macro>, <&world_quotes_right_curly_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_curly_upper_macro, /* ” */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #endif
        )
        world_quotes_right_curly_upper: world_quotes_right_curly_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_upper_macro>, <&world_quotes_right_curly_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_curly: world_quotes_right_curly {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_lower>, <&world_quotes_right_curly_upper>;
            mods = <MOD_LSFT>;
        };
        world_quotes_right_low: world_quotes_right_low {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_corner1_lower_macro, /* 」 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #endif
        )
        world_quotes_right_corner1_lower: world_quotes_right_corner1_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_lower_macro>, <&world_quotes_right_corner1_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_corner1_upper_macro, /* ﹂ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N2)
            #endif
        )
        world_quotes_right_corner1_upper: world_quotes_right_corner1_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_upper_macro>, <&world_quotes_right_corner1_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_corner1: world_quotes_right_corner1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_lower>, <&world_quotes_right_corner1_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_corner2_lower_macro, /* 』 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #endif
        )
        world_quotes_right_corner2_lower: world_quotes_right_corner2_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_lower_macro>, <&world_quotes_right_corner2_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_corner2_upper_macro, /* ﹄ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N4)
            #endif
        )
        world_quotes_right_corner2_upper: world_quotes_right_corner2_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_upper_macro>, <&world_quotes_right_corner2_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_corner2: world_quotes_right_corner2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_lower>, <&world_quotes_right_corner2_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_grave_macro, /* ´ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NB &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N4)
            #endif
        )
        world_quotes_right_grave: world_quotes_right_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_grave_macro>, <&world_quotes_right_grave_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_grave
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_dollar_lower_macro, /* $ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _N2 &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N4)
            #endif
        )
        world_currency_dollar_lower: world_currency_dollar_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar_lower_macro>, <&world_currency_dollar_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_dollar_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_currency_dollar: world_currency_dollar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar_lower>, <&world_currency_cent>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_currency_yen_macro, /* ¥ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N5)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N5)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N5)
            #endif
        )
        world_currency_yen: world_currency_yen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_yen_macro>, <&world_currency_yen_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_yen
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_euro_macro, /* € */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_LINUX(&kp E &kp EQUAL)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_MACOS(&kp LA(LS(N2)))
            #else
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #endif
        )
        world_currency_euro: world_currency_euro {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_euro_macro>, <&world_currency_euro_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_euro
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_won_macro, /* ₩ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NA &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NA &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NA &kp _N9)
            #endif
        )
        world_currency_won: world_currency_won {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_won_macro>, <&world_currency_won_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_won
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_pound_macro, /* £ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N3)
            #endif
        )
        world_currency_pound: world_currency_pound {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_pound_macro>, <&world_currency_pound_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_pound
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_currency_generic: world_currency_generic {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_sign>, <&world_currency_crypto>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_sign_copyright_regular_macro, /* © */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_LINUX(&kp O &kp C)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_MACOS(&kp LA(G))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N9)
            #endif
            #endif
        )
        world_sign_copyright_regular: world_sign_copyright_regular {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_regular_macro>, <&world_sign_copyright_regular_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_sign_copyright_shifted_macro, /* ® */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_LINUX(&kp O &kp R)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_MACOS(&kp LA(R))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NE)
            #endif
            #endif
        )
        world_sign_copyright_shifted: world_sign_copyright_shifted {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_shifted_macro>, <&world_sign_copyright_shifted_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_sign_copyright: world_sign_copyright {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_regular>, <&world_sign_copyright_shifted>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_sign_trademark_regular_macro, /* ™ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_LINUX(&kp T &kp M)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_MACOS(&kp LA(N2))
            #else
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #endif
        )
        world_sign_trademark_regular: world_sign_trademark_regular {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_regular_macro>, <&world_sign_trademark_regular_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_sign_trademark_shifted_macro, /* ℠ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_shifted
            COMPOSE_SEQ_LINUX(&kp S &kp M)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #endif
        )
        world_sign_trademark_shifted: world_sign_trademark_shifted {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_shifted_macro>, <&world_sign_trademark_shifted_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_trademark_shifted
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_sign_trademark: world_sign_trademark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_regular>, <&world_sign_trademark_shifted>;
            mods = <MOD_LSFT>;
        };

        //
        // transforms
        //
        world_i_base: world_i_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute>, <&world_i_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_i_LCTL: world_i_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_i_RCTL: world_i_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex>, <&world_i_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_e_base: world_e_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute>, <&world_e_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_LALT: world_e_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe>, <&world_e_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_RALT: world_e_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae>, <&world_e_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_LCTL: world_e_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_e_RCTL: world_e_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex>, <&world_e_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_a_base: world_a_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute>, <&world_a_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_LALT: world_a_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde>, <&world_a_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_RALT: world_a_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring>, <&world_a_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_LCTL: world_a_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_a_RCTL: world_a_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex>, <&world_a_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_y_base: world_y_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute>, <&world_y_diaeresis>;
            mods = <(MOD_LCTL)>;
        };
        world_o_base: world_o_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute>, <&world_o_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_LALT: world_o_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde>, <&world_o_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_RALT: world_o_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash>, <&world_o_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_LCTL: world_o_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_o_RCTL: world_o_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex>, <&world_o_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_u_base: world_u_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute>, <&world_u_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_u_LCTL: world_u_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_u_RCTL: world_u_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex>, <&world_u_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_consonants_base: world_consonants_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla>, <&world_consonants_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        world_consonants_LCTL: world_consonants_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde>, <&world_consonants_eszett>;
            mods = <(MOD_RCTL)>;
        };
        world_quotes_left_base: world_quotes_left_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle>, <&world_quotes_left_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_LALT: world_quotes_left_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1>, <&world_quotes_left_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_RALT: world_quotes_left_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2>, <&world_quotes_left_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_LCTL: world_quotes_left_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly>, <&world_quotes_left_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_RCTL: world_quotes_left_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low>, <&world_quotes_left_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_quotes_right_base: world_quotes_right_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle>, <&world_quotes_right_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_LALT: world_quotes_right_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1>, <&world_quotes_right_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_RALT: world_quotes_right_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2>, <&world_quotes_right_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_LCTL: world_quotes_right_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly>, <&world_quotes_right_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_RCTL: world_quotes_right_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_low>, <&world_quotes_right_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_currency_base: world_currency_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar>, <&world_currency_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_LALT: world_currency_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_yen>, <&world_currency_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_RALT: world_currency_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_won>, <&world_currency_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_LCTL: world_currency_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_euro>, <&world_currency_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_RCTL: world_currency_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_pound>, <&world_currency_generic>;
            mods = <(MOD_RSFT)>;
        };
        world_sign_base: world_sign_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright>, <&world_sign_trademark>;
            mods = <(MOD_LCTL)>;
        }; 

        // Custom maccro
        // Update to have "à" in default.
        world_a_base_perso: world_a_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave>, <&world_a_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_LALT_perso: world_a_LALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde>, <&world_a_RALT_perso>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_RALT_perso: world_a_RALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring>, <&world_a_LCTL_perso>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_LCTL_perso: world_a_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis>, <&world_a_RCTL_perso>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_a_RCTL_perso: world_a_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex>, <&world_a_acute>;
            mods = <(MOD_RSFT)>;
        };
            // For ç
            world_consonants_base_perso: world_consonants_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla>, <&world_consonants_cedilla_upper>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            // Update to have "è" in default.
            world_e_base_perso: world_e_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave>, <&world_e_RALT_perso>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_e_RALT_perso: world_e_RALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae>, <&world_e_LCTL_perso>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_e_LCTL_perso: world_e_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis>, <&world_e_RCTL_perso>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_e_RCTL_perso: world_e_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex>, <&world_e_acute>;
            mods = <(MOD_RSFT)>;
        };
            // For u and have defaut "ù"
            world_u_base_perso: world_u_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave>, <&world_u_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_u_LCTL_perso: world_u_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_u_RCTL_perso: world_u_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex>, <&world_u_grave>;
            mods = <(MOD_RSFT)>;
        };
        

        // Layer tap behaviors

        lt_cursor: layer_tap_cursor {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_number: layer_tap_number {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_symbol: layer_tap_symbol {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_system: layer_tap_system {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_world: layer_tap_world {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_function: layer_tap_function {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // Behaviors pour thumb cluster (comme Glove80)

        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;  // Plus lent que space pour éviter les activations accidentelles
            quick-tap-ms = <150>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        space: thumb_layer_access_spacebar {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <150>;  // Plus rapide que thumb (200ms)
            quick-tap-ms = <125>;     // Répétition plus rapide pour espace
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            retro-tap;               // tap on standalone hold (comme Glove80)
        };

        // Toggle pour switcher entre macOS et Windows

        os_toggle: os_toggle {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&tog 7>, <&none>, <&tog 7>;
        };

        // Behaviors adaptatifs selon l'OS

        world_e_acute_adaptive: world_e_acute_adaptive {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>, <&world_e_acute_windows>;

            // macOS par défaut, Windows avec layer 7

            mods = <(MOD_LCTL)>;
        };

        // Macro pour Hyper Key (Shift+Ctrl+Alt+Gui)

        hyper_key: hyper_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;
        };

        // === MACROS BLUETOOTH AVEC RGB ===

        bt_0_connect: bt_0_connect {
            label = "BT_0_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&out OUT_BLE &bt BT_SEL 0 &rgb_ug RGB_TOG>;
        };

        bt_1_connect: bt_1_connect {
            label = "BT_1_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&out OUT_BLE &bt BT_SEL 1 &rgb_ug RGB_TOG>;
        };

        bt_2_connect: bt_2_connect {
            label = "BT_2_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&out OUT_BLE &bt BT_SEL 2 &rgb_ug RGB_TOG>;
        };

        bt_3_connect: bt_3_connect {
            label = "BT_3_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&out OUT_BLE &bt BT_SEL 3 &rgb_ug RGB_TOG>;
        };

        bt_4_connect: bt_4_connect {
            label = "BT_4_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&out OUT_BLE &bt BT_SEL 4 &rgb_ug RGB_TOG>;
        };

        usb_connect: usb_connect {
            label = "USB_CONNECT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap>, <&out OUT_USB &rgb_ug RGB_TOG>;
        };

        // === MACROS WINDOWS MODE ===

        windows_mode_on: windows_mode_on {
            label = "WINDOWS_MODE_ON";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap>, <&to 7 &rgb_ug RGB_TOG>;
        };

        windows_mode_off: windows_mode_off {
            label = "WINDOWS_MODE_OFF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap>, <&to 0 &rgb_ug RGB_TOG>;
        };

        // === MACRO SIMPLE WINDOWS MODE TOGGLE ===

        windows_mode_toggle: windows_mode_toggle {
            label = "WINDOWS_MODE_TOGGLE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap>, <&tog 7 &rgb_ug RGB_TOG>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Combo SPACE + ENTER → Hyper Key (comme Glove80 combo_sticky_hyper_right)

        combo_sticky_hyper_right {
            timeout-ms = <50>;
            key-positions = <75 81>; // ENTER (position 75) + SPACE (position 81)
            bindings = <&sk LG(LA(LC(LSHFT)))>; // Sticky Hyper key (Cmd+Alt+Ctrl+Shift)
            layers = <0 1 2 3 4 5 6 7>; // Actif sur tous les layers comme sur Glove80
        };
    };

    // Macros Windows pour layer 7 (placé avant keymap)

    macros {
        world_e_grave_windows: world_e_grave_windows {
            label = "WORLD_E_GRAVE_WINDOWS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&kp LALT &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N2>;

            // è (Alt+0232)
        };

        // Ajouter la macro manquante pour é

        world_e_acute_windows: world_e_acute_windows {
            label = "WORLD_E_ACUTE_WINDOWS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap>, <&kp SQT &kp E>;

            // Windows US Intl: ' puis e pour é
        };

        world_a_grave_windows: world_a_grave_windows {
            label = "WORLD_A_GRAVE_WINDOWS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&kp LALT &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N4>;

            // à (Alt+0224)
        };

        world_u_grave_windows: world_u_grave_windows {
            label = "WORLD_U_GRAVE_WINDOWS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&kp LALT &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N9>;

            // ù (Alt+0249)
        };

        world_o_circumflex_windows: world_o_circumflex_windows {
            label = "WORLD_O_CIRCUMFLEX_WINDOWS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&kp LALT &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N4>;

            // ô (Alt+0244)
        };

        world_c_cedilla_windows: world_c_cedilla_windows {
            label = "WORLD_C_CEDILLA_WINDOWS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings =
                <&macro_tap>,
                <&kp LALT &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N1>;

            // ç (Alt+0231)
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Layer 0: QWERTY avec home row mods différenciés par doigt

        qwerty_layer {
            bindings = <
&none  &none               &none              &none                      &none          &none                       &none       &none            &none              &none              &none               &none
&none  &kp N1              &kp N2             &world_e_acute_with_shift  &kp SQT        &kp N5                      &kp N6      &kp N7           &kp N8             &kp N9             &kp N0              &none
&none  &kp Q               &kp W              &kp E                      &kp R          &kp T                       &kp Y       &kp U            &kp I              &kp O              &kp SEMI            &none
&none  &lmt_pinky LCTRL A  &lmt_ringy LALT S  &lmt_middy LGUI D          &lmt LSHFT F   &kp G                       &kp H       &rmt RSHFT J     &rmt_middy RGUI K  &rmt_ringy RALT L  &rmt_pinky RCTRL P  &none
&none  &kp Z               &kp X              &kp C                      &kp V          &kp B                       &kp N       &kp M            &kp COMMA          &kp DOT            &kp FSLH            &none
&none  &none               &kp UP             &kp DOWN                   &none                                                  &none            &kp LBKT           &kp RBKT           &none               &none
                                                                         &thumb 6 ESC   &none         &none         &none       &thumb 4 INSERT  &thumb 5 ENTER
                                                                         &thumb 1 BSPC  &thumb 2 DEL  &hyper_key    &caps_word  &thumb 8 TAB     &space 3 SPACE
            >;
        };

        // Layer 1: Cursor/Navigation

        cursor_layer {
            bindings = <
&trans  &trans         &trans      &trans         &trans         &trans               &trans    &trans     &trans      &trans      &trans     &trans
&trans  &trans         &trans      &trans         &trans         &trans               &trans    &trans     &trans      &trans      &trans     &trans
&trans  &kp LA(LG(E))  &kp LA(R)   &kp LA(V)      &kp LA(A)      &kp LG(X)            &kp BSPC  &kp SPACE  &kp K_UNDO  &kp K_REDO  &sk LSHFT  &trans
&trans  &kp LCTRL      &kp LALT    &kp LGUI       &kp LSHFT      &kp LG(C)            &kp LEFT  &kp DOWN   &kp UP      &kp RIGHT   &trans     &trans
&trans  &kp LC(A)      &kp LA(T)   &kp LA(LG(J))  &kp LA(LG(L))  &kp LG(V)            &trans    &kp F11    &kp PG_UP   &kp PG_DN   &kp END    &trans
&trans  &trans         &kp K_REDO  &kp K_UNDO     &trans                                        &trans     &kp LC(F)   &kp LS(F3)  &trans     &trans
                                                  &kp LA(TAB)    &trans     &trans    &trans    &trans     &kp ENTER
                                                  &trans         &trans         &trans    &trans    &kp TAB    &kp SPACE
            >;
        };

        // Layer 2: Number

        number_layer {
            bindings = <
&trans  &trans  &trans    &trans       &trans       &trans                          &trans     &trans                 &trans     &trans    &trans     &trans
&trans  &trans  &trans    &trans       &trans       &trans                          &kp TILDE  &kp CARET              &kp HASH   &kp DLLR  &kp EXCL   &trans
&trans  &trans  &trans    &kp LC(TAB)  &kp LA(TAB)  &trans                          &kp PRCNT  &kp N7                 &kp N8     &kp N9    &kp COLON  &trans
&trans  &trans  &kp BSPC  &kp SPACE    &kp DOT      &trans                          &kp PLUS   &kp N4                 &kp N5     &kp N6    &kp MINUS  &trans
&trans  &trans  &trans    &trans       &kp COMMA    &kp LS(LG(NUMBER_4))            &kp STAR   &kp N1                 &kp N2     &kp N3    &kp FSLH   &trans
&trans  &trans  &trans    &trans       &trans                                                  &trans                 &kp LT     &kp GT    &trans     &trans
                                       &trans       &trans                &trans    &trans     &kp LEFT_PARENTHESIS   &kp EQUAL
                                       &trans       &trans                &trans    &trans     &kp RIGHT_PARENTHESIS  &kp N0
            >;
        };

        // Layer 3: Symbol

        symbol_layer {
            bindings = <
&trans     &trans     &trans     &trans     &trans     &trans               &trans     &trans     &trans     &trans     &trans     &trans
&trans     &trans     &trans     &trans     &trans     &trans               &trans     &trans     &kp EXCL   &kp EQUAL  &trans     &trans
&trans     &kp SQT    &kp LPAR   &kp LBKT   &kp DQT    &kp QMARK            &kp SQT    &kp DQT    &kp RBKT   &kp RPAR   &kp AMPS   &trans
&kp HASH   &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR             &kp BSPC   &kp SPACE  &kp TAB    &kp SEMI   &kp AT     &trans
&kp GRAVE  &kp LT     &kp PIPE   &kp MINUS  &kp GT     &kp FSLH             &kp GRAVE  &kp DEL    &kp COMMA  &kp DOT    &kp TILDE  &trans
&trans     &trans     &kp LBRC   &kp RBRC   &trans                                     &trans     &trans     &trans     &trans     &trans
                                            &kp BSLH   &trans     &trans    &trans     &trans     &trans
                                            &kp PRCNT  &kp COLON  &trans    &trans     &trans     &trans
            >;
        };

        // Layer 4: System + RGB + Bluetooth Vert/Rouge + Windows Toggle Violet
        // Tap = Connect (VERT) | Double-tap = Disconnect (ROUGE) | Windows Mode = VIOLET

        system_layer {
            bindings = <
&trans          &trans         &trans         &trans         &trans                &trans                       &trans  &trans           &trans           &trans           &trans           &trans
&trans          &trans         &trans         &trans         &trans                &trans                       &trans  &rgb_ug RGB_ON   &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &trans
&bt BT_CLR_ALL  &trans         &trans         &trans         &trans                &bt BT_CLR                   &none   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &trans
&trans          &bt_0_connect  &bt_1_connect  &bt_2_connect  &bt_3_connect         &usb_connect                 &none   &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &trans
&trans          &bt_4_connect  &trans         &trans         &windows_mode_toggle  &trans                       &none   &none            &none            &none            &none            &trans
&trans          &trans         &trans         &trans         &trans                                                     &trans           &sys_reset       &bootloader      &trans           &trans
                                                             &kp K_LOCK            &kp C_SLEEP   &kp C_POWER    &trans  &trans           &trans
                                                             &none                 &none         &none          &trans  &trans           &trans
            >;
        };

        // Layer 5: World

        world_layer {
            bindings = <
&trans  &trans               &trans  &trans                        &trans  &trans            &trans         &trans               &trans         &trans         &trans     &trans
&trans  &trans               &trans  &trans                        &trans  &trans            &trans         &trans               &trans         &trans         &trans     &trans
&trans  &trans               &trans  &world_e_base_perso           &trans  &trans            &world_y_base  &world_u_base_perso  &world_i_base  &world_o_base  &trans     &trans
&trans  &world_a_base_perso  &trans  &trans                        &trans  &trans            &trans         &sk LSHFT            &sk LCTRL      &sk RCTRL      &sk RSHFT  &trans
&trans  &trans               &trans  &world_consonants_base_perso  &trans  &trans            &trans         &trans               &sk LALT       &sk RALT       &trans     &trans
&trans  &trans               &trans  &trans                        &trans                                   &trans               &trans         &trans         &trans     &trans
                                                                   &trans  &trans  &trans    &trans         &trans               &trans
                                                                   &trans  &trans  &trans    &trans         &trans               &trans
            >;
        };

        // Layer 6: Function (basé sur layer_Function du Glove80)

        function_layer {
            bindings = <
&trans  &trans     &trans    &trans    &trans     &trans            &trans            &trans            &trans           &trans        &trans   &trans
&none   &none      &none     &none     &none      &none             &kp C_MEDIA_HOME  &kp C_PLAY        &kp F1           &kp F2        &none    &none
&trans  &none      &none     &none     &none      &trans            &kp LG(LA(Y))     &kp LG(LA(U))     &kp LG(LA(I))    &kp F9        &kp F10  &kp F13
&trans  &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &trans            &kp LS(LG(N4))    &kp LG(KP_MINUS)  &kp LG(KP_PLUS)  &kp F6        &kp F11  &kp F14
&trans  &none      &trans    &trans    &trans     &trans            &none             &increase_vscode_view   &decrease_vscode_view           &kp F3        &kp F12  &kp F15
&trans  &trans     &trans    &trans    &trans                                         &none             &kp C_BRI_UP     &kp C_BRI_DN  &none    &none
                                       &trans     &trans  &trans    &kp C_PP          &kp C_PREV        &kp C_NEXT
                                       &trans     &trans  &trans    &kp C_MUTE        &kp C_VOL_DN      &kp C_VOL_UP
            >;
        };

        // Layer 7: Windows Mode (quand activé, utilise les séquences Windows)

        windows_mode_layer {
            bindings = <
&trans  &trans                  &trans  &trans                    &trans  &trans            &trans  &trans                  &trans     &trans                       &trans     &trans
&trans  &trans                  &trans  &trans                    &trans  &trans            &trans  &trans                  &trans     &trans                       &trans     &trans
&trans  &trans                  &trans  &world_e_grave_windows    &trans  &trans            &trans  &world_u_grave_windows  &trans     &world_o_circumflex_windows  &trans     &trans
&trans  &world_a_grave_windows  &trans  &trans                    &trans  &trans            &trans  &sk LSHFT               &sk LCTRL  &sk RCTRL                    &sk RSHFT  &trans
&trans  &trans                  &trans  &world_c_cedilla_windows  &trans  &trans            &trans  &trans                  &sk LALT   &sk RALT                     &trans     &trans
&trans  &trans                  &trans  &trans                    &trans                            &trans                  &trans     &trans                       &trans     &trans
                                                                  &trans  &trans  &trans    &trans  &trans                  &trans
                                                                  &trans  &trans  &trans    &trans  &trans                  &tog 7
            >;
        };

        // Layer 8: Mouse + Navigation vscode

        mouse_layer {
            bindings = <
&trans  &trans     &trans          &trans          &trans           &trans               &none              &none              &trans                  &trans              &trans  &trans
&none   &none      &none           &none           &none            &none                &msc SCRL_DOWN     &msc SCRL_UP                     &none                   &none               &none   &none
&trans  &none      &none           &msc SCRL_LEFT  &msc SCRL_RIGHT  &kp LG(X)            &kp LG(N)          &split_editor_horizontal  &split_editor_vertical  &none               &none   &none
&trans  &kp LCTRL  &kp LALT        &kp LGUI        &kp LSHFT        &kp LG(C)            &focus_left_group  &focus_down_group         &focus_up_group         &focus_right_group  &none   &none
&trans  &none      &none           &none           &none            &kp LG(V)            &none              &kp LS(LG(E))             &kp LG(NUMBER_1)        &kp LC(GRAVE)       &none   &none
&trans  &trans     &msc SCRL_DOWN  &msc SCRL_UP    &trans                                                   &none                     &msc SCRL_DOWN          &msc SCRL_UP        &none   &none
                                                   &trans           &mkp MCLK  &trans    &none              &none                     &none
                                                   &mkp LCLK        &mkp RCLK  &trans    &none              &none                     &none
            >;
        };
    };

    // === MACROS DE NAVIGATION POUR LAYER MOUSE ===
    // Inspirées du layer Mouse du Glove80 pour la navigation d'éditeur/panel
    // Navigation entre groupes/panels (style Vim en VS Code)

    focus_left_group: focus_left_group {
        label = "FOCUS_LEFT_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp H>;
    };

    focus_right_group: focus_right_group {
        label = "FOCUS_RIGHT_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp L>;
    };

    focus_up_group: focus_up_group {
        label = "FOCUS_UP_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp K>;
    };

    focus_down_group: focus_down_group {
        label = "FOCUS_DOWN_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp J>;
    };

    // Division de l'éditeur (split windows)

    split_editor_vertical: split_editor_vertical {
        label = "SPLIT_EDITOR_VERTICAL";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp V>;
    };

    split_editor_horizontal: split_editor_horizontal {
        label = "SPLIT_EDITOR_HORIZONTAL";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp S>;
    };

    // To increase / decrease current view VsCode
    increase_vscode_view: increase_vscode_view {
        label = "&increase_vscode_view";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings
            = <&macro_tap>
            , <&kp LC(T)>
            , <&kp KP_PLUS>;
    };

    decrease_vscode_view: decrease_vscode_view {
        label = "&decrease_vscode_view";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings
            = <&macro_tap>
            , <&kp LC(T)>
            , <&kp KP_MINUS>;
    };

    // Behaviors pour modificateurs dans layer mouse (sticky keys)

    right_index_mod: right_index_mod {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_INDEX_MOD";
        #binding-cells = <0>;
        bindings = <&sk RCTRL>, <&kp RCTRL>;

        mods = <(MOD_LALT|MOD_RALT)>;
    };

    right_pinky_mod: right_pinky_mod {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_PINKY_MOD";
        #binding-cells = <0>;
        bindings = <&sk RSHFT>, <&kp RSHFT>;

        mods = <(MOD_LALT|MOD_RALT)>;
    };
};

// Configuration trackball main droite
&trackball_peripheral_listener {
    input-processors =
        <&zip_temp_layer 8 500>;
};

