#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    behaviors {
        

        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
                 windows_mode_on: windows_mode_on {
            label = "WINDOWS_MODE_ON_VIOLET";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &to 7 &rgb_ug RGB_ON>;
        }; "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        

        world_a_base_perso: world_a_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(GRAVE)>, <&world_a_alt>;

            

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_a_alt: world_a_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(A)>, <&kp RA(LS(A))>;

            

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_e_base_perso: world_e_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(GRAVE)>, <&world_e_alt>;

            

            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_e_alt: world_e_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>, <&kp RA(LS(E))>;

            

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_i_base: world_i_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(I)>, <&world_i_ctrl>;

            

            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_i_ctrl: world_i_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(LS(U))>, <&kp RA(LS(I))>;

            

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_o_base: world_o_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(O)>, <&world_o_alt>;

            

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_o_alt: world_o_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(LS(I))>, <&kp RA(LS(O))>;

            

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_u_base_perso: world_u_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(GRAVE)>, <&world_u_ctrl>;

            

            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_u_ctrl: world_u_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(LS(I))>, <&kp RA(LS(U))>;

            

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_y_base: world_y_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(Y)>, <&kp RA(LS(U))>;

            

            mods = <(MOD_LCTL)>;
        };

        world_consonants_base_perso: world_consonants_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(C)>, <&kp RA(LS(C))>;

            

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        

        world_e_acute: world_e_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>, <&kp RA(LS(E))>;

            

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        

        world_e_acute_windows: world_e_acute_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp E>; 
        };

        world_c_cedilla_windows: world_c_cedilla_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(COMMA)>; 
        };

        world_e_grave_windows: world_e_grave_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp E>; 
        };

        world_a_grave_windows: world_a_grave_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>; 
        };

        world_u_grave_windows: world_u_grave_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp U>; 
        };

        world_o_circumflex_windows: world_o_circumflex_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp O>; 
        };

        

        lt_cursor: layer_tap_cursor {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_number: layer_tap_number {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_symbol: layer_tap_symbol {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_system: layer_tap_system {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_world: layer_tap_world {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_function: layer_tap_function {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        

        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;  
            quick-tap-ms = <150>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        space: thumb_layer_access_spacebar {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <150>;  
            quick-tap-ms = <125>;     
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            retro-tap;               
        };

        

        os_toggle: os_toggle {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&tog 7>, <&none>, <&tog 7>;
        };

        

        world_e_acute_adaptive: world_e_acute_adaptive {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>, <&world_e_acute_windows>;

            

            mods = <(MOD_LCTL)>;
        };

        

        hyper_key: hyper_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;
        };
    };

    macros {
        
        
        
        
        
        bt_0_connect: bt_0_connect {
            label = "BT_0_CONNECT_GREEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 0 &rgb_ug RGB_ON>;
        };

        bt_0_disconnect: bt_0_disconnect {
            label = "BT_0_DISCONNECT_RED";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &bt BT_DISC 0 &rgb_ug RGB_ON>;
        };

        
        bt_1_connect: bt_1_connect {
            label = "BT_1_CONNECT_GREEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 1 &rgb_ug RGB_ON>;
        };

        bt_1_disconnect: bt_1_disconnect {
            label = "BT_1_DISCONNECT_RED";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &bt BT_DISC 1 &rgb_ug RGB_ON>;
        };

        
        bt_2_connect: bt_2_connect {
            label = "BT_2_CONNECT_GREEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 2 &rgb_ug RGB_ON>;
        };

        bt_2_disconnect: bt_2_disconnect {
            label = "BT_2_DISCONNECT_RED";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &bt BT_DISC 2 &rgb_ug RGB_ON>;
        };

        
        bt_3_connect: bt_3_connect {
            label = "BT_3_CONNECT_GREEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 3 &rgb_ug RGB_ON>;
        };

        bt_3_disconnect: bt_3_disconnect {
            label = "BT_3_DISCONNECT_RED";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &bt BT_DISC 3 &rgb_ug RGB_ON>;
        };

        
        bt_4_connect: bt_4_connect {
            label = "BT_4_CONNECT_GREEN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &out OUT_BLE &bt BT_SEL 4 &rgb_ug RGB_ON>;
        };

        bt_4_disconnect: bt_4_disconnect {
            label = "BT_4_DISCONNECT_RED";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &bt BT_DISC 4 &rgb_ug RGB_ON>;
        };

        
        bt_clear_all_red: bt_clear_all_red {
            label = "BT_CLEAR_ALL_RED";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &bt BT_CLR_ALL &rgb_ug RGB_ON>;
        };

        
        
        
        bt_0_toggle: bt_0_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&bt_0_connect>, <&bt_0_disconnect>;
        };

        bt_1_toggle: bt_1_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&bt_1_connect>, <&bt_1_disconnect>;
        };

        bt_2_toggle: bt_2_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&bt_2_connect>, <&bt_2_disconnect>;
        };

        bt_3_toggle: bt_3_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&bt_3_connect>, <&bt_3_disconnect>;
        };

        bt_4_toggle: bt_4_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_4_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&bt_4_connect>, <&bt_4_disconnect>;
        };

        
        
        
        

        windows_mode_off: windows_mode_off {
            label = "WINDOWS_MODE_OFF_RGB_OFF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &to 0 &rgb_ug RGB_OFF>;
        };

        
        windows_toggle_with_rgb: windows_toggle_with_rgb {
            label = "WINDOWS_TOGGLE_RGB";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <10>;
            tap-ms = <10>;
            bindings = <&macro_tap &tog 7 &rgb_ug 0x8000ff>;
        };

        
        windows_mode_toggle: windows_mode_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "WINDOWS_MODE_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&windows_toggle_with_rgb>, <&windows_mode_off>;
        };
    };

    combos {
        compatible = "zmk,combos";

        

        combo_sticky_hyper_right {
            timeout-ms = <50>;
            key-positions = <75 81>; 
            bindings = <&sk LG(LA(LC(LSHFT)))>; 
            layers = <0 1 2 3 4 5 6 7>; 
        };
    };

    keymap {
        compatible = "zmk,keymap";

        

        qwerty_layer {
            bindings = <
&none  &none         &none        &none           &none          &none                       &none       &none            &none           &none        &none         &none
&none  &kp N1        &kp N2       &world_e_acute  &kp SQT        &kp N5                      &kp N6      &kp N7           &kp N8          &kp N9       &kp N0        &none
&none  &kp Q         &kp W        &kp E           &kp R          &kp T                       &kp Y       &kp U            &kp I           &kp O        &kp SEMI      &none
&none  &lmt LCTRL A  &lmt LALT S  &lmt LGUI D     &lmt LSHFT F   &kp G                       &kp H       &rmt RSHFT J     &rmt RGUI K     &rmt RALT L  &rmt RCTRL P  &none
&none  &kp Z         &kp X        &kp C           &kp V          &kp B                       &kp N       &kp M            &kp COMMA       &kp DOT      &kp FSLH      &none
&none  &none         &kp UP       &kp DOWN        &none                                                  &none            &kp LBKT        &kp RBKT     &none         &none
                                                  &thumb 6 ESC   &none         &mo 8         &none       &thumb 4 INSERT  &thumb 5 ENTER
                                                  &thumb 1 BSPC  &thumb 2 DEL  &hyper_key    &caps_word  &thumb 2 TAB     &space 3 SPACE
            >;
        };

        

        cursor_layer {
            bindings = <
&trans  &trans         &trans      &trans         &trans         &trans               &trans    &trans     &trans      &trans      &trans     &trans
&trans  &trans         &trans      &trans         &trans         &trans               &trans    &trans     &trans      &trans      &trans     &trans
&trans  &kp LA(LG(E))  &kp LA(R)   &kp LA(V)      &kp LA(A)      &kp LC(X)            &kp BSPC  &kp SPACE  &kp K_UNDO  &kp K_REDO  &sk LSHFT  &trans
&trans  &kp LCTRL      &kp LALT    &kp LGUI       &kp LSHFT      &kp LC(C)            &kp LEFT  &kp DOWN   &kp UP      &kp RIGHT   &trans     &trans
&trans  &kp LC(A)      &kp LA(T)   &kp LA(LG(J))  &kp LA(LG(L))  &kp LC(V)            &trans    &kp F11    &kp PG_UP   &kp PG_DN   &kp END    &trans
&trans  &trans         &kp K_REDO  &kp K_UNDO     &trans                                        &trans     &kp LC(F)   &kp LS(F3)  &trans     &trans
                                                  &kp LG(DOT)    &trans     &trans    &trans    &trans     &kp ENTER
                                                  &trans         &trans     &trans    &trans    &kp TAB    &kp SPACE
            >;
        };

        

        number_layer {
            bindings = <
&trans  &trans  &trans    &trans       &trans       &trans                          &trans     &trans                 &trans     &trans    &trans     &trans
&trans  &trans  &trans    &trans       &trans       &trans                          &kp TILDE  &kp CARET              &kp HASH   &kp DLLR  &kp EXCL   &trans
&trans  &trans  &trans    &kp LC(TAB)  &kp LA(TAB)  &trans                          &kp PRCNT  &kp N7                 &kp N8     &kp N9    &kp COLON  &trans
&trans  &trans  &kp BSPC  &kp SPACE    &kp DOT      &trans                          &kp PLUS   &kp N4                 &kp N5     &kp N6    &kp MINUS  &trans
&trans  &trans  &trans    &trans       &kp COMMA    &kp LS(LG(NUMBER_4))            &kp STAR   &kp N1                 &kp N2     &kp N3    &kp FSLH   &trans
&trans  &trans  &trans    &trans       &trans                                                  &trans                 &kp LT     &kp GT    &trans     &trans
                                       &trans       &trans                &trans    &trans     &kp LEFT_PARENTHESIS   &kp EQUAL
                                       &trans       &trans                &trans    &trans     &kp RIGHT_PARENTHESIS  &kp N0
            >;
        };

        

        symbol_layer {
            bindings = <
&trans     &trans     &trans     &trans     &trans     &trans               &trans     &trans     &trans     &trans     &trans     &trans
&trans     &trans     &trans     &trans     &trans     &trans               &trans     &trans     &kp EXCL   &kp EQUAL  &trans     &trans
&trans     &kp SQT    &kp LPAR   &kp LBKT   &kp DQT    &kp QMARK            &kp SQT    &kp DQT    &kp RBKT   &kp RPAR   &kp AMPS   &trans
&kp HASH   &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR             &kp BSPC   &kp SPACE  &kp TAB    &kp SEMI   &kp AT     &trans
&kp GRAVE  &kp LT     &kp PIPE   &kp MINUS  &kp GT     &kp FSLH             &kp GRAVE  &kp DEL    &kp COMMA  &kp DOT    &kp TILDE  &trans
&trans     &trans     &kp LBRC   &kp RBRC   &trans                                     &trans     &trans     &trans     &trans     &trans
                                            &kp BSLH   &trans     &trans    &trans     &trans     &trans
                                            &kp PRCNT  &kp COLON  &trans    &trans     &trans     &trans
            >;
        };

        
        

        system_layer {
            bindings = <
&trans          &trans         &trans         &trans         &trans         &trans                      &trans  &trans           &trans           &trans           &trans           &trans
&trans          &trans         &trans         &trans         &trans         &trans                      &trans  &rgb_ug RGB_ON   &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &trans
&bt BT_CLR_ALL   &trans       &trans         &trans         &trans         &bt BT_CLR             &none   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &trans
&trans          &bt_0_toggle   &bt_1_toggle   &bt_2_toggle   &bt_3_toggle   &none                       &none   &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &trans
&trans          &bt_4_toggle   &trans         &trans         &windows_toggle_with_rgb &trans                      &none   &none            &none            &none            &none            &trans
&trans          &trans         &trans         &trans         &trans                                             &trans           &sys_reset       &bootloader      &trans           &trans
                                                              &kp K_LOCK     &kp C_SLEEP  &kp C_POWER    &trans  &trans           &trans
                                                              &none          &none        &none          &trans  &trans           &trans
            >;
        };

        

        world_layer {
            bindings = <
&trans  &trans               &trans  &trans                        &trans  &trans            &trans         &trans               &trans         &trans         &trans     &trans
&trans  &trans               &trans  &trans                        &trans  &trans            &trans         &trans               &trans         &trans         &trans     &trans
&trans  &trans               &trans  &world_e_base_perso           &trans  &trans            &world_y_base  &world_u_base_perso  &world_i_base  &world_o_base  &trans     &trans
&trans  &world_a_base_perso  &trans  &trans                        &trans  &trans            &trans         &sk LSHFT            &sk LCTRL      &sk RCTRL      &sk RSHFT  &trans
&trans  &trans               &trans  &world_consonants_base_perso  &trans  &trans            &trans         &trans               &sk LALT       &sk RALT       &trans     &trans
&trans  &trans               &trans  &trans                        &trans                                   &trans               &trans         &trans         &trans     &trans
                                                                   &trans  &trans  &trans    &trans         &trans               &trans
                                                                   &trans  &trans  &trans    &trans         &trans               &trans
            >;
        };

        

        function_layer {
            bindings = <
&trans   &trans     &trans     &trans     &trans     &trans             &trans            &trans            &trans           &trans        &trans         &trans
&kp ESC  &kp RET    &kp SPACE  &kp TAB    &kp DEL    &kp INS            &kp C_MEDIA_HOME  &kp C_PLAY        &kp F1           &kp F2        &kp C_STOP     &kp C_EJECT
&trans   &sk LSHFT  &kp LC(Y)  &kp LC(Z)  &kp BSPC   &trans             &kp LG(LA(Y))     &kp LG(LA(U))     &kp LG(LA(I))    &kp F9        &kp F10        &kp F13
&trans   &kp LCTRL  &kp LALT   &kp LGUI   &kp LSHFT  &trans             &kp LS(LG(N4))    &kp LG(KP_MINUS)  &kp LG(KP_PLUS)  &kp F6        &kp F11        &kp F14
&trans   &kp LC(A)  &trans     &trans     &trans     &trans             &kp C_AL_FILES    &trans            &trans           &kp F3        &kp F12        &kp F15
&trans   &trans     &trans     &trans     &trans                                          &kp C_BRI_MAX     &kp C_BRI_UP     &kp C_BRI_DN  &kp C_BRI_MIN  &kp C_BRI_AUTO
                                          &trans     &trans   &trans    &kp C_PP          &kp C_PREV        &kp C_NEXT
                                          &trans     &trans   &trans    &kp C_MUTE        &kp C_VOL_DN      &kp C_VOL_UP
            >;
        };

        

        windows_mode_layer {
            bindings = <
&trans  &trans                  &trans  &trans                    &trans  &trans            &trans  &trans                  &trans     &trans                       &trans     &trans
&trans  &trans                  &trans  &trans                    &trans  &trans            &trans  &trans                  &trans     &trans                       &trans     &trans
&trans  &trans                  &trans  &world_e_grave_windows    &trans  &trans            &trans  &world_u_grave_windows  &trans     &world_o_circumflex_windows  &trans     &trans
&trans  &world_a_grave_windows  &trans  &trans                    &trans  &trans            &trans  &sk LSHFT               &sk LCTRL  &sk RCTRL                    &sk RSHFT  &trans
&trans  &trans                  &trans  &world_c_cedilla_windows  &trans  &trans            &trans  &trans                  &sk LALT   &sk RALT                     &trans     &trans
&trans  &trans                  &trans  &trans                    &trans                            &trans                  &trans     &trans                       &trans     &trans
                                                                  &trans  &trans  &trans    &trans  &trans                  &trans
                                                                  &trans  &trans  &trans    &trans  &trans                  &tog 7
            >;
        };

        
        

        mouse_layer {
            bindings = <
&trans  &trans          &trans          &trans          &trans           &trans                      &trans             &trans                    &trans                  &trans              &trans  &trans
&trans  &trans          &trans          &trans          &trans           &trans                      &trans             &trans                    &trans                  &trans              &trans  &trans
&trans  &trans          &trans          &trans          &trans           &kp K_CUT                   &kp LC(N)          &split_editor_horizontal  &split_editor_vertical  &right_index_mod    &none   &none
&trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP    &msc SCRL_RIGHT  &kp K_COPY                  &focus_left_group  &focus_down_group         &focus_up_group         &focus_right_group  &none   &none
&trans  &trans          &trans          &trans          &trans           &kp K_PASTE                 &none              &kp LG(LS(E))             &kp LG(NUMBER_1)        &kp LC(GRAVE)       &none   &trans
&trans  &trans          &msc SCRL_UP    &msc SCRL_DOWN  &none                                                           &trans                    &msc SCRL_UP            &msc SCRL_DOWN      &trans  &trans
                                                        &mkp MCLK        &kt K_APPLICATION  &none    &none              &none                     &trans
                                                        &mkp LCLK        &mkp RCLK          &none    &none              &trans                    &trans
            >;
        };
    };

    
    
    

    focus_left_group: focus_left_group {
        label = "FOCUS_LEFT_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap &kp LC(E) &kp H>;
    };

    focus_right_group: focus_right_group {
        label = "FOCUS_RIGHT_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap &kp LC(E) &kp L>;
    };

    focus_up_group: focus_up_group {
        label = "FOCUS_UP_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap &kp LC(E) &kp K>;
    };

    focus_down_group: focus_down_group {
        label = "FOCUS_DOWN_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap &kp LC(E) &kp J>;
    };

    

    split_editor_vertical: split_editor_vertical {
        label = "SPLIT_EDITOR_VERTICAL";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap &kp LC(E) &kp V>;
    };

    split_editor_horizontal: split_editor_horizontal {
        label = "SPLIT_EDITOR_HORIZONTAL";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap &kp LC(E) &kp S>;
    };

    

    right_index_mod: right_index_mod {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_INDEX_MOD";
        #binding-cells = <0>;
        bindings = <&sk RCTRL>, <&kp RCTRL>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };

    right_pinky_mod: right_pinky_mod {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_PINKY_MOD";
        #binding-cells = <0>;
        bindings = <&sk RSHFT>, <&kp RSHFT>;
        mods = <(MOD_LALT|MOD_RALT)>;
    };
};



&trackball_peripheral_listener {
    input-processors = 
        
        <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>,
        
        
        <&zip_temp_layer 8 500>;
};
