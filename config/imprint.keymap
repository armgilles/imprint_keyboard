#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    behaviors {
        // Simplified mod-tap behaviors (macOS order: CTRL/ALT/GUI/SHIFT)

        lmt: left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        rmt: right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        // World character behaviors (système complet basé sur Glove80)

        world_a_base_perso: world_a_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(GRAVE)>, <&world_a_alt>;

            // à -> autres variants

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_a_alt: world_a_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(A)>, <&kp RA(LS(A))>;

            // á -> Á

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_e_base_perso: world_e_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(GRAVE)>, <&world_e_alt>;

            // è -> autres variants

            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_e_alt: world_e_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>, <&kp RA(LS(E))>;

            // é -> É

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        &sk LG(LA(LC(LSHFT)))

        world_i_base: world_i_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(I)>, <&world_i_ctrl>;

            // í -> autres variants

            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_i_ctrl: world_i_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(LS(U))>, <&kp RA(LS(I))>;

            // î -> Î

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_o_base: world_o_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(O)>, <&world_o_alt>;

            // ó -> autres variants

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_o_alt: world_o_alt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(LS(I))>, <&kp RA(LS(O))>;

            // ô -> Ô

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_u_base_perso: world_u_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(GRAVE)>, <&world_u_ctrl>;

            // ù -> autres variants

            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        world_u_ctrl: world_u_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(LS(I))>, <&kp RA(LS(U))>;

            // û -> Û

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        world_y_base: world_y_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(Y)>, <&kp RA(LS(U))>;

            // ý -> ÿ

            mods = <(MOD_LCTL)>;
        };

        world_consonants_base_perso: world_consonants_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(C)>, <&kp RA(LS(C))>;

            // ç -> Ç

            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };

        // Behavior pour é/É (comme dans votre config Glove80)

        world_e_acute: world_e_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>, <&kp RA(LS(E))>;

            // é -> É

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        // Behaviors pour caractères Windows US International

        world_e_acute_windows: world_e_acute_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp E>; // Windows US Intl: ' puis e pour é
        };

        world_c_cedilla_windows: world_c_cedilla_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(COMMA)>; // Windows US Intl: AltGr + , pour ç
        };

        world_e_grave_windows: world_e_grave_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp E>; // Windows US Intl: ` puis e pour è
        };

        world_a_grave_windows: world_a_grave_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp A>; // Windows US Intl: ` puis a pour à
        };

        world_u_grave_windows: world_u_grave_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp U>; // Windows US Intl: ` puis u pour ù
        };

        world_o_circumflex_windows: world_o_circumflex_windows {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp O>; // Windows US Intl: ^ puis o pour ô
        };

        // Layer tap behaviors

        lt_cursor: layer_tap_cursor {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_number: layer_tap_number {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_symbol: layer_tap_symbol {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_system: layer_tap_system {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_world: layer_tap_world {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        lt_function: layer_tap_function {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&mo>, <&kp>;
        };

        // Behaviors pour thumb cluster (comme Glove80)

        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <200>;  // Plus lent que space pour éviter les activations accidentelles
            quick-tap-ms = <150>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        space: thumb_layer_access_spacebar {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            tapping-term-ms = <150>;  // Plus rapide que thumb (200ms)
            quick-tap-ms = <125>;     // Répétition plus rapide pour espace
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            retro-tap;               // tap on standalone hold (comme Glove80)
        };

        // Toggle pour switcher entre macOS et Windows

        os_toggle: os_toggle {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&tog 7>, <&none>, <&tog 7>;
        };

        // Behaviors adaptatifs selon l'OS

        world_e_acute_adaptive: world_e_acute_adaptive {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RA(E)>, <&world_e_acute_windows>;

            // macOS par défaut, Windows avec layer 7

            mods = <(MOD_LCTL)>;
        };

        // Macro pour Hyper Key (Shift+Ctrl+Alt+Gui)

        hyper_key: hyper_key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LSHFT &kp LCTRL &kp LALT &kp LGUI>;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        // Combo SPACE + ENTER → Hyper Key (comme Glove80 combo_sticky_hyper_right)

        combo_sticky_hyper_right {
            timeout-ms = <50>;
            key-positions = <75 81>; // ENTER (position 75) + SPACE (position 81)
            bindings = <&sk LG(LA(LC(LSHFT)))>; // Sticky Hyper key (Cmd+Alt+Ctrl+Shift)
            layers = <0 1 2 3 4 5 6 7>; // Actif sur tous les layers comme sur Glove80
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Layer 0: QWERTY (thumb cluster complet 6x6 comme Glove80)

        qwerty_layer {
            bindings = <
&none      &none         &none        &none           &none          &none                       &none       &none            &none           &none        &none         &none
&kp EQUAL  &kp N1        &kp N2       &world_e_acute  &kp SQT        &kp N5                      &kp N6      &kp N7           &kp N8          &kp N9       &kp N0        &kp BSLH
&kp GRAVE  &kp Q         &kp W        &kp E           &kp R          &kp T                       &kp Y       &kp U            &kp I           &kp O        &kp SEMI      &kp MINUS
&none      &lmt LCTRL A  &lmt LALT S  &lmt LGUI D     &lmt LSHFT F   &kp G                       &kp H       &rmt RSHFT J     &rmt RGUI K     &rmt RALT L  &rmt RCTRL P  &kp SQT
&none      &kp Z         &kp X        &kp C           &kp V          &kp B                       &kp N       &kp M            &kp COMMA       &kp DOT      &kp FSLH      &kp RSHFT
&none      &none         &kp UP       &kp DOWN        &none                                                  &none            &kp LBKT        &kp RBKT     &none         &none
                                                      &thumb 6 ESC   &none         &mo 8         &none       &thumb 4 INSERT  &thumb 5 ENTER
                                                      &thumb 1 BSPC  &thumb 2 DEL  &hyper_key    &caps_word  &thumb 2 TAB     &space 3 SPACE
            >;
        };

        // Layer 1: Cursor/Navigation

        cursor_layer {
            bindings = <
&trans  &trans         &trans      &trans         &trans         &trans               &trans    &trans     &trans      &trans      &trans     &trans
&trans  &trans         &trans      &trans         &trans         &trans               &trans    &trans     &trans      &trans      &trans     &trans
&trans  &kp LA(LG(E))  &kp LA(R)   &kp LA(V)      &kp LA(A)      &kp LC(X)            &kp BSPC  &kp SPACE  &kp K_UNDO  &kp K_REDO  &sk LSHFT  &trans
&trans  &kp LCTRL      &kp LALT    &kp LGUI       &kp LSHFT      &kp LC(C)            &kp LEFT  &kp DOWN   &kp UP      &kp RIGHT   &trans     &trans
&trans  &kp LC(A)      &kp LA(T)   &kp LA(LG(J))  &kp LA(LG(L))  &kp LC(V)            &trans    &kp F11    &kp PG_UP   &kp PG_DN   &kp END    &trans
&trans  &trans         &kp K_REDO  &kp K_UNDO     &trans                                        &trans     &kp LC(F)   &kp LS(F3)  &trans     &trans
                                                  &kp LG(DOT)    &trans     &trans    &trans    &trans     &kp ENTER
                                                  &trans         &trans     &trans    &trans    &kp TAB    &kp SPACE
            >;
        };

        // Layer 2: Number

        number_layer {
            bindings = <
&trans   &trans     &trans     &trans       &trans       &trans             &trans     &trans     &trans     &trans    &trans     &trans
&kp ESC  &kp RET    &kp SPACE  &kp TAB      &kp DEL      &kp INS            &kp TILDE  &kp CARET  &kp HASH   &kp DLLR  &kp EXCL   &kp AT
&kp A    &sk LSHFT  &kp LC(Y)  &kp LC(TAB)  &kp LA(TAB)  &kp D              &kp PRCNT  &kp N7     &kp N8     &kp N9    &kp COLON  &trans
&kp B    &kp LCTRL  &kp BSPC   &kp SPACE    &kp DOT      &kp E              &kp PLUS   &kp N4     &kp N5     &kp N6    &kp MINUS  &trans
&kp C    &kp LC(A)  &trans     &trans       &trans       &kp F              &kp STAR   &kp N1     &kp N2     &kp N3    &kp FSLH   &trans
&trans   &trans     &trans     &trans       &trans                                     &kp LBKT   &kp LT     &kp GT    &kp RBKT   &kp PIPE
                                            &trans       &trans   &trans    &kp EQUAL  &kp N0     &kp COMMA
                                            &trans       &trans   &trans    &trans     &trans     &trans
            >;
        };

        // Layer 3: Symbol

        symbol_layer {
            bindings = <
&trans     &trans     &trans     &trans     &trans     &trans                 &trans     &trans     &trans     &trans     &trans     &trans
&trans     &trans     &trans     &trans     &trans     &trans                 &trans     &trans     &kp EXCL   &kp EQUAL  &trans     &trans
&trans     &kp SQT    &kp LPAR   &kp LBKT   &kp DQT    &kp QMARK              &kp SQT    &kp DQT    &kp RBKT   &kp RPAR   &kp AMPS   &trans
&kp HASH   &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR               &kp BSPC   &kp SPACE  &kp TAB    &kp SEMI   &kp AT     &trans
&kp GRAVE  &kp LT     &kp PIPE   &kp MINUS  &kp GT     &kp FSLH               &kp GRAVE  &kp DEL    &kp COMMA  &kp DOT    &kp TILDE  &trans
&trans     &trans     &kp LBRC   &kp RBRC   &kp PLUS                                     &trans     &trans     &trans     &trans     &trans
                                            &kp BSLH   &kp DOT    &kp STAR    &trans     &trans     &trans
                                            &kp PRCNT  &kp COLON  &kp AT      &trans     &trans     &trans
            >;
        };

        // Layer 4: System + RGB Controls

        system_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans                   &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans           &trans           &trans
&trans  &trans        &trans        &trans        &trans        &trans                   &trans           &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &trans
&trans  &trans        &trans        &trans        &kp trans     &bt BT_CLR               &kp PAUSE_BREAK  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &trans
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &kp PSCRN                &kp PSCRN        &trans           &sys_reset       &bootloader      &trans           &trans
&trans  &bt BT_SEL 4  &trans        &trans        &tog 7        &kp K_APP                &kp K_APP        &kp SLCK         &kp KP_NUM       &kp CAPS         &tog 7           &trans
&trans  &trans        &trans        &trans        &trans                                                  &trans           &trans           &trans           &trans           &trans
                                                  &kp C_PWR     &kp C_SLEEP  &kp CAPS    &trans           &trans           &trans
                                                  &kp SLCK      &kp KP_NUM   &kp CAPS    &trans           &trans           &trans
            >;
        };

        // Layer 5: World

        world_layer {
            bindings = <
&trans  &trans               &trans  &trans                        &trans  &trans            &trans         &trans               &trans         &trans         &trans     &trans
&trans  &trans               &trans  &trans                        &trans  &trans            &trans         &trans               &trans         &trans         &trans     &trans
&trans  &trans               &trans  &world_e_base_perso           &trans  &trans            &world_y_base  &world_u_base_perso  &world_i_base  &world_o_base  &trans     &trans
&trans  &world_a_base_perso  &trans  &trans                        &trans  &trans            &trans         &sk LSHFT            &sk LCTRL      &sk RCTRL      &sk RSHFT  &trans
&trans  &trans               &trans  &world_consonants_base_perso  &trans  &trans            &trans         &trans               &sk LALT       &sk RALT       &trans     &trans
&trans  &trans               &trans  &trans                        &trans                                   &trans               &trans         &trans         &trans     &trans
                                                                   &trans  &trans  &trans    &trans         &trans               &trans
                                                                   &trans  &trans  &trans    &trans         &trans               &trans
            >;
        };

        // Layer 6: Function (basé sur layer_Function du Glove80)

        function_layer {
            bindings = <
&trans   &trans     &trans     &trans     &trans     &trans             &trans            &trans            &trans           &trans        &trans         &trans
&kp ESC  &kp RET    &kp SPACE  &kp TAB    &kp DEL    &kp INS            &kp C_MEDIA_HOME  &kp C_PLAY        &kp F1           &kp F2        &kp C_STOP     &kp C_EJECT
&trans   &sk LSHFT  &kp LC(Y)  &kp LC(Z)  &kp BSPC   &trans             &kp LG(LA(Y))     &kp LG(LA(U))     &kp LG(LA(I))    &kp F9        &kp F10        &kp F13
&trans   &kp LCTRL  &kp LALT   &kp LGUI   &kp LSHFT  &trans             &kp LS(LG(N4))    &kp LG(KP_MINUS)  &kp LG(KP_PLUS)  &kp F6        &kp F11        &kp F14
&trans   &kp LC(A)  &trans     &trans     &trans     &trans             &kp C_AL_FILES    &trans            &trans           &kp F3        &kp F12        &kp F15
&trans   &trans     &trans     &trans     &trans                                          &kp C_BRI_MAX     &kp C_BRI_UP     &kp C_BRI_DN  &kp C_BRI_MIN  &kp C_BRI_AUTO
                                          &trans     &trans   &trans    &kp C_PP          &kp C_PREV        &kp C_NEXT
                                          &trans     &trans   &trans    &kp C_MUTE        &kp C_VOL_DN      &kp C_VOL_UP
            >;
        };

        // Layer 7: Windows Mode (quand activé, utilise les séquences Windows)

        windows_mode_layer {
            bindings = <
&trans  &trans                  &trans  &trans                    &trans  &trans            &trans  &trans                  &trans     &trans                       &trans     &trans
&trans  &trans                  &trans  &trans                    &trans  &trans            &trans  &trans                  &trans     &trans                       &trans     &trans
&trans  &trans                  &trans  &world_e_grave_windows    &trans  &trans            &trans  &world_u_grave_windows  &trans     &world_o_circumflex_windows  &trans     &trans
&trans  &world_a_grave_windows  &trans  &trans                    &trans  &trans            &trans  &sk LSHFT               &sk LCTRL  &sk RCTRL                    &sk RSHFT  &trans
&trans  &trans                  &trans  &world_c_cedilla_windows  &trans  &trans            &trans  &trans                  &sk LALT   &sk RALT                     &trans     &trans
&trans  &trans                  &trans  &trans                    &trans                            &trans                  &trans     &trans                       &trans     &trans
                                                                  &trans  &trans  &trans    &trans  &trans                  &trans
                                                                  &trans  &trans  &trans    &trans  &trans                  &tog 7
            >;
        };

        // Layer 8: Mouse + Navigation (inspiré du layer Mouse du Glove80)
        // Fusionne fonctionnalités souris, wheel, navigation d'éditeur/panel

        mouse_layer {
            bindings = <
&trans  &trans          &trans          &trans          &trans           &trans                      &trans             &trans                    &trans                  &trans              &trans  &trans
&trans  &trans          &trans          &trans          &trans           &trans                      &trans             &trans                    &trans                  &trans              &trans  &trans
&trans  &trans          &trans          &trans          &trans           &kp K_CUT                   &kp LC(N)          &split_editor_horizontal  &split_editor_vertical  &right_index_mod    &none   &none
&trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP    &msc SCRL_RIGHT  &kp K_COPY                  &focus_left_group  &focus_down_group         &focus_up_group         &focus_right_group  &none   &none
&trans  &trans          &trans          &trans          &trans           &kp K_PASTE                 &none              &kp LG(LS(E))             &kp LG(NUMBER_1)        &kp LC(GRAVE)       &none   &trans
&trans  &trans          &msc SCRL_UP    &msc SCRL_DOWN  &none                                                           &trans                    &msc SCRL_UP            &msc SCRL_DOWN      &trans  &trans
                                                        &mkp MCLK        &kt K_APPLICATION  &none    &none              &none                     &trans
                                                        &mkp LCLK        &mkp RCLK          &none    &none              &trans                    &trans
            >;
        };
    };

    // === MACROS DE NAVIGATION POUR LAYER MOUSE ===
    // Inspirées du layer Mouse du Glove80 pour la navigation d'éditeur/panel
    // Navigation entre groupes/panels (style Vim en VS Code)

    focus_left_group: focus_left_group {
        label = "FOCUS_LEFT_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp H>;
    };

    focus_right_group: focus_right_group {
        label = "FOCUS_RIGHT_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp L>;
    };

    focus_up_group: focus_up_group {
        label = "FOCUS_UP_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp K>;
    };

    focus_down_group: focus_down_group {
        label = "FOCUS_DOWN_GROUP";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp J>;
    };

    // Division de l'éditeur (split windows)

    split_editor_vertical: split_editor_vertical {
        label = "SPLIT_EDITOR_VERTICAL";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp V>;
    };

    split_editor_horizontal: split_editor_horizontal {
        label = "SPLIT_EDITOR_HORIZONTAL";
        compatible = "zmk,behavior-macro";
        #binding-cells = <0>;
        wait-ms = <5>;
        tap-ms = <5>;
        bindings = <&macro_tap>, <&kp LC(E) &kp S>;
    };

    // Behaviors pour modificateurs dans layer mouse (sticky keys)

    right_index_mod: right_index_mod {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_INDEX_MOD";
        #binding-cells = <0>;
        bindings = <&sk RCTRL>, <&kp RCTRL>;

        mods = <(MOD_LALT|MOD_RALT)>;
    };

    right_pinky_mod: right_pinky_mod {
        compatible = "zmk,behavior-mod-morph";
        label = "RIGHT_PINKY_MOD";
        #binding-cells = <0>;
        bindings = <&sk RSHFT>, <&kp RSHFT>;

        mods = <(MOD_LALT|MOD_RALT)>;
    };
};

// Configuration trackball main droite

&trackball_peripheral_listener {
    input-processors =
        // Orientation par défaut (axes échangés),,
        <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>;

    // Activer automatiquement le layer mouse (Layer 8) quand le trackball bouge
    // Se désactive après 500ms d'inactivité

    <&zip_temp_layer 8

    500 = >;
};
