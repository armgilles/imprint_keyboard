#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>


/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    // behaviors
    behaviors {
        #define LAYER_QWERTY 0
        #define LAYER_Typing 1
        #define LAYER_LeftPinky 2
        #define LAYER_LeftRingy 3
        #define LAYER_LeftMiddy 4
        #define LAYER_LeftIndex 5
        #define LAYER_RightPinky 6
        #define LAYER_RightRingy 7
        #define LAYER_RightMiddy 8
        #define LAYER_RightIndex 9
        #define LAYER_Cursor 10
        #define LAYER_Number 11
        #define LAYER_Function 12
        #define LAYER_Emoji 13
        #define LAYER_Symbol 14
        #define LAYER_Mouse 15
        #define LAYER_MouseSlow 16
        #define LAYER_MouseFast 17
        #define LAYER_MouseWarp 18
        #define LAYER_System 19
        #define LAYER_World 20
        #define LAYER_Gaming 21
        #define LAYER_Factory 22
        #define LAYER_Lower 23
        #define LAYER_Magic 24

        /* Custom Defined Behaviors */
            
        // NOTE: Use the many #define settings below to customize this keymap!
        #define MOUSE_SCALER_FAST 3 1
        #define MOUSE_SCALER_WARP 12 1
        #define MOUSE_SCALER_SLOW 1 9
        #define ENABLE_MOUSE_KEYS  // requires v24.12-beta or newer firmware
        #define NATURAL_SCROLLING  // supports "natural scrolling" in macOS
        #define OPERATING_SYSTEM 'M' // choose 'L'inux, 'M'acOS, or 'W'indows
        #define DIFFICULTY_LEVEL  0  // 0:custom, 1:easy -> 5:hard (see below)
        #define ENFORCE_BILATERAL    // cancels single-handed home row mod+tap
        //#define SPACE_FORGIVENESS    // allow lingering taps on the space bar
        //#define THUMB_FORGIVENESS  // allow lingering taps on the thumb keys
        //#define SHIFT_FORGIVENESS  // requires v24.08-beta or newer firmware
        #define WORLD_USE_COMPOSE    // use native Compose in place of Unicode
        //#define WORLD_HOST_AZERTY  // host computer is set to AZERTY locale
        //#define WORLD_SHIFT_NUMBER // apply Shift to type number row digits
        // TIP: Add more setting overrides here instead of editing them below.

        //////////////////////////////////////////////////////////////////////////////
        //
        // Sunaku's Keymap v41 -- "Glorious Engrammer"
        // - https://github.com/sunaku/glove80-keymaps
        //
        //////////////////////////////////////////////////////////////////////////////

        //
        // OPERATING_SYSTEM defines which operating system you intend to use
        // with this keymap, because shortcuts vary across operating systems.
        //
        // - https://zmk.dev/docs/codes
        // - https://en.wikipedia.org/wiki/Table_of_keyboard_shortcuts
        //
        // This setting also affects the UNICODE() function defined below, as
        // each OS has different shortcuts for typing Unicode hex characters.
        //
        // NOTE: You may need to enable Unicode hexadecimal input in your OS:
        // - (macOS) https://uknowit.uwgb.edu/page.php?id=22623
        //     and   https://github.com/ldanet/unicode-hex-input-fix
        // - (Linux) https://help.ubuntu.com/stable/ubuntu-help/tips-specialchars.html.en#ctrlshiftu
        // - (Windows) https://github.com/samhocevar/wincompose
        //
        // Specifically, Windows users should be running the WinCompose tool,
        // which lets you type Unicode characters via hexadecimal codepoints.
        //
        #ifndef OPERATING_SYSTEM
        #define OPERATING_SYSTEM 'L' // linux
        //#define OPERATING_SYSTEM 'M' // macos
        //#define OPERATING_SYSTEM 'W' // windows
        #endif
        #if OPERATING_SYSTEM == 'M'
        #define _C      LG
        #define _A_TAB  LGUI
        #define _G_TAB  LALT
        #define _REDO   _C(LS(Z))
        #define _POWER  K_POWER
        #define _W      LA
        #define _HOME   _C(LEFT)
        #define _END    _C(RIGHT)
        #define _EMOJI  LG(LC(SPACE))
        #else
        #define _C      LC
        #define _A_TAB  LALT
        #define _G_TAB  LGUI
        #define _REDO   _C(Y)
        #define _POWER  C_POWER
        #define _W      _C
        #define _HOME   HOME
        #define _END    END
        #define _EMOJI  LG(DOT)
        #endif
        #define _SLEEP      C_SLEEP
        #if OPERATING_SYSTEM == 'W'
        #define _LOCK   LG(L)
        #elif OPERATING_SYSTEM == 'M'
        #define _LOCK   _C(LC(Q))
        #elif OPERATING_SYSTEM == 'L'
        #define _LOCK   K_LOCK
        #endif
        #define _UNDO       _C(Z)
        #define _CUT        _C(X)
        #define _COPY       _C(C)
        #define _PASTE      _C(V)
        #define _FIND       _C(F)
        #define _FIND_NEXT  _C(G)
        #define _FIND_PREV  _C(LS(G))

        //
        // USE_NUMPAD_KEYCODES puts `KP_*` keycodes into the Number layer.
        //
        #ifdef USE_NUMPAD_KEYCODES
        #define _KP_N0 KP_N0
        #define _KP_N1 KP_N1
        #define _KP_N2 KP_N2
        #define _KP_N3 KP_N3
        #define _KP_N4 KP_N4
        #define _KP_N5 KP_N5
        #define _KP_N6 KP_N6
        #define _KP_N7 KP_N7
        #define _KP_N8 KP_N8
        #define _KP_N9 KP_N9
        #define _KP_PLUS KP_PLUS
        #define _KP_MINUS KP_MINUS
        #define _KP_ASTERISK KP_ASTERISK
        #define _KP_SLASH KP_SLASH
        #define _KP_COMMA KP_COMMA
        #define _KP_DOT KP_DOT
        #define _KP_EQUAL KP_EQUAL
        #define _KP_ENTER KP_ENTER
        #else
        #define _KP_N0 N0
        #define _KP_N1 N1
        #define _KP_N2 N2
        #define _KP_N3 N3
        #define _KP_N4 N4
        #define _KP_N5 N5
        #define _KP_N6 N6
        #define _KP_N7 N7
        #define _KP_N8 N8
        #define _KP_N9 N9
        #define _KP_PLUS PLUS
        #define _KP_MINUS MINUS
        #define _KP_ASTERISK ASTERISK
        #define _KP_SLASH SLASH
        #define _KP_COMMA COMMA
        #define _KP_DOT DOT
        #define _KP_EQUAL EQUAL
        #define _KP_ENTER ENTER
        #endif

        //////////////////////////////////////////////////////////////////////////
        //
        // Miryoku layers and home row mods (ported from my QMK endgame)
        // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
        // - https://github.com/urob/zmk-config#timeless-homerow-mods
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // DIFFICULTY_LEVEL specifies your level of expertise with this keymap.
        // It's meant to help newcomers gradually work their way up to mastery.
        //
        // #define DIFFICULTY_LEVEL 1 // novice (500ms)
        // #define DIFFICULTY_LEVEL 2 // slower (400ms)
        // #define DIFFICULTY_LEVEL 3 // normal (300ms)
        // #define DIFFICULTY_LEVEL 4 // faster (200ms)
        // #define DIFFICULTY_LEVEL 5 // expert (100ms)
        //
        // You can disable this setting by omitting it or assigning a `0` zero,
        // in which case it will default to my personal set of time thresholds.
        //
        // #define DIFFICULTY_LEVEL 0 // sunaku (150ms)
        //
        // No matter what difficulty level you choose, you can always override
        // any settings in this keymap at the beginning of this configuration.
        //
        #ifdef DIFFICULTY_LEVEL
            #if DIFFICULTY_LEVEL > 0 && DIFFICULTY_LEVEL < 6
            #ifndef TAPPING_RESOLUTION
                #define TAPPING_RESOLUTION ((6 - DIFFICULTY_LEVEL) * 100)
            #endif
            #endif
        #endif

        //
        // TAPPING_RESOLUTION specifies the maximum speed at which the keyboard
        // confuses your taps as being holds when you type on home row mod keys.
        // When you lower this value, the same confusion should still occur; but
        // when you raise this value, you should be able to type normally again.
        //
        #ifndef TAPPING_RESOLUTION
        #define TAPPING_RESOLUTION 140
        #endif

    };

    combos {
        compatible = "zmk,combos";

        //
        // COMBO_FIRING_DECAY defines how much time you have left (milliseconds)
        // after pressing the first key in a ZMK combo to finish the whole chord.
        //
        #ifndef COMBO_FIRING_DECAY
        #define COMBO_FIRING_DECAY 50
        #endif
        
        #ifdef _A_TAB
        combo_alt_tab_switcher {
            timeout-ms = <COMBO_FIRING_DECAY>;
            key-positions = <76 70>; // BACKSPACE (position 76) + ESC (position 70)
            bindings = <&mod_tab_chord _A_TAB LAYER_Cursor>;
            layers = <0 1 2 3 4 5 6 7>;
        };
        #endif

        combo_sticky_hyper_right {
            timeout-ms = <COMBO_FIRING_DECAY>;
            key-positions = <75 81>; // ENTER (position 75) + SPACE (position 81)
            bindings = <&sk LG(LA(LC(LSHFT)))>;
            layers = <0 1 2 3 4 5 6 7>;
        };

    };

    macros {

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };

        //
        // Linux Magic System Request Key - hold this down and type REISUB
        // - https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
        // - https://github.com/manna-harbour/miryoku/discussions/259
        //
        ZMK_MACRO(linux_magic_sysrq,
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
            = <&macro_press &mo 0 &kp RALT>
            , <&macro_tap &kp PRINTSCREEN>
            , <&macro_pause_for_release>
            , <&macro_release &mo 0 &kp RALT>
            ;
        )

        //
        // Mod+Tab application switcher - hold this down to keep menu open
        //
        mod_tab: mod_tab_switcher {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            , <&macro_tap &kp TAB>
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            ;
        };
        mod_tab_chord: mod_tab_switcher_chord {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
            = <&macro_param_2to1>
            , <&macro_press &mo MACRO_PLACEHOLDER>
            , <&macro_param_1to1>
            , <&macro_press &mod_tab MACRO_PLACEHOLDER>
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &mod_tab MACRO_PLACEHOLDER>
            , <&macro_param_2to1>
            , <&macro_release &mo MACRO_PLACEHOLDER>
            ;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // Approximation of Pascal Getreuer's Select Word macro from QMK
        // - https://getreuer.info/posts/keyboards/select-word/index.html
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
        // after moving the cursor before it selects a word.  A larger delay
        // may allow the macro to move to the next word upon each invocation.
        //
        #ifndef SELECT_WORD_DELAY
        #define SELECT_WORD_DELAY 1
        #endif

        #define select_all kp _C(A)

        ZMK_MACRO(select_none,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        )

        //
        // select a word (jumps to next word upon each successive invocation)
        //
        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
        )
        ZMK_MACRO(select_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
        )

        //
        // extend current selection by one word
        //
        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LS(RIGHT))>;
        )
        ZMK_MACRO(extend_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LS(LEFT))>;
        )

        //
        // select current line
        //
        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _HOME &kp LS(_END)>;
        )
        ZMK_MACRO(select_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _END &kp LS(_HOME)>;
        )

        //
        // extend current selection by one line
        //
        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(DOWN) &kp LS(_END)>;
        )
        ZMK_MACRO(extend_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(UP) &kp LS(_HOME)>;
        )

        //////////////////////////////////////////////////////////////////////////
        //
        // World layer - international characters
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // WORLD_USE_COMPOSE uses OS-native Compose keycodes instead of Unicode
        // for characters in the "compositions" section of the `world.yaml` file.
        //
        //#define WORLD_USE_COMPOSE

        //
        // WORLD_HOST_AZERTY indicates that your computer is set to AZERTY locale.
        //
        //#define WORLD_HOST_AZERTY
        #ifdef WORLD_HOST_AZERTY
            #define WORLD_SHIFT_NUMBER
            #define _NA Q
        #endif

        //
        // WORLD_SHIFT_NUMBER indicates that Shift must be applied when typing out
        // digits from the number row, which is needed for locales such as AZERTY.
        //
        //#define WORLD_SHIFT_NUMBER
        #ifdef WORLD_SHIFT_NUMBER
            #define _N0 LS(N0)
            #define _N1 LS(N1)
            #define _N2 LS(N2)
            #define _N3 LS(N3)
            #define _N4 LS(N4)
            #define _N5 LS(N5)
            #define _N6 LS(N6)
            #define _N7 LS(N7)
            #define _N8 LS(N8)
            #define _N9 LS(N9)
        #endif

        //
        // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
        // between keystrokes while inputting the Unicode codepoint shortcut.
        //
        #ifndef UNICODE_TAP_DELAY
        #define UNICODE_TAP_DELAY 1
        #endif

        //
        // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
        // between emitting Unicode codepoints in multi-codepoint characters.
        //
        #ifndef UNICODE_SEQ_DELAY
        #define UNICODE_SEQ_DELAY 10
        #endif

        #define UNICODE(name, ...) \
            ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
            )

        //
        // UNICODE_SEQ_LINUX() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under Linux.
        //
        #ifndef UNICODE_SEQ_LINUX
        #define UNICODE_SEQ_LINUX(keystrokes) \
            <&macro_tap &kp LC(LS(U)) keystrokes &kp ENTER>
        #endif

        //
        // UNICODE_SEQ_MACOS() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under macOS.
        //
        #ifndef UNICODE_SEQ_MACOS
        #define UNICODE_SEQ_MACOS(keystrokes) \
            <&macro_press &kp LALT> ,\
            <&macro_tap keystrokes> ,\
            <&macro_release &kp LALT>
        #endif

        //
        // UNICODE_SEQ_WINDOWS() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under Windows.
        //
        // If you've configured WinCompose to use a different trigger hotkey,
        // such as F13 instead of the default RA(U) shortcut, simply override
        // this definition to adapt all UNICODE() function calls accordingly.
        //
        #ifndef UNICODE_SEQ_WINDOWS
        #define UNICODE_SEQ_WINDOWS(keystrokes) \
            <&macro_tap &kp RALT &kp U keystrokes &kp ENTER>
        #endif

        //
        // COMPOSE_KEY_LINUX specifies the keycode for Compose key in Linux,
        // which may be RALT by default but can be reconfigured as follows:
        //
        // $ setxkbmap -option compose:sclk # use ScrollLock as Compose key
        //
        // See xkeyboard-config(7) for possible choices for the Compose key:
        // https://manpages.debian.org/stable/xkb-data/xkeyboard-config.7.en.html#Position_of_Compose_key
        //
        // #define COMPOSE_KEY_LINUX RALT            // compose:ralt
        // #define COMPOSE_KEY_LINUX LGUI            // compose:lwin
        // #define COMPOSE_KEY_LINUX RA(LGUI)        // compose:lwin-altgr
        // #define COMPOSE_KEY_LINUX RGUI            // compose:rwin
        // #define COMPOSE_KEY_LINUX RA(RGUI)        // compose:rwin-altgr
        // #define COMPOSE_KEY_LINUX K_MENU          // compose:menu
        // #define COMPOSE_KEY_LINUX RA(K_MENU)      // compose:menu-altgr
        // #define COMPOSE_KEY_LINUX LCTL            // compose:lctrl
        // #define COMPOSE_KEY_LINUX RA(LCTL)        // compose:lctrl-altgr
        // #define COMPOSE_KEY_LINUX RCTL            // compose:rctrl
        // #define COMPOSE_KEY_LINUX RA(RCTL)        // compose:rctrl-altgr
        // #define COMPOSE_KEY_LINUX CAPS            // compose:caps
        // #define COMPOSE_KEY_LINUX RA(CAPS)        // compose:caps-altgr
        // #define COMPOSE_KEY_LINUX NON_US_BSLH     // compose:102
        // #define COMPOSE_KEY_LINUX RA(NON_US_BSLH) // compose:102-altgr
        // #define COMPOSE_KEY_LINUX PAUSE_BREAK     // compose:paus
        // #define COMPOSE_KEY_LINUX PSCRN           // compose:prsc
        // #define COMPOSE_KEY_LINUX SLCK            // compose:sclk
        //
        #ifndef COMPOSE_KEY_LINUX
        #define COMPOSE_KEY_LINUX RALT
        #endif

        //
        // COMPOSE_SEQ_LINUX() prefixes keystrokes with the Linux Compose key.
        //
        #ifndef COMPOSE_SEQ_LINUX
        #define COMPOSE_SEQ_LINUX(keystrokes) \
            <&macro_tap &kp COMPOSE_KEY_LINUX keystrokes>
        #endif

        //
        // COMPOSE_SEQ_MACOS() formats keystrokes for macOS character entry.
        //
        #ifndef COMPOSE_SEQ_MACOS
        #define COMPOSE_SEQ_MACOS(keystrokes) \
            <&macro_tap keystrokes>
        #endif

        //
        // COMPOSE_SEQ_WINDOWS() wraps keystrokes in Windows AltCode sequence.
        //
        #ifndef COMPOSE_SEQ_WINDOWS
        #define COMPOSE_SEQ_WINDOWS(keystrokes) \
            <&macro_press &kp LALT>, \
            <&macro_tap keystrokes>, \
            <&macro_release &kp LALT>
        #endif
        #if OPERATING_SYSTEM == 'L'
            #define UNICODE_MORPH_MODS (MOD_LCTL|MOD_LSFT)
        #elif OPERATING_SYSTEM == 'M'
            #define UNICODE_MORPH_MODS MOD_LALT
        #elif OPERATING_SYSTEM == 'W'
            #define UNICODE_MORPH_MODS MOD_RALT
        #endif
        #if OPERATING_SYSTEM == 'L'
            // $ grep "compose:" /usr/share/X11/xkb/rules/base.lst
            // compose:ralt         Right Alt
            #if COMPOSE_KEY_LINUX == RALT
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:lwin         Left Win
            #elif COMPOSE_KEY_LINUX == LGUI
            #define COMPOSE_MORPH_MODS MOD_LGUI
            // compose:lwin-altgr   3rd level of Left Win
            #elif COMPOSE_KEY_LINUX == RA(LGUI)
            #define COMPOSE_MORPH_MODS (MOD_LGUI|MOD_RALT)
            // compose:rwin         Right Win
            #elif COMPOSE_KEY_LINUX == RGUI
            #define COMPOSE_MORPH_MODS MOD_RGUI
            // compose:rwin-altgr   3rd level of Right Win
            #elif COMPOSE_KEY_LINUX == RA(RGUI)
            #define COMPOSE_MORPH_MODS (MOD_RGUI|MOD_RALT)
            // compose:menu         Menu
            // compose:menu-altgr   3rd level of Menu
            #elif COMPOSE_KEY_LINUX == RA(K_MENU)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:lctrl        Left Ctrl
            #elif COMPOSE_KEY_LINUX == LCTL
            #define COMPOSE_MORPH_MODS MOD_LCTL
            // compose:lctrl-altgr  3rd level of Left Ctrl
            #elif COMPOSE_KEY_LINUX == RA(LCTL)
            #define COMPOSE_MORPH_MODS (MOD_LCTL|MOD_RALT)
            // compose:rctrl        Right Ctrl
            #elif COMPOSE_KEY_LINUX == RCTL
            #define COMPOSE_MORPH_MODS MOD_RCTL
            // compose:rctrl-altgr  3rd level of Right Ctrl
            #elif COMPOSE_KEY_LINUX == RA(RCTL)
            #define COMPOSE_MORPH_MODS (MOD_RCTL|MOD_RALT)
            // compose:caps         Caps Lock
            // compose:caps-altgr   3rd level of Caps Lock
            #elif COMPOSE_KEY_LINUX == RA(CAPS)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:102          The "&lt; &gt;" key
            // compose:102-altgr    3rd level of the "&lt; &gt;" key
            #elif COMPOSE_KEY_LINUX == RA(NON_US_BSLH)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:paus         Pause
            // compose:prsc         PrtSc
            // compose:sclk         Scroll Lock
            #else
            #define COMPOSE_MORPH_MODS 0
            #endif
        #elif OPERATING_SYSTEM == 'M'
            #define COMPOSE_MORPH_MODS 0
        #elif OPERATING_SYSTEM == 'W'
            #define COMPOSE_MORPH_MODS MOD_LALT
        #endif
        #ifndef _N0
        #define _N0 N0
        #endif
        #ifndef _N1
        #define _N1 N1
        #endif
        #ifndef _N2
        #define _N2 N2
        #endif
        #ifndef _N3
        #define _N3 N3
        #endif
        #ifndef _N4
        #define _N4 N4
        #endif
        #ifndef _N5
        #define _N5 N5
        #endif
        #ifndef _N6
        #define _N6 N6
        #endif
        #ifndef _N7
        #define _N7 N7
        #endif
        #ifndef _N8
        #define _N8 N8
        #endif
        #ifndef _N9
        #define _N9 N9
        #endif
        #ifndef _NA
        #define _NA A
        #endif
        #ifndef _NB
        #define _NB B
        #endif
        #ifndef _NC
        #define _NC C
        #endif
        #ifndef _ND
        #define _ND D
        #endif
        #ifndef _NE
        #define _NE E
        #endif
        #ifndef _NF
        #define _NF F
        #endif

        //
        // NOTE: edit the world.yaml file and run `rake` to generate this:
        //

        //
        // codepoints
        //
        UNICODE(world_degree_sign_macro, /* ° */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_LINUX(&kp O &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_MACOS(&kp LA(LS(N8)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N0)
            #endif
            #endif
        )
        world_degree_sign: world_degree_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_degree_sign_macro>, <&world_degree_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_degree_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_section_sign_macro, /* § */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_LINUX(&kp S &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_MACOS(&kp LA(N6))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N7)
            #endif
            #endif
        )
        world_section_sign: world_section_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_section_sign_macro>, <&world_section_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_section_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_paragraph_sign_macro, /* ¶ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_LINUX(&kp P &kp EXCL)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_MACOS(&kp LA(N7))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N6)
            #endif
            #endif
        )
        world_paragraph_sign: world_paragraph_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_paragraph_sign_macro>, <&world_paragraph_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_paragraph_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_ordinal_macro, /* º */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_MACOS(&kp LA(N0))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NA)
            #endif
            #endif
        )
        world_o_ordinal: world_o_ordinal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_ordinal_macro>, <&world_o_ordinal_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_ordinal
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_ordinal_macro, /* ª */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_MACOS(&kp LA(N9))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NA)
            #endif
            #endif
        )
        world_a_ordinal: world_a_ordinal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ordinal_macro>, <&world_a_ordinal_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ordinal
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_exclaim_left_macro, /* ¡ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_LINUX(&kp EXCL &kp EXCL)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_MACOS(&kp LA(N1))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N1)
            #endif
            #endif
        )
        world_exclaim_left: world_exclaim_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_exclaim_left_macro>, <&world_exclaim_left_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_exclaim_left
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_question_left_macro, /* ¿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_LINUX(&kp QMARK &kp QMARK)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_MACOS(&kp LA(LS(FSLH)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NF)
            #endif
            #endif
        )
        world_question_left: world_question_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_question_left_macro>, <&world_question_left_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_question_left
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_crypto_macro, /* ₿ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NB &kp _NF)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NB &kp _NF)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NB &kp _NF)
            #endif
        )
        world_currency_crypto: world_currency_crypto {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_crypto_macro>, <&world_currency_crypto_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_crypto
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_cent_macro, /* ¢ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N2)
            #endif
        )
        world_currency_cent: world_currency_cent {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_cent_macro>, <&world_currency_cent_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_cent
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_sign_macro, /* ¤ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N4)
            #endif
        )
        world_currency_sign: world_currency_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_sign_macro>, <&world_currency_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_micro_sign_macro, /* µ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_LINUX(&kp M &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_MACOS(&kp LA(M))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N5)
            #endif
            #endif
        )
        world_micro_sign: world_micro_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_micro_sign_macro>, <&world_micro_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_micro_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };

        //
        // characters
        //
        UNICODE(world_i_acute_lower_macro, /* í */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _ND)
            #endif
            #endif
        )
        world_i_acute_lower: world_i_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_lower_macro>, <&world_i_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_acute_upper_macro, /* Í */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _ND)
            #endif
            #endif
        )
        world_i_acute_upper: world_i_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_upper_macro>, <&world_i_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_acute: world_i_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_diaeresis_lower_macro, /* ï */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NF)
            #endif
            #endif
        )
        world_i_diaeresis_lower: world_i_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_lower_macro>, <&world_i_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_diaeresis_upper_macro, /* Ï */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NF)
            #endif
            #endif
        )
        world_i_diaeresis_upper: world_i_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_upper_macro>, <&world_i_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_diaeresis: world_i_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_circumflex_lower_macro, /* î */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NE)
            #endif
            #endif
        )
        world_i_circumflex_lower: world_i_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_lower_macro>, <&world_i_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_circumflex_upper_macro, /* Î */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NE)
            #endif
            #endif
        )
        world_i_circumflex_upper: world_i_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_upper_macro>, <&world_i_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_circumflex: world_i_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_grave_lower_macro, /* ì */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NC)
            #endif
            #endif
        )
        world_i_grave_lower: world_i_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_lower_macro>, <&world_i_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_grave_upper_macro, /* Ì */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NC)
            #endif
            #endif
        )
        world_i_grave_upper: world_i_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_upper_macro>, <&world_i_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_grave: world_i_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_acute_lower_macro, /* é */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N9)
            #endif
            #endif
        )
        world_e_acute_lower: world_e_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_lower_macro>, <&world_e_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_acute_upper_macro, /* É */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N9)
            #endif
            #endif
        )
        world_e_acute_upper: world_e_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_upper_macro>, <&world_e_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_acute: world_e_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_diaeresis_lower_macro, /* ë */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NB)
            #endif
            #endif
        )
        world_e_diaeresis_lower: world_e_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_lower_macro>, <&world_e_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_diaeresis_upper_macro, /* Ë */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NB)
            #endif
            #endif
        )
        world_e_diaeresis_upper: world_e_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_upper_macro>, <&world_e_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_diaeresis: world_e_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_circumflex_lower_macro, /* ê */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NA)
            #endif
            #endif
        )
        world_e_circumflex_lower: world_e_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_lower_macro>, <&world_e_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_circumflex_upper_macro, /* Ê */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NA)
            #endif
            #endif
        )
        world_e_circumflex_upper: world_e_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_upper_macro>, <&world_e_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_circumflex: world_e_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_grave_lower_macro, /* è */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N8)
            #endif
            #endif
        )
        world_e_grave_lower: world_e_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_lower_macro>, <&world_e_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_grave_upper_macro, /* È */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N8)
            #endif
            #endif
        )
        world_e_grave_upper: world_e_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_upper_macro>, <&world_e_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_grave: world_e_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_oe_lower_macro, /* œ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N5 &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N5 &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N5 &kp _N3)
            #endif
        )
        world_e_oe_lower: world_e_oe_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower_macro>, <&world_e_oe_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_oe_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_oe_upper_macro, /* Œ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N5 &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N5 &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N5 &kp _N2)
            #endif
        )
        world_e_oe_upper: world_e_oe_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_upper_macro>, <&world_e_oe_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_oe_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_oe: world_e_oe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower>, <&world_e_oe_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_ae_lower_macro, /* æ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_LINUX(&kp A &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_MACOS(&kp LA(SQT))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N6)
            #endif
            #endif
        )
        world_e_ae_lower: world_e_ae_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_lower_macro>, <&world_e_ae_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_ae_upper_macro, /* Æ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_LINUX(&kp LS(A) &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(SQT)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N6)
            #endif
            #endif
        )
        world_e_ae_upper: world_e_ae_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_upper_macro>, <&world_e_ae_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_ae: world_e_ae {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_acute_lower_macro, /* á */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N1)
            #endif
            #endif
        )
        world_a_acute_lower: world_a_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_lower_macro>, <&world_a_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_acute_upper_macro, /* Á */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N1)
            #endif
            #endif
        )
        world_a_acute_upper: world_a_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_upper_macro>, <&world_a_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_acute: world_a_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_diaeresis_lower_macro, /* ä */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N4)
            #endif
            #endif
        )
        world_a_diaeresis_lower: world_a_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_lower_macro>, <&world_a_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_diaeresis_upper_macro, /* Ä */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N4)
            #endif
            #endif
        )
        world_a_diaeresis_upper: world_a_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_upper_macro>, <&world_a_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_diaeresis: world_a_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_circumflex_lower_macro, /* â */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N2)
            #endif
            #endif
        )
        world_a_circumflex_lower: world_a_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_lower_macro>, <&world_a_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_circumflex_upper_macro, /* Â */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N2)
            #endif
            #endif
        )
        world_a_circumflex_upper: world_a_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_upper_macro>, <&world_a_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_circumflex: world_a_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_grave_lower_macro, /* à */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N0)
            #endif
            #endif
        )
        world_a_grave_lower: world_a_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_lower_macro>, <&world_a_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_grave_upper_macro, /* À */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N0)
            #endif
            #endif
        )
        world_a_grave_upper: world_a_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_upper_macro>, <&world_a_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_grave: world_a_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_tilde_lower_macro, /* ã */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N3)
            #endif
            #endif
        )
        world_a_tilde_lower: world_a_tilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_lower_macro>, <&world_a_tilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_tilde_upper_macro, /* Ã */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N3)
            #endif
            #endif
        )
        world_a_tilde_upper: world_a_tilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_upper_macro>, <&world_a_tilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_tilde: world_a_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_ring_lower_macro, /* å */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_LINUX(&kp O &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_MACOS(&kp LA(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N5)
            #endif
            #endif
        )
        world_a_ring_lower: world_a_ring_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_lower_macro>, <&world_a_ring_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_ring_upper_macro, /* Å */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_LINUX(&kp O &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(A)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N5)
            #endif
            #endif
        )
        world_a_ring_upper: world_a_ring_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_upper_macro>, <&world_a_ring_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_ring: world_a_ring {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_y_acute_lower_macro, /* ý */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp Y)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp Y)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _ND)
            #endif
            #endif
        )
        world_y_acute_lower: world_y_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_lower_macro>, <&world_y_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_y_acute_upper_macro, /* Ý */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(Y))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(Y))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _ND)
            #endif
            #endif
        )
        world_y_acute_upper: world_y_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_upper_macro>, <&world_y_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_y_acute: world_y_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_y_diaeresis_lower_macro, /* ÿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp Y)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp Y)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NF)
            #endif
            #endif
        )
        world_y_diaeresis_lower: world_y_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_lower_macro>, <&world_y_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_y_diaeresis_upper_macro, /* Ÿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(Y))
            #else
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N7 &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(Y))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N7 &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N7 &kp _N8)
            #endif
            #endif
        )
        world_y_diaeresis_upper: world_y_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_upper_macro>, <&world_y_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_y_diaeresis: world_y_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_acute_lower_macro, /* ó */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N3)
            #endif
            #endif
        )
        world_o_acute_lower: world_o_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_lower_macro>, <&world_o_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_acute_upper_macro, /* Ó */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N3)
            #endif
            #endif
        )
        world_o_acute_upper: world_o_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_upper_macro>, <&world_o_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_acute: world_o_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_diaeresis_lower_macro, /* ö */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N6)
            #endif
            #endif
        )
        world_o_diaeresis_lower: world_o_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_lower_macro>, <&world_o_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_diaeresis_upper_macro, /* Ö */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N6)
            #endif
            #endif
        )
        world_o_diaeresis_upper: world_o_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_upper_macro>, <&world_o_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_diaeresis: world_o_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_circumflex_lower_macro, /* ô */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N4)
            #endif
            #endif
        )
        world_o_circumflex_lower: world_o_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_lower_macro>, <&world_o_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_circumflex_upper_macro, /* Ô */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N4)
            #endif
            #endif
        )
        world_o_circumflex_upper: world_o_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_upper_macro>, <&world_o_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_circumflex: world_o_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_grave_lower_macro, /* ò */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N2)
            #endif
            #endif
        )
        world_o_grave_lower: world_o_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_lower_macro>, <&world_o_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_grave_upper_macro, /* Ò */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N2)
            #endif
            #endif
        )
        world_o_grave_upper: world_o_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_upper_macro>, <&world_o_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_grave: world_o_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_tilde_lower_macro, /* õ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N5)
            #endif
            #endif
        )
        world_o_tilde_lower: world_o_tilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_lower_macro>, <&world_o_tilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_tilde_upper_macro, /* Õ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N5)
            #endif
            #endif
        )
        world_o_tilde_upper: world_o_tilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_upper_macro>, <&world_o_tilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_tilde: world_o_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_slash_lower_macro, /* ø */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_LINUX(&kp FSLH &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_MACOS(&kp LA(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N8)
            #endif
            #endif
        )
        world_o_slash_lower: world_o_slash_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_lower_macro>, <&world_o_slash_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_slash_upper_macro, /* Ø */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_LINUX(&kp FSLH &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(O)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N8)
            #endif
            #endif
        )
        world_o_slash_upper: world_o_slash_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_upper_macro>, <&world_o_slash_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_slash: world_o_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
            mods = <MOD_LSFT>;
        };
        world_o_oe: world_o_oe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower>, <&world_e_oe_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_acute_lower_macro, /* ú */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NA)
            #endif
            #endif
        )
        world_u_acute_lower: world_u_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_lower_macro>, <&world_u_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_acute_upper_macro, /* Ú */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NA)
            #endif
            #endif
        )
        world_u_acute_upper: world_u_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_upper_macro>, <&world_u_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_acute: world_u_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_diaeresis_lower_macro, /* ü */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NC)
            #endif
            #endif
        )
        world_u_diaeresis_lower: world_u_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_lower_macro>, <&world_u_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_diaeresis_upper_macro, /* Ü */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NC)
            #endif
            #endif
        )
        world_u_diaeresis_upper: world_u_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_upper_macro>, <&world_u_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_diaeresis: world_u_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_circumflex_lower_macro, /* û */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NB)
            #endif
            #endif
        )
        world_u_circumflex_lower: world_u_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_lower_macro>, <&world_u_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_circumflex_upper_macro, /* Û */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NB)
            #endif
            #endif
        )
        world_u_circumflex_upper: world_u_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_upper_macro>, <&world_u_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_circumflex: world_u_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_grave_lower_macro, /* ù */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N9)
            #endif
            #endif
        )
        world_u_grave_lower: world_u_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_lower_macro>, <&world_u_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_grave_upper_macro, /* Ù */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N9)
            #endif
            #endif
        )
        world_u_grave_upper: world_u_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_upper_macro>, <&world_u_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_grave: world_u_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_cedilla_lower_macro, /* ç */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_LINUX(&kp COMMA &kp C)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_MACOS(&kp LA(C))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N7)
            #endif
            #endif
        )
        world_consonants_cedilla_lower: world_consonants_cedilla_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_lower_macro>, <&world_consonants_cedilla_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_cedilla_upper_macro, /* Ç */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_LINUX(&kp COMMA &kp LS(C))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(C)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N7)
            #endif
            #endif
        )
        world_consonants_cedilla_upper: world_consonants_cedilla_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_upper_macro>, <&world_consonants_cedilla_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_cedilla: world_consonants_cedilla {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_lower>, <&world_consonants_cedilla_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_eszett_lower_macro, /* ß */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_LINUX(&kp S &kp S)
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_MACOS(&kp LA(S))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NF)
            #endif
            #endif
        )
        world_consonants_eszett_lower: world_consonants_eszett_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_lower_macro>, <&world_consonants_eszett_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_eszett_upper_macro, /* ẞ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
            COMPOSE_SEQ_LINUX(&kp LS(S) &kp LS(S))
            #else
            UNICODE_SEQ_LINUX(&kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(S)))
            #else
            UNICODE_SEQ_MACOS(&kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
        )
        world_consonants_eszett_upper: world_consonants_eszett_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_upper_macro>, <&world_consonants_eszett_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_eszett: world_consonants_eszett {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_lower>, <&world_consonants_eszett_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_ntilde_lower_macro, /* ñ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp N)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp N)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N1)
            #endif
            #endif
        )
        world_consonants_ntilde_lower: world_consonants_ntilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_lower_macro>, <&world_consonants_ntilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_ntilde_upper_macro, /* Ñ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(N))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(N))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N1)
            #endif
            #endif
        )
        world_consonants_ntilde_upper: world_consonants_ntilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_upper_macro>, <&world_consonants_ntilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_ntilde: world_consonants_ntilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_lower>, <&world_consonants_ntilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_angle_lower_macro, /* ‹ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #endif
        )
        world_quotes_left_angle_lower: world_quotes_left_angle_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_lower_macro>, <&world_quotes_left_angle_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_angle_upper_macro, /* « */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _NB)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NB)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NB)
            #endif
        )
        world_quotes_left_angle_upper: world_quotes_left_angle_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_upper_macro>, <&world_quotes_left_angle_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_angle: world_quotes_left_angle {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_lower>, <&world_quotes_left_angle_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_curly_lower_macro, /* ‘ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #endif
        )
        world_quotes_left_curly_lower: world_quotes_left_curly_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_lower_macro>, <&world_quotes_left_curly_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_curly_upper_macro, /* “ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #endif
        )
        world_quotes_left_curly_upper: world_quotes_left_curly_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_upper_macro>, <&world_quotes_left_curly_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_curly: world_quotes_left_curly {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_lower>, <&world_quotes_left_curly_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_low_lower_macro, /* ‚ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #endif
        )
        world_quotes_left_low_lower: world_quotes_left_low_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower_macro>, <&world_quotes_left_low_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_low_upper_macro, /* „ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #endif
        )
        world_quotes_left_low_upper: world_quotes_left_low_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_upper_macro>, <&world_quotes_left_low_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_low: world_quotes_left_low {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_corner1_lower_macro, /* 「 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #endif
        )
        world_quotes_left_corner1_lower: world_quotes_left_corner1_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_lower_macro>, <&world_quotes_left_corner1_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_corner1_upper_macro, /* ﹁ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N1)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N1)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N1)
            #endif
        )
        world_quotes_left_corner1_upper: world_quotes_left_corner1_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_upper_macro>, <&world_quotes_left_corner1_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_corner1: world_quotes_left_corner1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_lower>, <&world_quotes_left_corner1_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_corner2_lower_macro, /* 『 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #endif
        )
        world_quotes_left_corner2_lower: world_quotes_left_corner2_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_lower_macro>, <&world_quotes_left_corner2_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_corner2_upper_macro, /* ﹃ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N3)
            #endif
        )
        world_quotes_left_corner2_upper: world_quotes_left_corner2_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_upper_macro>, <&world_quotes_left_corner2_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_corner2: world_quotes_left_corner2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_lower>, <&world_quotes_left_corner2_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_grave_macro, /* ` */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N6 &kp _N0)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _N6 &kp _N0)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N6 &kp _N0)
            #endif
        )
        world_quotes_left_grave: world_quotes_left_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_grave_macro>, <&world_quotes_left_grave_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_grave
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_angle_lower_macro, /* › */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #endif
        )
        world_quotes_right_angle_lower: world_quotes_right_angle_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_lower_macro>, <&world_quotes_right_angle_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_angle_upper_macro, /* » */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NB &kp _NB)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NB)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NB)
            #endif
        )
        world_quotes_right_angle_upper: world_quotes_right_angle_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_upper_macro>, <&world_quotes_right_angle_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_angle: world_quotes_right_angle {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_lower>, <&world_quotes_right_angle_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_curly_lower_macro, /* ’ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #endif
        )
        world_quotes_right_curly_lower: world_quotes_right_curly_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_lower_macro>, <&world_quotes_right_curly_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_curly_upper_macro, /* ” */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #endif
        )
        world_quotes_right_curly_upper: world_quotes_right_curly_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_upper_macro>, <&world_quotes_right_curly_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_curly: world_quotes_right_curly {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_lower>, <&world_quotes_right_curly_upper>;
            mods = <MOD_LSFT>;
        };
        world_quotes_right_low: world_quotes_right_low {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_corner1_lower_macro, /* 」 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #endif
        )
        world_quotes_right_corner1_lower: world_quotes_right_corner1_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_lower_macro>, <&world_quotes_right_corner1_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_corner1_upper_macro, /* ﹂ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N2)
            #endif
        )
        world_quotes_right_corner1_upper: world_quotes_right_corner1_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_upper_macro>, <&world_quotes_right_corner1_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_corner1: world_quotes_right_corner1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_lower>, <&world_quotes_right_corner1_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_corner2_lower_macro, /* 』 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #endif
        )
        world_quotes_right_corner2_lower: world_quotes_right_corner2_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_lower_macro>, <&world_quotes_right_corner2_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_corner2_upper_macro, /* ﹄ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N4)
            #endif
        )
        world_quotes_right_corner2_upper: world_quotes_right_corner2_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_upper_macro>, <&world_quotes_right_corner2_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_corner2: world_quotes_right_corner2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_lower>, <&world_quotes_right_corner2_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_grave_macro, /* ´ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NB &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N4)
            #endif
        )
        world_quotes_right_grave: world_quotes_right_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_grave_macro>, <&world_quotes_right_grave_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_grave
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_dollar_lower_macro, /* $ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _N2 &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N4)
            #endif
        )
        world_currency_dollar_lower: world_currency_dollar_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar_lower_macro>, <&world_currency_dollar_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_dollar_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_currency_dollar: world_currency_dollar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar_lower>, <&world_currency_cent>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_currency_yen_macro, /* ¥ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N5)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N5)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N5)
            #endif
        )
        world_currency_yen: world_currency_yen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_yen_macro>, <&world_currency_yen_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_yen
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_euro_macro, /* € */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_LINUX(&kp E &kp EQUAL)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_MACOS(&kp LA(LS(N2)))
            #else
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #endif
        )
        world_currency_euro: world_currency_euro {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_euro_macro>, <&world_currency_euro_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_euro
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_won_macro, /* ₩ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NA &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NA &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NA &kp _N9)
            #endif
        )
        world_currency_won: world_currency_won {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_won_macro>, <&world_currency_won_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_won
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_pound_macro, /* £ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N3)
            #endif
        )
        world_currency_pound: world_currency_pound {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_pound_macro>, <&world_currency_pound_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_pound
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_currency_generic: world_currency_generic {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_sign>, <&world_currency_crypto>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_sign_copyright_regular_macro, /* © */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_LINUX(&kp O &kp C)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_MACOS(&kp LA(G))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N9)
            #endif
            #endif
        )
        world_sign_copyright_regular: world_sign_copyright_regular {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_regular_macro>, <&world_sign_copyright_regular_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_sign_copyright_shifted_macro, /* ® */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_LINUX(&kp O &kp R)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_MACOS(&kp LA(R))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NE)
            #endif
            #endif
        )
        world_sign_copyright_shifted: world_sign_copyright_shifted {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_shifted_macro>, <&world_sign_copyright_shifted_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_sign_copyright: world_sign_copyright {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_regular>, <&world_sign_copyright_shifted>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_sign_trademark_regular_macro, /* ™ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_LINUX(&kp T &kp M)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_MACOS(&kp LA(N2))
            #else
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #endif
        )
        world_sign_trademark_regular: world_sign_trademark_regular {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_regular_macro>, <&world_sign_trademark_regular_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_sign_trademark_shifted_macro, /* ℠ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_shifted
            COMPOSE_SEQ_LINUX(&kp S &kp M)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #endif
        )
        world_sign_trademark_shifted: world_sign_trademark_shifted {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_shifted_macro>, <&world_sign_trademark_shifted_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_trademark_shifted
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_sign_trademark: world_sign_trademark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_regular>, <&world_sign_trademark_shifted>;
            mods = <MOD_LSFT>;
        };

        //
        // transforms
        //
        world_i_base: world_i_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute>, <&world_i_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_i_LCTL: world_i_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_i_RCTL: world_i_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex>, <&world_i_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_e_base: world_e_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute>, <&world_e_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_LALT: world_e_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe>, <&world_e_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_RALT: world_e_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae>, <&world_e_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_LCTL: world_e_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_e_RCTL: world_e_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex>, <&world_e_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_a_base: world_a_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute>, <&world_a_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_LALT: world_a_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde>, <&world_a_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_RALT: world_a_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring>, <&world_a_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_LCTL: world_a_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_a_RCTL: world_a_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex>, <&world_a_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_y_base: world_y_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute>, <&world_y_diaeresis>;
            mods = <(MOD_LCTL)>;
        };
        world_o_base: world_o_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute>, <&world_o_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_LALT: world_o_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde>, <&world_o_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_RALT: world_o_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash>, <&world_o_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_LCTL: world_o_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_o_RCTL: world_o_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex>, <&world_o_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_u_base: world_u_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute>, <&world_u_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_u_LCTL: world_u_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_u_RCTL: world_u_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex>, <&world_u_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_consonants_base: world_consonants_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla>, <&world_consonants_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        world_consonants_LCTL: world_consonants_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde>, <&world_consonants_eszett>;
            mods = <(MOD_RCTL)>;
        };
        world_quotes_left_base: world_quotes_left_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle>, <&world_quotes_left_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_LALT: world_quotes_left_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1>, <&world_quotes_left_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_RALT: world_quotes_left_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2>, <&world_quotes_left_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_LCTL: world_quotes_left_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly>, <&world_quotes_left_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_RCTL: world_quotes_left_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low>, <&world_quotes_left_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_quotes_right_base: world_quotes_right_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle>, <&world_quotes_right_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_LALT: world_quotes_right_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1>, <&world_quotes_right_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_RALT: world_quotes_right_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2>, <&world_quotes_right_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_LCTL: world_quotes_right_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly>, <&world_quotes_right_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_RCTL: world_quotes_right_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_low>, <&world_quotes_right_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_currency_base: world_currency_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar>, <&world_currency_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_LALT: world_currency_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_yen>, <&world_currency_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_RALT: world_currency_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_won>, <&world_currency_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_LCTL: world_currency_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_euro>, <&world_currency_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_RCTL: world_currency_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_pound>, <&world_currency_generic>;
            mods = <(MOD_RSFT)>;
        };
        world_sign_base: world_sign_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright>, <&world_sign_trademark>;
            mods = <(MOD_LCTL)>;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // Emoji layer - modern age pictograms
        //
        //////////////////////////////////////////////////////////////////////////

        // On ne prend pas les Emoji


        //////////////////////////////////////////////////////////////////////////
        ///
        /// Autre macro 
        ///
        //////////////////////////////////////////////////////////////////////////
        focus_left_group: focus_left_group {
            label = "&focus_left_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp H>;
        };

        focus_right_group: focus_right_group {
            label = "&focus_right_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp L>;
        };

        focus_up_group: focus_up_group {
            label = "&focus_up_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp K>;
        };

        focus_down_group: focus_down_group {
            label = "&focus_down_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp J>;
        };

        /* Spit windows editort */
        split_editor_vertical: split_editor_vertical {
            label = "&split_editor_vertical";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp V>;
        };

        split_editor_horizontal: split_editor_horizontal {
            label = "&split_editor_horizontal";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp S>;
        };

        // To increase / decrease current view VsCode
        increase_vscode_view: increase_vscode_view {
            label = "&increase_vscode_view";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(T)>
                , <&kp KP_PLUS>;
        };

        decrease_vscode_view: decrease_vscode_view {
            label = "&decrease_vscode_view";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(T)>
                , <&kp KP_MINUS>;
        };
        //////////////////////////////////////////////////////////////////////////
        ///
        /// Autre macro 
        ///
        //////////////////////////////////////////////////////////////////////////
        // Update to have "à" in default.
        world_a_base_perso: world_a_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave>, <&world_a_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_LALT_perso: world_a_LALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde>, <&world_a_RALT_perso>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_RALT_perso: world_a_RALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring>, <&world_a_LCTL_perso>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_LCTL_perso: world_a_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis>, <&world_a_RCTL_perso>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_a_RCTL_perso: world_a_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex>, <&world_a_acute>;
            mods = <(MOD_RSFT)>;
        };
            // For ç
            world_consonants_base_perso: world_consonants_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla>, <&world_consonants_cedilla_upper>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            // Update to have "è" in default.
            world_e_base_perso: world_e_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave>, <&world_e_RALT_perso>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_e_RALT_perso: world_e_RALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae>, <&world_e_LCTL_perso>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_e_LCTL_perso: world_e_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis>, <&world_e_RCTL_perso>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_e_RCTL_perso: world_e_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex>, <&world_e_acute>;
            mods = <(MOD_RSFT)>;
        };
            // For u and have defaut "ù"
            world_u_base_perso: world_u_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave>, <&world_u_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_u_LCTL_perso: world_u_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_u_RCTL_perso: world_u_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex>, <&world_u_grave>;
            mods = <(MOD_RSFT)>;
        };

    };

    ////////////////////////////////////////////////////////////////
    /// Keymap configuration
    ////////////////////////////////////////////////////////////////

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&none  &none               &none              &none                      &none          &none                       &none       &none            &none              &none              &none               &none
&none  &kp N1              &kp N2             &world_e_acute_with_shift  &kp SQT        &kp N5                      &kp N6      &kp N7           &kp N8             &kp N9             &kp N0              &none
&none  &kp Q               &kp W              &kp E                      &kp R          &kp T                       &kp Y       &kp U            &kp I              &kp O              &kp SEMI            &none
&none  &lmt_pinky LCTRL A  &lmt_ringy LALT S  &lmt_middy LGUI D          &lmt LSHFT F   &kp G                       &kp H       &rmt RSHFT J     &rmt_middy RGUI K  &rmt_ringy RALT L  &rmt_pinky RCTRL P  &none
&none  &kp Z               &kp X              &kp C                      &kp V          &kp B                       &kp N       &kp M            &kp COMMA          &kp DOT            &kp FSLH            &none
&none  &none               &kp UP             &kp DOWN                   &none                                                  &none            &kp LBKT           &kp RBKT           &none               &none
                                                                         &thumb 6 ESC   &none         &none         &none       &thumb 4 INSERT  &thumb 5 ENTER
                                                                         &thumb 1 BSPC  &thumb 2 DEL  &hyper_key    &caps_word  &thumb 8 TAB     &space 3 SPACE
            >;
        };
    };
};

////////////////////////////////////////////////////////////////
// Trackball configuration
////////////////////////////////////////////////////////////////

// Configuration trackball main droite uniquement
&trackball_peripheral_listener {
    input-processors =
        <&zip_temp_layer 8 500>;
};
