#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>


/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    // behaviors

    behaviors {
        #define LAYER_QWERTY 0
        #define LAYER_LeftPinky 1
        #define LAYER_LeftRingy 2
        #define LAYER_LeftMiddy 3
        #define LAYER_LeftIndex 4
        #define LAYER_RightPinky 5
        #define LAYER_RightRingy 6
        #define LAYER_RightMiddy 7
        #define LAYER_RightIndex 8
        #define LAYER_Cursor 9 
        #define LAYER_Number 10
        #define LAYER_Function 11
        #define LAYER_Symbol 12
        #define LAYER_Mouse 13
        //#define LAYER_MouseSlow 16
        //#define LAYER_MouseFast 17
        //#define LAYER_MouseWarp 18
        #define LAYER_System 14
        #define LAYER_World 15
        //#define LAYER_Magic 24

        /* Custom Defined Behaviors */
            
        // NOTE: Use the many #define settings below to customize this keymap!
        //#define MOUSE_SCALER_FAST 3 1
        //#define MOUSE_SCALER_WARP 12 1
        //#define MOUSE_SCALER_SLOW 1 9
        #define ENABLE_MOUSE_KEYS  // requires v24.12-beta or newer firmware
        //#define NATURAL_SCROLLING  // supports "natural scrolling" in macOS
        #define OPERATING_SYSTEM 'M' // choose 'L'inux, 'M'acOS, or 'W'indows
        #define DIFFICULTY_LEVEL  0  // 0:custom, 1:easy -> 5:hard (see below)
        #define ENFORCE_BILATERAL    // cancels single-handed home row mod+tap
        //#define SPACE_FORGIVENESS    // allow lingering taps on the space bar
        //#define THUMB_FORGIVENESS  // allow lingering taps on the thumb keys
        //#define SHIFT_FORGIVENESS  // requires v24.08-beta or newer firmware
        #define WORLD_USE_COMPOSE    // use native Compose in place of Unicode
        //#define WORLD_HOST_AZERTY  // host computer is set to AZERTY locale
        //#define WORLD_SHIFT_NUMBER // apply Shift to type number row digits
        // TIP: Add more setting overrides here instead of editing them below.

        //////////////////////////////////////////////////////////////////////////////
        //
        // Sunaku's Keymap v41 -- "Glorious Engrammer"
        // - https://github.com/sunaku/glove80-keymaps
        //
        //////////////////////////////////////////////////////////////////////////////

        //
        // OPERATING_SYSTEM defines which operating system you intend to use
        // with this keymap, because shortcuts vary across operating systems.
        //
        // - https://zmk.dev/docs/codes
        // - https://en.wikipedia.org/wiki/Table_of_keyboard_shortcuts
        //
        // This setting also affects the UNICODE() function defined below, as
        // each OS has different shortcuts for typing Unicode hex characters.
        //
        // NOTE: You may need to enable Unicode hexadecimal input in your OS:
        // - (macOS) https://uknowit.uwgb.edu/page.php?id=22623
        //     and   https://github.com/ldanet/unicode-hex-input-fix
        // - (Linux) https://help.ubuntu.com/stable/ubuntu-help/tips-specialchars.html.en#ctrlshiftu
        // - (Windows) https://github.com/samhocevar/wincompose
        //
        // Specifically, Windows users should be running the WinCompose tool,
        // which lets you type Unicode characters via hexadecimal codepoints.
        //
        #ifndef OPERATING_SYSTEM
        //#define OPERATING_SYSTEM 'L' // linux
        //#define OPERATING_SYSTEM 'M' // macos
        //#define OPERATING_SYSTEM 'W' // windows
        #endif
        #if OPERATING_SYSTEM == 'M'
        #define _C      LG
        #define _A_TAB  LGUI
        #define _G_TAB  LALT
        #define _REDO   _C(LS(Z))
        #define _POWER  K_POWER
        #define _W      LA
        #define _HOME   _C(LEFT)
        #define _END    _C(RIGHT)
        #define _EMOJI  LG(LC(SPACE))
        #else
        #define _C      LC
        #define _A_TAB  LALT
        #define _G_TAB  LGUI
        #define _REDO   _C(Y)
        #define _POWER  C_POWER
        #define _W      _C
        #define _HOME   HOME
        #define _END    END
        #define _EMOJI  LG(DOT)
        #endif
        #define _SLEEP      C_SLEEP
        #if OPERATING_SYSTEM == 'W'
        #define _LOCK   LG(L)
        #elif OPERATING_SYSTEM == 'M'
        #define _LOCK   _C(LC(Q))
        #elif OPERATING_SYSTEM == 'L'
        #define _LOCK   K_LOCK
        #endif
        #define _UNDO       _C(Z)
        #define _CUT        _C(X)
        #define _COPY       _C(C)
        #define _PASTE      _C(V)
        #define _FIND       _C(F)
        #define _FIND_NEXT  _C(G)
        #define _FIND_PREV  _C(LS(G))

        //
        // USE_NUMPAD_KEYCODES puts `KP_*` keycodes into the Number layer.
        //
        #ifdef USE_NUMPAD_KEYCODES
        #define _KP_N0 KP_N0
        #define _KP_N1 KP_N1
        #define _KP_N2 KP_N2
        #define _KP_N3 KP_N3
        #define _KP_N4 KP_N4
        #define _KP_N5 KP_N5
        #define _KP_N6 KP_N6
        #define _KP_N7 KP_N7
        #define _KP_N8 KP_N8
        #define _KP_N9 KP_N9
        #define _KP_PLUS KP_PLUS
        #define _KP_MINUS KP_MINUS
        #define _KP_ASTERISK KP_ASTERISK
        #define _KP_SLASH KP_SLASH
        #define _KP_COMMA KP_COMMA
        #define _KP_DOT KP_DOT
        #define _KP_EQUAL KP_EQUAL
        #define _KP_ENTER KP_ENTER
        #else
        #define _KP_N0 N0
        #define _KP_N1 N1
        #define _KP_N2 N2
        #define _KP_N3 N3
        #define _KP_N4 N4
        #define _KP_N5 N5
        #define _KP_N6 N6
        #define _KP_N7 N7
        #define _KP_N8 N8
        #define _KP_N9 N9
        #define _KP_PLUS PLUS
        #define _KP_MINUS MINUS
        #define _KP_ASTERISK ASTERISK
        #define _KP_SLASH SLASH
        #define _KP_COMMA COMMA
        #define _KP_DOT DOT
        #define _KP_EQUAL EQUAL
        #define _KP_ENTER ENTER
        #endif

        //////////////////////////////////////////////////////////////////////////
        //
        // Miryoku layers and home row mods (ported from my QMK endgame)
        // - https://sunaku.github.io/home-row-mods.html#porting-to-zmk
        // - https://github.com/urob/zmk-config#timeless-homerow-mods
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // DIFFICULTY_LEVEL specifies your level of expertise with this keymap.
        // It's meant to help newcomers gradually work their way up to mastery.
        //
        // #define DIFFICULTY_LEVEL 1 // novice (500ms)
        // #define DIFFICULTY_LEVEL 2 // slower (400ms)
        // #define DIFFICULTY_LEVEL 3 // normal (300ms)
        // #define DIFFICULTY_LEVEL 4 // faster (200ms)
        // #define DIFFICULTY_LEVEL 5 // expert (100ms)
        //
        // You can disable this setting by omitting it or assigning a `0` zero,
        // in which case it will default to my personal set of time thresholds.
        //
        // #define DIFFICULTY_LEVEL 0 // sunaku (150ms)
        //
        // No matter what difficulty level you choose, you can always override
        // any settings in this keymap at the beginning of this configuration.
        //
        #ifdef DIFFICULTY_LEVEL
            #if DIFFICULTY_LEVEL > 0 && DIFFICULTY_LEVEL < 6
            #ifndef TAPPING_RESOLUTION
                #define TAPPING_RESOLUTION ((6 - DIFFICULTY_LEVEL) * 100)
            #endif
            #endif
        #endif

        //
        // TAPPING_RESOLUTION specifies the maximum speed at which the keyboard
        // confuses your taps as being holds when you type on home row mod keys.
        // When you lower this value, the same confusion should still occur; but
        // when you raise this value, you should be able to type normally again.
        //
        #ifndef TAPPING_RESOLUTION
        #define TAPPING_RESOLUTION 140
        #endif

        //
        // ENFORCE_BILATERAL cancels out single-handed home row mods activation by
        // releasing any currently pressed mods and replacing them with plain taps.
        //
        // NOTE: You may still encounter "flashing mods" where an operating system
        // action is triggered by the release of mods, such as LGUI which launches
        // the Windows Start Menu and LALT which opens the Microsoft Office Ribbon.
        //
        //#define ENFORCE_BILATERAL

        //
        // SHIFT_FORGIVENESS taps when home row shift is merely held and released,
        // without any other key having been tapped while the shift was held down.
        // For example, suppose you hold a home row shift key and, before pressing
        // another key, you suddenly decide that you don't want the shift anymore:
        //
        // <1> If this setting is enabled, the underlying tap behavior is triggered
        //     to type a single character when you release that home row shift key.
        //
        // <2> Otherwise, nothing happens when you release that home row shift key.
        //
        // This requires the "hold-while-undecided" ZMK feature in a beta firmware:
        // please select "v24.08-beta1" or newer from the drop-down menu located at
        // Glove80 Layout Editor > Settings > Advanced Settings > Firmware Version.
        //
        // CAUTION: This can interfere with mod-click mouse usage where you hold a
        // home row shift key and perform mouse actions (move, click, drag & drop):
        // when you release that home row shift key, its underlying character would
        // be typed, potentially triggering an unexpected action on your selection!
        // To prevent the underlying character from being typed, press another key
        // (such as a dedicated shift key, a neighboring home row mod key, or even
        // a layer access key) before you release the original home row shift key.
        //
        // NOTE: You may potentially encounter "flashing mods" where an application
        // or operating system action is triggered by a standalone tap of a shift,
        // but this is unlikely as people regularly tap shift without consequence.
        //
        //#define SHIFT_FORGIVENESS

        //
        // THUMB_FORGIVENESS taps when a thumb layer access key is merely held and
        // released, without any other key having been tapped while thumb was held.
        // For example, suppose you hold the cursor layer key and, before pressing
        // another key, you suddenly decide that you don't want the layer anymore:
        //
        // <1> If this setting is enabled, the underlying tap behavior is triggered
        //     to type a single character when you release that layer access key.
        //
        // <2> Otherwise, nothing happens when you release that layer access key.
        //
        // NOTE: This setting interferes with (and effectively disables) per-key
        // RGB indicators (PR30) for layers accessed via thumb layer access keys.
        //
        //#define THUMB_FORGIVENESS

        //
        // SPACE_FORGIVENESS taps when the symbol layer access key is merely held
        // and released, without any symbol been tapped while the access was held.
        // For example, suppose you hold the symbol layer key and, before pressing
        // another key, you suddenly decide that you don't want the layer anymore:
        //
        // <1> If this setting is enabled, the underlying tap behavior is triggered
        //     to type a single character when you release that layer access key.
        //
        // <2> Otherwise, nothing happens when you release that layer access key.
        //
        // NOTE: This setting interferes with (and effectively disables) per-key
        // RGB indicators (PR30) for layers accessed via thumb layer access keys.
        //
        //#define SPACE_FORGIVENESS

        //
        // The *_FINGER_MOD specify which modifiers are used by home row mod keys.
        // Here, we use Miryoku's "GACS" (Win, Alt, Ctrl, Shift) order by default,
        // unless OPERATING_SYSTEM is macOS, in which case Win & Ctrl are swapped,
        // unless MACOS_USE_GACS is also defined to suppress that Win & Ctrl swap.
        //
        #ifndef PINKY_FINGER_MOD
            #if OPERATING_SYSTEM == 'M' && !defined(MACOS_USE_GACS)
            #define PINKY_FINGER_MOD LCTL
            #else
            #define PINKY_FINGER_MOD LGUI
            #endif
        #endif
        #ifndef RINGY_FINGER_MOD
        #define RINGY_FINGER_MOD LALT
        #endif
        #ifndef MIDDY_FINGER_MOD
            #if OPERATING_SYSTEM == 'M' && !defined(MACOS_USE_GACS)
            #define MIDDY_FINGER_MOD LGUI
            #else
            #define MIDDY_FINGER_MOD LCTL
            #endif
        #endif
        #ifndef INDEX_FINGER_MOD
        #define INDEX_FINGER_MOD LSFT
        #endif
        //
        // The following settings let you configure mods individually, per finger:
        //
        #ifndef LEFT_PINKY_MOD
        #define LEFT_PINKY_MOD PINKY_FINGER_MOD
        #endif
        #ifndef RIGHT_PINKY_MOD
        #define RIGHT_PINKY_MOD PINKY_FINGER_MOD
        #endif
        #ifndef LEFT_RINGY_MOD
        #define LEFT_RINGY_MOD RINGY_FINGER_MOD
        #endif
        #ifndef RIGHT_RINGY_MOD
        #define RIGHT_RINGY_MOD RINGY_FINGER_MOD
        #endif
        #ifndef LEFT_MIDDY_MOD
        #define LEFT_MIDDY_MOD MIDDY_FINGER_MOD
        #endif
        #ifndef RIGHT_MIDDY_MOD
        #define RIGHT_MIDDY_MOD MIDDY_FINGER_MOD
        #endif
        #ifndef LEFT_INDEX_MOD
        #define LEFT_INDEX_MOD INDEX_FINGER_MOD
        #endif
        #ifndef RIGHT_INDEX_MOD
        #define RIGHT_INDEX_MOD INDEX_FINGER_MOD
        #endif

        //
        // HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the pinky, ring, and middle fingers (which are assigned to Super,
        // Alt, and Ctrl respectively in the Miryoku system) on home row keys.
        //
        #ifndef HOMEY_HOLDING_TYPE
        #define HOMEY_HOLDING_TYPE "tap-preferred"
        #endif

        //
        // HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
        // home row mod keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
        //
        #ifndef HOMEY_HOLDING_TIME
        #define HOMEY_HOLDING_TIME (TAPPING_RESOLUTION + 90)
        #endif
        #ifndef INDEX_HOLDING_TIME
        #define INDEX_HOLDING_TIME (TAPPING_RESOLUTION + 5) // was 20 before
        #endif
        #ifndef MIDDY_HOLDING_TIME
        #define MIDDY_HOLDING_TIME (TAPPING_RESOLUTION + 40) // was 60 before
        #endif
        #ifndef RINGY_HOLDING_TIME
        #define RINGY_HOLDING_TIME (TAPPING_RESOLUTION + 90)
        #endif
        #ifndef PINKY_HOLDING_TIME
        #define PINKY_HOLDING_TIME (TAPPING_RESOLUTION + 90) // was 110 before
        #endif

        //
        // HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef HOMEY_STREAK_DECAY
        #define HOMEY_STREAK_DECAY TAPPING_RESOLUTION
        #endif

        //
        // HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef HOMEY_REPEAT_DECAY
        #define HOMEY_REPEAT_DECAY (TAPPING_RESOLUTION + 150)
        #endif // "tap then hold" for key auto-repeat

        //
        // CHORD_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for chorded home row mods (secondary keypresses in multi-mod chords).
        //
        #ifndef CHORD_HOLDING_TYPE
        #define CHORD_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #endif

        //
        // CHORD_HOLDING_TIME defines how long you need to hold (milliseconds)
        // home row mod keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
        // This is specifically for secondary keypresses in multi-mod chords.
        //
        #ifndef CHORD_HOLDING_TIME
        #define CHORD_HOLDING_TIME TAPPING_RESOLUTION
        #endif

        //
        // CHORD_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing
        // This is specifically for secondary keypresses in multi-mod chords.
        //
        #ifndef CHORD_STREAK_DECAY
        #define CHORD_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif

        //
        // CHORD_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        // This is specifically for secondary keypresses in multi-mod chords.
        //
        #ifndef CHORD_REPEAT_DECAY
        #define CHORD_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #endif

        //
        // INDEX_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for index fingers (which Miryoku assigns to Shift) on home row keys.
        //
        // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
        // allows faster activation of the Shift modifier (without having to wait
        // for the modified key to be released as the "balanced" flavor requires).
        //
        #ifndef INDEX_HOLDING_TYPE
        #define INDEX_HOLDING_TYPE "tap-preferred"
        #endif

        //
        // INDEX_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef INDEX_STREAK_DECAY
        #define INDEX_STREAK_DECAY (TAPPING_RESOLUTION - 50)
        #endif

        //
        // INDEX_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef INDEX_REPEAT_DECAY
        #define INDEX_REPEAT_DECAY (TAPPING_RESOLUTION + 150)
        #endif // "tap then hold" for key auto-repeat

        //
        // PLAIN_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for index fingers (which Miryoku assigns to Shift) on home row keys.
        //
        // NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
        // allows faster activation of the Shift modifier (without having to wait
        // for the modified key to be released as the "balanced" flavor requires).
        //
        #ifndef PLAIN_HOLDING_TYPE
        #define PLAIN_HOLDING_TYPE INDEX_HOLDING_TYPE
        #endif

        //
        // PLAIN_HOLDING_TIME defines how long you need to hold (milliseconds)
        // index finger keys in order to send their modifiers to the computer
        // (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
        //
        #ifndef PLAIN_HOLDING_TIME
        #define PLAIN_HOLDING_TIME (TAPPING_RESOLUTION + 50)
        #endif

        //
        // PLAIN_STREAK_DECAY defines how long you need to wait (milliseconds)
        // after typing before you can use home row mods again.  It prevents
        // unintended activation of home row mods when you're actively typing.
        //
        #ifndef PLAIN_STREAK_DECAY
        #define PLAIN_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif

        //
        // PLAIN_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef PLAIN_REPEAT_DECAY
        #define PLAIN_REPEAT_DECAY (TAPPING_RESOLUTION + 150)
        #endif // "tap then hold" for key auto-repeat

        //
        // THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for the thumbs (which are assigned to 6 layers in the Miryoku system).
        //
        // NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
        // activation for the symbol layer (if the tapped symbol key is released
        // while the thumb layer key is still held down) for quicker programming.
        //
        #ifndef THUMB_HOLDING_TYPE
        #define THUMB_HOLDING_TYPE "balanced"
        #endif

        //
        // THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
        // a thumb key to activate a layer.  Shorter holds are treated as taps.
        //
        #ifndef THUMB_HOLDING_TIME
        #define THUMB_HOLDING_TIME (TAPPING_RESOLUTION + 50)
        #endif

        //
        // THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef THUMB_REPEAT_DECAY
        #define THUMB_REPEAT_DECAY (TAPPING_RESOLUTION + 150)
        #endif // "tap then hold" for key auto-repeat

        //
        // SPACE_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
        // for spacebar (assigned to the right thumb's home position by default).
        //
        #ifndef SPACE_HOLDING_TYPE
        #define SPACE_HOLDING_TYPE THUMB_HOLDING_TYPE
        #endif

        //
        // SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
        // the space thumb key to activate.  Shorter holds are treated as taps.
        //
        #ifndef SPACE_HOLDING_TIME
        #define SPACE_HOLDING_TIME (TAPPING_RESOLUTION + 20)
        #endif

        //
        // SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
        // after tapping a key to hold it again in order to make it auto-repeat.
        //
        #ifndef SPACE_REPEAT_DECAY
        #define SPACE_REPEAT_DECAY (TAPPING_RESOLUTION + 100)
        #endif
        
        //
        // Imprint key position
        // 
        // 
        //
        // |------------------------|------------------------|
        // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
        // |                        |                        |
        // |  0  1  2  3  4  5      |       6  7  8  9 10 11 |
        // | 12 13 14 15 16 17      |      18 19 20 21 22 23 |
        // | 24 25 26 27 28 29      |      30 31 32 33 34 35 |
        // | 36 37 38 39 40 41      |      42 43 44 45 46 47 |
        // | 48 49 50 51 52 53      |      54 55 56 57 58 59 |
        // | 60 61 62 63 64         |         65 66 67 68 69 |
        // |               70 71 72 | 73 74 75               |
        // |               76 77 78 | 79 80 81               |
        // |------------------------|------------------------|
        //
        #define LEFT_HAND_KEYS      \
                0  1  2  3  4  5    \
                12 13 14 15 16 17   \
                24 25 26 27 28 29   \
                36 37 38 39 40 41   \
                48 49 50 51 52 53   \
                60 61 62 63 64
        #define RIGHT_HAND_KEYS     \
                                             6  7  8  9 10 11 \
                                            18 19 20 21 22 23 \
                                            30 31 32 33 34 35 \
                                            42 43 44 45 46 47 \
                                            54 55 56 57 58 59 \
                                               65 66 67 68 69
        #define THUMB_KEYS          \
                            70 71 72   73 74 75               \
                            76 77 78   79 80 81

        #define KEY_LH_C6R1 UP
        #define KEY_LH_C5R1 DOWN
        #define KEY_LH_C4R1 A
        #define KEY_LH_C3R1 B
        #define KEY_LH_C2R1 C
        #define KEY_RH_C2R1 D
        #define KEY_RH_C3R1 E
        #define KEY_RH_C4R1 F
        #define KEY_RH_C5R1 LEFT
        #define KEY_RH_C6R1 RIGHT
        #define KEY_LH_C6R2 EQUAL
        #define KEY_LH_C5R2 N1
        #define KEY_LH_C4R2 N2
        #define KEY_LH_C3R2 N3
        #define KEY_LH_C2R2 N4
        #define KEY_LH_C1R2 N5
        #define KEY_RH_C1R2 N6
        #define KEY_RH_C2R2 N7
        #define KEY_RH_C3R2 N8
        #define KEY_RH_C4R2 N9
        #define KEY_RH_C5R2 N0
        #define KEY_RH_C6R2 MINUS
        #define KEY_LH_C6R3 TAB
        #define KEY_LH_C5R3 Q
        #define KEY_LH_C4R3 W
        #define KEY_LH_C3R3 E
        #define KEY_LH_C2R3 R
        #define KEY_LH_C1R3 T
        #define KEY_RH_C1R3 Y

        #define KEY_LH_C5R4 A
        #define KEY_LH_C4R4 S
        #define KEY_LH_C3R4 D
        #define KEY_LH_C2R4 F
        #define KEY_RH_C2R4 J
        #define KEY_RH_C3R4 K
        #define KEY_RH_C4R4 L
        #define KEY_RH_C5R4 P

        #define LEFT_PINKY_KEY  KEY_LH_C5R4
        #define LEFT_RINGY_KEY  KEY_LH_C4R4
        #define LEFT_MIDDY_KEY  KEY_LH_C3R4
        #define LEFT_INDEX_KEY  KEY_LH_C2R4

        #define RIGHT_PINKY_KEY KEY_RH_C5R4
        #define RIGHT_RINGY_KEY KEY_RH_C4R4
        #define RIGHT_MIDDY_KEY KEY_RH_C3R4
        #define RIGHT_INDEX_KEY KEY_RH_C2R4

        //
        // Home row mods with bilateral combinations support
        //
        #ifndef PINKY_HOLDING_TYPE
        #define PINKY_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #endif
        #ifndef PINKY_CHORD_HOLDING_TYPE
        #define PINKY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_PINKY_CHORD_HOLDING_TYPE
        #define LEFT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_PINKY_CHORD_HOLDING_TYPE
        #define RIGHT_PINKY_CHORD_HOLDING_TYPE PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef PINKY_HOLDING_TIME
        #define PINKY_HOLDING_TIME HOMEY_HOLDING_TIME
        #endif
        #ifndef PINKY_CHORD_HOLDING_TIME
        #define PINKY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_PINKY_CHORD_HOLDING_TIME
        #define LEFT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_PINKY_CHORD_HOLDING_TIME
        #define RIGHT_PINKY_CHORD_HOLDING_TIME PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef PINKY_STREAK_DECAY
        #define PINKY_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif
        #ifndef PINKY_CHORD_STREAK_DECAY
        #define PINKY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_PINKY_CHORD_STREAK_DECAY
        #define LEFT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_PINKY_CHORD_STREAK_DECAY
        #define RIGHT_PINKY_CHORD_STREAK_DECAY PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef PINKY_REPEAT_DECAY
        #define PINKY_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #endif
        #ifndef PINKY_CHORD_REPEAT_DECAY
        #define PINKY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
        #endif
        #ifndef LEFT_PINKY_CHORD_REPEAT_DECAY
        #define LEFT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
        #endif
        #ifndef RIGHT_PINKY_CHORD_REPEAT_DECAY
        #define RIGHT_PINKY_CHORD_REPEAT_DECAY PINKY_CHORD_REPEAT_DECAY
        #endif
        #ifndef RINGY_HOLDING_TYPE
        #define RINGY_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #endif
        #ifndef RINGY_CHORD_HOLDING_TYPE
        #define RINGY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_RINGY_CHORD_HOLDING_TYPE
        #define LEFT_RINGY_CHORD_HOLDING_TYPE RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_RINGY_CHORD_HOLDING_TYPE
        #define RIGHT_RINGY_CHORD_HOLDING_TYPE RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RINGY_HOLDING_TIME
        #define RINGY_HOLDING_TIME HOMEY_HOLDING_TIME
        #endif
        #ifndef RINGY_CHORD_HOLDING_TIME
        #define RINGY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_RINGY_CHORD_HOLDING_TIME
        #define LEFT_RINGY_CHORD_HOLDING_TIME RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_RINGY_CHORD_HOLDING_TIME
        #define RIGHT_RINGY_CHORD_HOLDING_TIME RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef RINGY_STREAK_DECAY
        #define RINGY_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif
        #ifndef RINGY_CHORD_STREAK_DECAY
        #define RINGY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_RINGY_CHORD_STREAK_DECAY
        #define LEFT_RINGY_CHORD_STREAK_DECAY RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_RINGY_CHORD_STREAK_DECAY
        #define RIGHT_RINGY_CHORD_STREAK_DECAY RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef RINGY_REPEAT_DECAY
        #define RINGY_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #endif
        #ifndef RINGY_CHORD_REPEAT_DECAY
        #define RINGY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
        #endif
        #ifndef LEFT_RINGY_CHORD_REPEAT_DECAY
        #define LEFT_RINGY_CHORD_REPEAT_DECAY RINGY_CHORD_REPEAT_DECAY
        #endif
        #ifndef RIGHT_RINGY_CHORD_REPEAT_DECAY
        #define RIGHT_RINGY_CHORD_REPEAT_DECAY RINGY_CHORD_REPEAT_DECAY
        #endif
        #ifndef MIDDY_HOLDING_TYPE
        #define MIDDY_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #endif
        #ifndef MIDDY_CHORD_HOLDING_TYPE
        #define MIDDY_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_MIDDY_CHORD_HOLDING_TYPE
        #define LEFT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_MIDDY_CHORD_HOLDING_TYPE
        #define RIGHT_MIDDY_CHORD_HOLDING_TYPE MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef MIDDY_HOLDING_TIME
        #define MIDDY_HOLDING_TIME HOMEY_HOLDING_TIME
        #endif
        #ifndef MIDDY_CHORD_HOLDING_TIME
        #define MIDDY_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_MIDDY_CHORD_HOLDING_TIME
        #define LEFT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_MIDDY_CHORD_HOLDING_TIME
        #define RIGHT_MIDDY_CHORD_HOLDING_TIME MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef MIDDY_STREAK_DECAY
        #define MIDDY_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif
        #ifndef MIDDY_CHORD_STREAK_DECAY
        #define MIDDY_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_MIDDY_CHORD_STREAK_DECAY
        #define LEFT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_MIDDY_CHORD_STREAK_DECAY
        #define RIGHT_MIDDY_CHORD_STREAK_DECAY MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef MIDDY_REPEAT_DECAY
        #define MIDDY_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #endif
        #ifndef MIDDY_CHORD_REPEAT_DECAY
        #define MIDDY_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
        #endif
        #ifndef LEFT_MIDDY_CHORD_REPEAT_DECAY
        #define LEFT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
        #endif
        #ifndef RIGHT_MIDDY_CHORD_REPEAT_DECAY
        #define RIGHT_MIDDY_CHORD_REPEAT_DECAY MIDDY_CHORD_REPEAT_DECAY
        #endif
        #ifndef INDEX_HOLDING_TYPE
        #define INDEX_HOLDING_TYPE HOMEY_HOLDING_TYPE
        #endif
        #ifndef INDEX_CHORD_HOLDING_TYPE
        #define INDEX_CHORD_HOLDING_TYPE CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_INDEX_CHORD_HOLDING_TYPE
        #define LEFT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_INDEX_CHORD_HOLDING_TYPE
        #define RIGHT_INDEX_CHORD_HOLDING_TYPE INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef INDEX_HOLDING_TIME
        #define INDEX_HOLDING_TIME HOMEY_HOLDING_TIME
        #endif
        #ifndef INDEX_CHORD_HOLDING_TIME
        #define INDEX_CHORD_HOLDING_TIME CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_INDEX_CHORD_HOLDING_TIME
        #define LEFT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_INDEX_CHORD_HOLDING_TIME
        #define RIGHT_INDEX_CHORD_HOLDING_TIME INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef INDEX_STREAK_DECAY
        #define INDEX_STREAK_DECAY HOMEY_STREAK_DECAY
        #endif
        #ifndef INDEX_CHORD_STREAK_DECAY
        #define INDEX_CHORD_STREAK_DECAY CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_INDEX_CHORD_STREAK_DECAY
        #define LEFT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_INDEX_CHORD_STREAK_DECAY
        #define RIGHT_INDEX_CHORD_STREAK_DECAY INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef INDEX_REPEAT_DECAY
        #define INDEX_REPEAT_DECAY HOMEY_REPEAT_DECAY
        #endif
        #ifndef INDEX_CHORD_REPEAT_DECAY
        #define INDEX_CHORD_REPEAT_DECAY CHORD_REPEAT_DECAY
        #endif
        #ifndef LEFT_INDEX_CHORD_REPEAT_DECAY
        #define LEFT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
        #endif
        #ifndef RIGHT_INDEX_CHORD_REPEAT_DECAY
        #define RIGHT_INDEX_CHORD_REPEAT_DECAY INDEX_CHORD_REPEAT_DECAY
        #endif
        #ifndef LEFT_PINKY_HOLDING_TYPE
        #define LEFT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
        #endif
        #ifndef LEFT_PINKY_HOLDING_TIME
        #define LEFT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
        #endif
        #ifndef LEFT_PINKY_STREAK_DECAY
        #define LEFT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
        #endif
        #ifndef LEFT_PINKY_REPEAT_DECAY
        #define LEFT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
        #endif
        left_pinky: homey_left_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_PINKY_MOD == LSFT || LEFT_PINKY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_pinky_bilateral: homey_left_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&left_pinky_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_PINKY_MOD == LSFT || LEFT_PINKY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_pinky_hold: homey_left_pinky_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftPinky
            , <&macro_press &mo LAYER_LeftPinky>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftPinky
            , <&macro_release &mo LAYER_LeftPinky>
            #endif
            ;
        };
        left_pinky_tap: homey_left_pinky_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_PINKY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define LeftPinky(key, layer_index) LeftPinky_unroll(layer_index) (key)
        #define LeftPinky_unroll(layer_index) LeftPinky_concat(LeftPinky_layer, layer_index)
        #define LeftPinky_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define left_pinky_layer0_variant left_pinky_bilateral
        #else
        #define left_pinky_layer0_variant left_pinky
        #endif
        #define LeftPinky_layer0(key) left_pinky_layer0_variant LEFT_PINKY_MOD key
        #define LeftPinky_layer1(key) left_pinky LEFT_PINKY_MOD key
        #define LeftPinky_layer2(key) left_pinky LEFT_PINKY_MOD key
        #define LeftPinky_layer3(key) left_pinky LEFT_PINKY_MOD key
        #define LeftPinky_layer4(key) left_pinky LEFT_PINKY_MOD key
        #define LeftPinky_layer5(key) left_pinky LEFT_PINKY_MOD key
        #define LeftPinky_layer6(key) left_pinky LEFT_PINKY_MOD key
        #define LeftPinky_layer7(key) left_pinky LEFT_PINKY_MOD key
        #ifndef RIGHT_PINKY_HOLDING_TYPE
        #define RIGHT_PINKY_HOLDING_TYPE PINKY_HOLDING_TYPE
        #endif
        #ifndef RIGHT_PINKY_HOLDING_TIME
        #define RIGHT_PINKY_HOLDING_TIME PINKY_HOLDING_TIME
        #endif
        #ifndef RIGHT_PINKY_STREAK_DECAY
        #define RIGHT_PINKY_STREAK_DECAY PINKY_STREAK_DECAY
        #endif
        #ifndef RIGHT_PINKY_REPEAT_DECAY
        #define RIGHT_PINKY_REPEAT_DECAY PINKY_REPEAT_DECAY
        #endif
        right_pinky: homey_right_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_PINKY_MOD == LSFT || RIGHT_PINKY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_pinky_bilateral: homey_right_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&right_pinky_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_PINKY_MOD == LSFT || RIGHT_PINKY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_pinky_hold: homey_right_pinky_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightPinky
            , <&macro_press &mo LAYER_RightPinky>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightPinky
            , <&macro_release &mo LAYER_RightPinky>
            #endif
            ;
        };
        right_pinky_tap: homey_right_pinky_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_PINKY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define RightPinky(key, layer_index) RightPinky_unroll(layer_index) (key)
        #define RightPinky_unroll(layer_index) RightPinky_concat(RightPinky_layer, layer_index)
        #define RightPinky_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define right_pinky_layer0_variant right_pinky_bilateral
        #else
        #define right_pinky_layer0_variant right_pinky
        #endif
        #define RightPinky_layer0(key) right_pinky_layer0_variant RIGHT_PINKY_MOD key
        #define RightPinky_layer1(key) right_pinky RIGHT_PINKY_MOD key
        #define RightPinky_layer2(key) right_pinky RIGHT_PINKY_MOD key
        #define RightPinky_layer3(key) right_pinky RIGHT_PINKY_MOD key
        #define RightPinky_layer4(key) right_pinky RIGHT_PINKY_MOD key
        #define RightPinky_layer5(key) right_pinky RIGHT_PINKY_MOD key
        #define RightPinky_layer6(key) right_pinky RIGHT_PINKY_MOD key
        #define RightPinky_layer7(key) right_pinky RIGHT_PINKY_MOD key
        #ifndef LEFT_RINGY_HOLDING_TYPE
        #define LEFT_RINGY_HOLDING_TYPE RINGY_HOLDING_TYPE
        #endif
        #ifndef LEFT_RINGY_HOLDING_TIME
        #define LEFT_RINGY_HOLDING_TIME RINGY_HOLDING_TIME
        #endif
        #ifndef LEFT_RINGY_STREAK_DECAY
        #define LEFT_RINGY_STREAK_DECAY RINGY_STREAK_DECAY
        #endif
        #ifndef LEFT_RINGY_REPEAT_DECAY
        #define LEFT_RINGY_REPEAT_DECAY RINGY_REPEAT_DECAY
        #endif
        left_ringy: homey_left_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_RINGY_MOD == LSFT || LEFT_RINGY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_ringy_bilateral: homey_left_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&left_ringy_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_RINGY_MOD == LSFT || LEFT_RINGY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_ringy_hold: homey_left_ringy_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftRingy
            , <&macro_press &mo LAYER_LeftRingy>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftRingy
            , <&macro_release &mo LAYER_LeftRingy>
            #endif
            ;
        };
        left_ringy_tap: homey_left_ringy_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_RINGY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define LeftRingy(key, layer_index) LeftRingy_unroll(layer_index) (key)
        #define LeftRingy_unroll(layer_index) LeftRingy_concat(LeftRingy_layer, layer_index)
        #define LeftRingy_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define left_ringy_layer0_variant left_ringy_bilateral
        #else
        #define left_ringy_layer0_variant left_ringy
        #endif
        #define LeftRingy_layer0(key) left_ringy_layer0_variant LEFT_RINGY_MOD key
        #define LeftRingy_layer1(key) left_ringy LEFT_RINGY_MOD key
        #define LeftRingy_layer2(key) left_ringy LEFT_RINGY_MOD key
        #define LeftRingy_layer3(key) left_ringy LEFT_RINGY_MOD key
        #define LeftRingy_layer4(key) left_ringy LEFT_RINGY_MOD key
        #define LeftRingy_layer5(key) left_ringy LEFT_RINGY_MOD key
        #define LeftRingy_layer6(key) left_ringy LEFT_RINGY_MOD key
        #define LeftRingy_layer7(key) left_ringy LEFT_RINGY_MOD key
        #ifndef RIGHT_RINGY_HOLDING_TYPE
        #define RIGHT_RINGY_HOLDING_TYPE RINGY_HOLDING_TYPE
        #endif
        #ifndef RIGHT_RINGY_HOLDING_TIME
        #define RIGHT_RINGY_HOLDING_TIME RINGY_HOLDING_TIME
        #endif
        #ifndef RIGHT_RINGY_STREAK_DECAY
        #define RIGHT_RINGY_STREAK_DECAY RINGY_STREAK_DECAY
        #endif
        #ifndef RIGHT_RINGY_REPEAT_DECAY
        #define RIGHT_RINGY_REPEAT_DECAY RINGY_REPEAT_DECAY
        #endif
        right_ringy: homey_right_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_RINGY_MOD == LSFT || RIGHT_RINGY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_ringy_bilateral: homey_right_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&right_ringy_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_RINGY_MOD == LSFT || RIGHT_RINGY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_ringy_hold: homey_right_ringy_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightRingy
            , <&macro_press &mo LAYER_RightRingy>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightRingy
            , <&macro_release &mo LAYER_RightRingy>
            #endif
            ;
        };
        right_ringy_tap: homey_right_ringy_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_RINGY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define RightRingy(key, layer_index) RightRingy_unroll(layer_index) (key)
        #define RightRingy_unroll(layer_index) RightRingy_concat(RightRingy_layer, layer_index)
        #define RightRingy_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define right_ringy_layer0_variant right_ringy_bilateral
        #else
        #define right_ringy_layer0_variant right_ringy
        #endif
        #define RightRingy_layer0(key) right_ringy_layer0_variant RIGHT_RINGY_MOD key
        #define RightRingy_layer1(key) right_ringy RIGHT_RINGY_MOD key
        #define RightRingy_layer2(key) right_ringy RIGHT_RINGY_MOD key
        #define RightRingy_layer3(key) right_ringy RIGHT_RINGY_MOD key
        #define RightRingy_layer4(key) right_ringy RIGHT_RINGY_MOD key
        #define RightRingy_layer5(key) right_ringy RIGHT_RINGY_MOD key
        #define RightRingy_layer6(key) right_ringy RIGHT_RINGY_MOD key
        #define RightRingy_layer7(key) right_ringy RIGHT_RINGY_MOD key
        #ifndef LEFT_MIDDY_HOLDING_TYPE
        #define LEFT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
        #endif
        #ifndef LEFT_MIDDY_HOLDING_TIME
        #define LEFT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
        #endif
        #ifndef LEFT_MIDDY_STREAK_DECAY
        #define LEFT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
        #endif
        #ifndef LEFT_MIDDY_REPEAT_DECAY
        #define LEFT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
        #endif
        left_middy: homey_left_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_MIDDY_MOD == LSFT || LEFT_MIDDY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_middy_bilateral: homey_left_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&left_middy_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_MIDDY_MOD == LSFT || LEFT_MIDDY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_middy_hold: homey_left_middy_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftMiddy
            , <&macro_press &mo LAYER_LeftMiddy>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftMiddy
            , <&macro_release &mo LAYER_LeftMiddy>
            #endif
            ;
        };
        left_middy_tap: homey_left_middy_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_MIDDY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define LeftMiddy(key, layer_index) LeftMiddy_unroll(layer_index) (key)
        #define LeftMiddy_unroll(layer_index) LeftMiddy_concat(LeftMiddy_layer, layer_index)
        #define LeftMiddy_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define left_middy_layer0_variant left_middy_bilateral
        #else
        #define left_middy_layer0_variant left_middy
        #endif
        #define LeftMiddy_layer0(key) left_middy_layer0_variant LEFT_MIDDY_MOD key
        #define LeftMiddy_layer1(key) left_middy LEFT_MIDDY_MOD key
        #define LeftMiddy_layer2(key) left_middy LEFT_MIDDY_MOD key
        #define LeftMiddy_layer3(key) left_middy LEFT_MIDDY_MOD key
        #define LeftMiddy_layer4(key) left_middy LEFT_MIDDY_MOD key
        #define LeftMiddy_layer5(key) left_middy LEFT_MIDDY_MOD key
        #define LeftMiddy_layer6(key) left_middy LEFT_MIDDY_MOD key
        #define LeftMiddy_layer7(key) left_middy LEFT_MIDDY_MOD key
        #ifndef RIGHT_MIDDY_HOLDING_TYPE
        #define RIGHT_MIDDY_HOLDING_TYPE MIDDY_HOLDING_TYPE
        #endif
        #ifndef RIGHT_MIDDY_HOLDING_TIME
        #define RIGHT_MIDDY_HOLDING_TIME MIDDY_HOLDING_TIME
        #endif
        #ifndef RIGHT_MIDDY_STREAK_DECAY
        #define RIGHT_MIDDY_STREAK_DECAY MIDDY_STREAK_DECAY
        #endif
        #ifndef RIGHT_MIDDY_REPEAT_DECAY
        #define RIGHT_MIDDY_REPEAT_DECAY MIDDY_REPEAT_DECAY
        #endif
        right_middy: homey_right_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_MIDDY_MOD == LSFT || RIGHT_MIDDY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_middy_bilateral: homey_right_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&right_middy_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_MIDDY_MOD == LSFT || RIGHT_MIDDY_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_middy_hold: homey_right_middy_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightMiddy
            , <&macro_press &mo LAYER_RightMiddy>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightMiddy
            , <&macro_release &mo LAYER_RightMiddy>
            #endif
            ;
        };
        right_middy_tap: homey_right_middy_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_MIDDY_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define RightMiddy(key, layer_index) RightMiddy_unroll(layer_index) (key)
        #define RightMiddy_unroll(layer_index) RightMiddy_concat(RightMiddy_layer, layer_index)
        #define RightMiddy_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define right_middy_layer0_variant right_middy_bilateral
        #else
        #define right_middy_layer0_variant right_middy
        #endif
        #define RightMiddy_layer0(key) right_middy_layer0_variant RIGHT_MIDDY_MOD key
        #define RightMiddy_layer1(key) right_middy RIGHT_MIDDY_MOD key
        #define RightMiddy_layer2(key) right_middy RIGHT_MIDDY_MOD key
        #define RightMiddy_layer3(key) right_middy RIGHT_MIDDY_MOD key
        #define RightMiddy_layer4(key) right_middy RIGHT_MIDDY_MOD key
        #define RightMiddy_layer5(key) right_middy RIGHT_MIDDY_MOD key
        #define RightMiddy_layer6(key) right_middy RIGHT_MIDDY_MOD key
        #define RightMiddy_layer7(key) right_middy RIGHT_MIDDY_MOD key
        #ifndef LEFT_INDEX_HOLDING_TYPE
        #define LEFT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
        #endif
        #ifndef LEFT_INDEX_HOLDING_TIME
        #define LEFT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
        #endif
        #ifndef LEFT_INDEX_STREAK_DECAY
        #define LEFT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
        #endif
        #ifndef LEFT_INDEX_REPEAT_DECAY
        #define LEFT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
        #endif
        left_index: homey_left_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_INDEX_MOD == LSFT || LEFT_INDEX_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_index_bilateral: homey_left_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&left_index_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if LEFT_INDEX_MOD == LSFT || LEFT_INDEX_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        left_index_hold: homey_left_index_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftIndex
            , <&macro_press &mo LAYER_LeftIndex>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_LeftIndex
            , <&macro_release &mo LAYER_LeftIndex>
            #endif
            ;
        };
        left_index_tap: homey_left_index_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp LEFT_INDEX_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define LeftIndex(key, layer_index) LeftIndex_unroll(layer_index) (key)
        #define LeftIndex_unroll(layer_index) LeftIndex_concat(LeftIndex_layer, layer_index)
        #define LeftIndex_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define left_index_layer0_variant left_index_bilateral
        #else
        #define left_index_layer0_variant left_index
        #endif
        #define LeftIndex_layer0(key) left_index_layer0_variant LEFT_INDEX_MOD key
        #define LeftIndex_layer1(key) left_index LEFT_INDEX_MOD key
        #define LeftIndex_layer2(key) left_index LEFT_INDEX_MOD key
        #define LeftIndex_layer3(key) left_index LEFT_INDEX_MOD key
        #define LeftIndex_layer4(key) left_index LEFT_INDEX_MOD key
        #define LeftIndex_layer5(key) left_index LEFT_INDEX_MOD key
        #define LeftIndex_layer6(key) left_index LEFT_INDEX_MOD key
        #define LeftIndex_layer7(key) left_index LEFT_INDEX_MOD key
        #ifndef RIGHT_INDEX_HOLDING_TYPE
        #define RIGHT_INDEX_HOLDING_TYPE INDEX_HOLDING_TYPE
        #endif
        #ifndef RIGHT_INDEX_HOLDING_TIME
        #define RIGHT_INDEX_HOLDING_TIME INDEX_HOLDING_TIME
        #endif
        #ifndef RIGHT_INDEX_STREAK_DECAY
        #define RIGHT_INDEX_STREAK_DECAY INDEX_STREAK_DECAY
        #endif
        #ifndef RIGHT_INDEX_REPEAT_DECAY
        #define RIGHT_INDEX_REPEAT_DECAY INDEX_REPEAT_DECAY
        #endif
        right_index: homey_right_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_INDEX_MOD == LSFT || RIGHT_INDEX_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_index_bilateral: homey_right_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&right_index_hold>, <&kp>;
            #ifdef SHIFT_FORGIVENESS
            #if RIGHT_INDEX_MOD == LSFT || RIGHT_INDEX_MOD == RSFT
            hold-while-undecided; // requires 24.08-beta1 or newer firmware
            retro-tap; // tap on standalone hold
            #endif
            #endif
        };
        right_index_hold: homey_right_index_hold {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightIndex
            , <&macro_press &mo LAYER_RightIndex>
            #endif
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            #ifdef LAYER_RightIndex
            , <&macro_release &mo LAYER_RightIndex>
            #endif
            ;
        };
        right_index_tap: homey_right_index_tap {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_release
                &kp LSFT &kp RSFT
                &kp LALT &kp RALT
                &kp LCTL &kp RCTL
                &kp LGUI &kp RGUI>
            , <&macro_tap &kp RIGHT_INDEX_KEY>
            , <&macro_param_1to1>
            , <&macro_tap &kp MACRO_PLACEHOLDER>
            ;
        };
        #define RightIndex(key, layer_index) RightIndex_unroll(layer_index) (key)
        #define RightIndex_unroll(layer_index) RightIndex_concat(RightIndex_layer, layer_index)
        #define RightIndex_concat(prefix, layer_index) prefix ## layer_index
        #ifdef ENFORCE_BILATERAL
        #define right_index_layer0_variant right_index_bilateral
        #else
        #define right_index_layer0_variant right_index
        #endif
        #define RightIndex_layer0(key) right_index_layer0_variant RIGHT_INDEX_MOD key
        #define RightIndex_layer1(key) right_index RIGHT_INDEX_MOD key
        #define RightIndex_layer2(key) right_index RIGHT_INDEX_MOD key
        #define RightIndex_layer3(key) right_index RIGHT_INDEX_MOD key
        #define RightIndex_layer4(key) right_index RIGHT_INDEX_MOD key
        #define RightIndex_layer5(key) right_index RIGHT_INDEX_MOD key
        #define RightIndex_layer6(key) right_index RIGHT_INDEX_MOD key
        #define RightIndex_layer7(key) right_index RIGHT_INDEX_MOD key
        #ifndef LEFT_RINGY_PINKY_HOLDING_TYPE
        #define LEFT_RINGY_PINKY_HOLDING_TYPE LEFT_RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_RINGY_PINKY_HOLDING_TIME
        #define LEFT_RINGY_PINKY_HOLDING_TIME LEFT_RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_RINGY_PINKY_STREAK_DECAY
        #define LEFT_RINGY_PINKY_STREAK_DECAY LEFT_RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_RINGY_PINKY_REPEAT_DECAY
        #define LEFT_RINGY_PINKY_REPEAT_DECAY LEFT_RINGY_CHORD_REPEAT_DECAY
        #endif
        left_ringy_pinky: homey_left_ringy_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_ringy_pinky_bilateral: homey_left_ringy_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_ringy_tap>;
        };
        #define LeftRingyPinky left_ringy_pinky_bilateral LEFT_PINKY_MOD LEFT_PINKY_KEY
        #ifndef LEFT_MIDDY_PINKY_HOLDING_TYPE
        #define LEFT_MIDDY_PINKY_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_MIDDY_PINKY_HOLDING_TIME
        #define LEFT_MIDDY_PINKY_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_MIDDY_PINKY_STREAK_DECAY
        #define LEFT_MIDDY_PINKY_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_MIDDY_PINKY_REPEAT_DECAY
        #define LEFT_MIDDY_PINKY_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
        #endif
        left_middy_pinky: homey_left_middy_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_middy_pinky_bilateral: homey_left_middy_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_middy_tap>;
        };
        #define LeftMiddyPinky left_middy_pinky_bilateral LEFT_PINKY_MOD LEFT_PINKY_KEY
        #ifndef LEFT_INDEX_PINKY_HOLDING_TYPE
        #define LEFT_INDEX_PINKY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_INDEX_PINKY_HOLDING_TIME
        #define LEFT_INDEX_PINKY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_INDEX_PINKY_STREAK_DECAY
        #define LEFT_INDEX_PINKY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_INDEX_PINKY_REPEAT_DECAY
        #define LEFT_INDEX_PINKY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
        #endif
        left_index_pinky: homey_left_index_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_index_pinky_bilateral: homey_left_index_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_index_tap>;
        };
        #define LeftIndexPinky left_index_pinky_bilateral LEFT_PINKY_MOD LEFT_PINKY_KEY
        #ifndef RIGHT_RINGY_PINKY_HOLDING_TYPE
        #define RIGHT_RINGY_PINKY_HOLDING_TYPE RIGHT_RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_RINGY_PINKY_HOLDING_TIME
        #define RIGHT_RINGY_PINKY_HOLDING_TIME RIGHT_RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_RINGY_PINKY_STREAK_DECAY
        #define RIGHT_RINGY_PINKY_STREAK_DECAY RIGHT_RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_RINGY_PINKY_REPEAT_DECAY
        #define RIGHT_RINGY_PINKY_REPEAT_DECAY RIGHT_RINGY_CHORD_REPEAT_DECAY
        #endif
        right_ringy_pinky: homey_right_ringy_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_ringy_pinky_bilateral: homey_right_ringy_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_ringy_tap>;
        };
        #define RightRingyPinky right_ringy_pinky_bilateral RIGHT_PINKY_MOD RIGHT_PINKY_KEY
        #ifndef RIGHT_MIDDY_PINKY_HOLDING_TYPE
        #define RIGHT_MIDDY_PINKY_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_MIDDY_PINKY_HOLDING_TIME
        #define RIGHT_MIDDY_PINKY_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_MIDDY_PINKY_STREAK_DECAY
        #define RIGHT_MIDDY_PINKY_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_MIDDY_PINKY_REPEAT_DECAY
        #define RIGHT_MIDDY_PINKY_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
        #endif
        right_middy_pinky: homey_right_middy_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_middy_pinky_bilateral: homey_right_middy_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_middy_tap>;
        };
        #define RightMiddyPinky right_middy_pinky_bilateral RIGHT_PINKY_MOD RIGHT_PINKY_KEY
        #ifndef RIGHT_INDEX_PINKY_HOLDING_TYPE
        #define RIGHT_INDEX_PINKY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_INDEX_PINKY_HOLDING_TIME
        #define RIGHT_INDEX_PINKY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_INDEX_PINKY_STREAK_DECAY
        #define RIGHT_INDEX_PINKY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_INDEX_PINKY_REPEAT_DECAY
        #define RIGHT_INDEX_PINKY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
        #endif
        right_index_pinky: homey_right_index_pinky {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_index_pinky_bilateral: homey_right_index_pinky_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_index_tap>;
        };
        #define RightIndexPinky right_index_pinky_bilateral RIGHT_PINKY_MOD RIGHT_PINKY_KEY
        #ifndef LEFT_PINKY_RINGY_HOLDING_TYPE
        #define LEFT_PINKY_RINGY_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_PINKY_RINGY_HOLDING_TIME
        #define LEFT_PINKY_RINGY_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_PINKY_RINGY_STREAK_DECAY
        #define LEFT_PINKY_RINGY_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_PINKY_RINGY_REPEAT_DECAY
        #define LEFT_PINKY_RINGY_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
        #endif
        left_pinky_ringy: homey_left_pinky_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_pinky_ringy_bilateral: homey_left_pinky_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_pinky_tap>;
        };
        #define LeftPinkyRingy left_pinky_ringy_bilateral LEFT_RINGY_MOD LEFT_RINGY_KEY
        #ifndef LEFT_MIDDY_RINGY_HOLDING_TYPE
        #define LEFT_MIDDY_RINGY_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_MIDDY_RINGY_HOLDING_TIME
        #define LEFT_MIDDY_RINGY_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_MIDDY_RINGY_STREAK_DECAY
        #define LEFT_MIDDY_RINGY_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_MIDDY_RINGY_REPEAT_DECAY
        #define LEFT_MIDDY_RINGY_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
        #endif
        left_middy_ringy: homey_left_middy_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_middy_ringy_bilateral: homey_left_middy_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_middy_tap>;
        };
        #define LeftMiddyRingy left_middy_ringy_bilateral LEFT_RINGY_MOD LEFT_RINGY_KEY
        #ifndef LEFT_INDEX_RINGY_HOLDING_TYPE
        #define LEFT_INDEX_RINGY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_INDEX_RINGY_HOLDING_TIME
        #define LEFT_INDEX_RINGY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_INDEX_RINGY_STREAK_DECAY
        #define LEFT_INDEX_RINGY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_INDEX_RINGY_REPEAT_DECAY
        #define LEFT_INDEX_RINGY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
        #endif
        left_index_ringy: homey_left_index_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_index_ringy_bilateral: homey_left_index_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_index_tap>;
        };
        #define LeftIndexRingy left_index_ringy_bilateral LEFT_RINGY_MOD LEFT_RINGY_KEY
        #ifndef RIGHT_PINKY_RINGY_HOLDING_TYPE
        #define RIGHT_PINKY_RINGY_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_PINKY_RINGY_HOLDING_TIME
        #define RIGHT_PINKY_RINGY_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_PINKY_RINGY_STREAK_DECAY
        #define RIGHT_PINKY_RINGY_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_PINKY_RINGY_REPEAT_DECAY
        #define RIGHT_PINKY_RINGY_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
        #endif
        right_pinky_ringy: homey_right_pinky_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_pinky_ringy_bilateral: homey_right_pinky_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_pinky_tap>;
        };
        #define RightPinkyRingy right_pinky_ringy_bilateral RIGHT_RINGY_MOD RIGHT_RINGY_KEY
        #ifndef RIGHT_MIDDY_RINGY_HOLDING_TYPE
        #define RIGHT_MIDDY_RINGY_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_MIDDY_RINGY_HOLDING_TIME
        #define RIGHT_MIDDY_RINGY_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_MIDDY_RINGY_STREAK_DECAY
        #define RIGHT_MIDDY_RINGY_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_MIDDY_RINGY_REPEAT_DECAY
        #define RIGHT_MIDDY_RINGY_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
        #endif
        right_middy_ringy: homey_right_middy_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_middy_ringy_bilateral: homey_right_middy_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_middy_tap>;
        };
        #define RightMiddyRingy right_middy_ringy_bilateral RIGHT_RINGY_MOD RIGHT_RINGY_KEY
        #ifndef RIGHT_INDEX_RINGY_HOLDING_TYPE
        #define RIGHT_INDEX_RINGY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_INDEX_RINGY_HOLDING_TIME
        #define RIGHT_INDEX_RINGY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_INDEX_RINGY_STREAK_DECAY
        #define RIGHT_INDEX_RINGY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_INDEX_RINGY_REPEAT_DECAY
        #define RIGHT_INDEX_RINGY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
        #endif
        right_index_ringy: homey_right_index_ringy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_index_ringy_bilateral: homey_right_index_ringy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_index_tap>;
        };
        #define RightIndexRingy right_index_ringy_bilateral RIGHT_RINGY_MOD RIGHT_RINGY_KEY
        #ifndef LEFT_PINKY_MIDDY_HOLDING_TYPE
        #define LEFT_PINKY_MIDDY_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_PINKY_MIDDY_HOLDING_TIME
        #define LEFT_PINKY_MIDDY_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_PINKY_MIDDY_STREAK_DECAY
        #define LEFT_PINKY_MIDDY_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_PINKY_MIDDY_REPEAT_DECAY
        #define LEFT_PINKY_MIDDY_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
        #endif
        left_pinky_middy: homey_left_pinky_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_pinky_middy_bilateral: homey_left_pinky_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_pinky_tap>;
        };
        #define LeftPinkyMiddy left_pinky_middy_bilateral LEFT_MIDDY_MOD LEFT_MIDDY_KEY
        #ifndef LEFT_RINGY_MIDDY_HOLDING_TYPE
        #define LEFT_RINGY_MIDDY_HOLDING_TYPE LEFT_RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_RINGY_MIDDY_HOLDING_TIME
        #define LEFT_RINGY_MIDDY_HOLDING_TIME LEFT_RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_RINGY_MIDDY_STREAK_DECAY
        #define LEFT_RINGY_MIDDY_STREAK_DECAY LEFT_RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_RINGY_MIDDY_REPEAT_DECAY
        #define LEFT_RINGY_MIDDY_REPEAT_DECAY LEFT_RINGY_CHORD_REPEAT_DECAY
        #endif
        left_ringy_middy: homey_left_ringy_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_ringy_middy_bilateral: homey_left_ringy_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_ringy_tap>;
        };
        #define LeftRingyMiddy left_ringy_middy_bilateral LEFT_MIDDY_MOD LEFT_MIDDY_KEY
        #ifndef LEFT_INDEX_MIDDY_HOLDING_TYPE
        #define LEFT_INDEX_MIDDY_HOLDING_TYPE LEFT_INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_INDEX_MIDDY_HOLDING_TIME
        #define LEFT_INDEX_MIDDY_HOLDING_TIME LEFT_INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_INDEX_MIDDY_STREAK_DECAY
        #define LEFT_INDEX_MIDDY_STREAK_DECAY LEFT_INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_INDEX_MIDDY_REPEAT_DECAY
        #define LEFT_INDEX_MIDDY_REPEAT_DECAY LEFT_INDEX_CHORD_REPEAT_DECAY
        #endif
        left_index_middy: homey_left_index_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_index_middy_bilateral: homey_left_index_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <LEFT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_index_tap>;
        };
        #define LeftIndexMiddy left_index_middy_bilateral LEFT_MIDDY_MOD LEFT_MIDDY_KEY
        #ifndef RIGHT_PINKY_MIDDY_HOLDING_TYPE
        #define RIGHT_PINKY_MIDDY_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_PINKY_MIDDY_HOLDING_TIME
        #define RIGHT_PINKY_MIDDY_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_PINKY_MIDDY_STREAK_DECAY
        #define RIGHT_PINKY_MIDDY_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_PINKY_MIDDY_REPEAT_DECAY
        #define RIGHT_PINKY_MIDDY_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
        #endif
        right_pinky_middy: homey_right_pinky_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_pinky_middy_bilateral: homey_right_pinky_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_pinky_tap>;
        };
        #define RightPinkyMiddy right_pinky_middy_bilateral RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
        #ifndef RIGHT_RINGY_MIDDY_HOLDING_TYPE
        #define RIGHT_RINGY_MIDDY_HOLDING_TYPE RIGHT_RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_RINGY_MIDDY_HOLDING_TIME
        #define RIGHT_RINGY_MIDDY_HOLDING_TIME RIGHT_RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_RINGY_MIDDY_STREAK_DECAY
        #define RIGHT_RINGY_MIDDY_STREAK_DECAY RIGHT_RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_RINGY_MIDDY_REPEAT_DECAY
        #define RIGHT_RINGY_MIDDY_REPEAT_DECAY RIGHT_RINGY_CHORD_REPEAT_DECAY
        #endif
        right_ringy_middy: homey_right_ringy_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_ringy_middy_bilateral: homey_right_ringy_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_ringy_tap>;
        };
        #define RightRingyMiddy right_ringy_middy_bilateral RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
        #ifndef RIGHT_INDEX_MIDDY_HOLDING_TYPE
        #define RIGHT_INDEX_MIDDY_HOLDING_TYPE RIGHT_INDEX_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_INDEX_MIDDY_HOLDING_TIME
        #define RIGHT_INDEX_MIDDY_HOLDING_TIME RIGHT_INDEX_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_INDEX_MIDDY_STREAK_DECAY
        #define RIGHT_INDEX_MIDDY_STREAK_DECAY RIGHT_INDEX_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_INDEX_MIDDY_REPEAT_DECAY
        #define RIGHT_INDEX_MIDDY_REPEAT_DECAY RIGHT_INDEX_CHORD_REPEAT_DECAY
        #endif
        right_index_middy: homey_right_index_middy {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_index_middy_bilateral: homey_right_index_middy_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_INDEX_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_INDEX_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_INDEX_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_INDEX_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_index_tap>;
        };
        #define RightIndexMiddy right_index_middy_bilateral RIGHT_MIDDY_MOD RIGHT_MIDDY_KEY
        #ifndef LEFT_PINKY_INDEX_HOLDING_TYPE
        #define LEFT_PINKY_INDEX_HOLDING_TYPE LEFT_PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_PINKY_INDEX_HOLDING_TIME
        #define LEFT_PINKY_INDEX_HOLDING_TIME LEFT_PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_PINKY_INDEX_STREAK_DECAY
        #define LEFT_PINKY_INDEX_STREAK_DECAY LEFT_PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_PINKY_INDEX_REPEAT_DECAY
        #define LEFT_PINKY_INDEX_REPEAT_DECAY LEFT_PINKY_CHORD_REPEAT_DECAY
        #endif
        left_pinky_index: homey_left_pinky_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_pinky_index_bilateral: homey_left_pinky_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_pinky_tap>;
        };
        #define LeftPinkyIndex left_pinky_index_bilateral LEFT_INDEX_MOD LEFT_INDEX_KEY
        #ifndef LEFT_RINGY_INDEX_HOLDING_TYPE
        #define LEFT_RINGY_INDEX_HOLDING_TYPE LEFT_RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_RINGY_INDEX_HOLDING_TIME
        #define LEFT_RINGY_INDEX_HOLDING_TIME LEFT_RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_RINGY_INDEX_STREAK_DECAY
        #define LEFT_RINGY_INDEX_STREAK_DECAY LEFT_RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_RINGY_INDEX_REPEAT_DECAY
        #define LEFT_RINGY_INDEX_REPEAT_DECAY LEFT_RINGY_CHORD_REPEAT_DECAY
        #endif
        left_ringy_index: homey_left_ringy_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_ringy_index_bilateral: homey_left_ringy_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_ringy_tap>;
        };
        #define LeftRingyIndex left_ringy_index_bilateral LEFT_INDEX_MOD LEFT_INDEX_KEY
        #ifndef LEFT_MIDDY_INDEX_HOLDING_TYPE
        #define LEFT_MIDDY_INDEX_HOLDING_TYPE LEFT_MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef LEFT_MIDDY_INDEX_HOLDING_TIME
        #define LEFT_MIDDY_INDEX_HOLDING_TIME LEFT_MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef LEFT_MIDDY_INDEX_STREAK_DECAY
        #define LEFT_MIDDY_INDEX_STREAK_DECAY LEFT_MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef LEFT_MIDDY_INDEX_REPEAT_DECAY
        #define LEFT_MIDDY_INDEX_REPEAT_DECAY LEFT_MIDDY_CHORD_REPEAT_DECAY
        #endif
        left_middy_index: homey_left_middy_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        left_middy_index_bilateral: homey_left_middy_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = LEFT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <LEFT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <LEFT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <LEFT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&left_middy_tap>;
        };
        #define LeftMiddyIndex left_middy_index_bilateral LEFT_INDEX_MOD LEFT_INDEX_KEY
        #ifndef RIGHT_PINKY_INDEX_HOLDING_TYPE
        #define RIGHT_PINKY_INDEX_HOLDING_TYPE RIGHT_PINKY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_PINKY_INDEX_HOLDING_TIME
        #define RIGHT_PINKY_INDEX_HOLDING_TIME RIGHT_PINKY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_PINKY_INDEX_STREAK_DECAY
        #define RIGHT_PINKY_INDEX_STREAK_DECAY RIGHT_PINKY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_PINKY_INDEX_REPEAT_DECAY
        #define RIGHT_PINKY_INDEX_REPEAT_DECAY RIGHT_PINKY_CHORD_REPEAT_DECAY
        #endif
        right_pinky_index: homey_right_pinky_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_pinky_index_bilateral: homey_right_pinky_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_PINKY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_PINKY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_PINKY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_PINKY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_pinky_tap>;
        };
        #define RightPinkyIndex right_pinky_index_bilateral RIGHT_INDEX_MOD RIGHT_INDEX_KEY
        #ifndef RIGHT_RINGY_INDEX_HOLDING_TYPE
        #define RIGHT_RINGY_INDEX_HOLDING_TYPE RIGHT_RINGY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_RINGY_INDEX_HOLDING_TIME
        #define RIGHT_RINGY_INDEX_HOLDING_TIME RIGHT_RINGY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_RINGY_INDEX_STREAK_DECAY
        #define RIGHT_RINGY_INDEX_STREAK_DECAY RIGHT_RINGY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_RINGY_INDEX_REPEAT_DECAY
        #define RIGHT_RINGY_INDEX_REPEAT_DECAY RIGHT_RINGY_CHORD_REPEAT_DECAY
        #endif
        right_ringy_index: homey_right_ringy_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_ringy_index_bilateral: homey_right_ringy_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_RINGY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_RINGY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_RINGY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_RINGY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_ringy_tap>;
        };
        #define RightRingyIndex right_ringy_index_bilateral RIGHT_INDEX_MOD RIGHT_INDEX_KEY
        #ifndef RIGHT_MIDDY_INDEX_HOLDING_TYPE
        #define RIGHT_MIDDY_INDEX_HOLDING_TYPE RIGHT_MIDDY_CHORD_HOLDING_TYPE
        #endif
        #ifndef RIGHT_MIDDY_INDEX_HOLDING_TIME
        #define RIGHT_MIDDY_INDEX_HOLDING_TIME RIGHT_MIDDY_CHORD_HOLDING_TIME
        #endif
        #ifndef RIGHT_MIDDY_INDEX_STREAK_DECAY
        #define RIGHT_MIDDY_INDEX_STREAK_DECAY RIGHT_MIDDY_CHORD_STREAK_DECAY
        #endif
        #ifndef RIGHT_MIDDY_INDEX_REPEAT_DECAY
        #define RIGHT_MIDDY_INDEX_REPEAT_DECAY RIGHT_MIDDY_CHORD_REPEAT_DECAY
        #endif
        right_middy_index: homey_right_middy_index {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
        right_middy_index_bilateral: homey_right_middy_index_bilateral {
            compatible = "zmk,behavior-hold-tap";
            flavor = RIGHT_MIDDY_HOLDING_TYPE;
            hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
            hold-trigger-on-release; // wait for other home row mods
            tapping-term-ms = <RIGHT_MIDDY_HOLDING_TIME>;
            quick-tap-ms = <RIGHT_MIDDY_REPEAT_DECAY>;
            require-prior-idle-ms = <RIGHT_MIDDY_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&kp>, <&right_middy_tap>;
        };
        #define RightMiddyIndex right_middy_index_bilateral RIGHT_INDEX_MOD RIGHT_INDEX_KEY

        //
        // Key repetition access keys on the index fingers
        //
        plain: plain_typing_layer {
            compatible = "zmk,behavior-hold-tap";
            flavor = PLAIN_HOLDING_TYPE;
            tapping-term-ms = <PLAIN_HOLDING_TIME>;
            quick-tap-ms = <PLAIN_REPEAT_DECAY>; // enable repeat
            require-prior-idle-ms = <PLAIN_STREAK_DECAY>;
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            retro-tap; // tap on standalone hold
        };

        //
        // Thumb cluster hold-tap keys for Miryoku layers
        //
        thumb: thumb_layer_access {
            compatible = "zmk,behavior-hold-tap";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };
        thumb_parang_left: thumb_layer_access_parang_left {
            compatible = "zmk,behavior-hold-tap";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&parang_left>;
        };
        crumb: thumb_layer_access_retro_tap {
            compatible = "zmk,behavior-hold-tap";
            flavor = THUMB_HOLDING_TYPE;
            tapping-term-ms = <THUMB_HOLDING_TIME>;
            quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            #ifdef THUMB_FORGIVENESS
            retro-tap;
            #endif
        };
        space: thumb_layer_access_spacebar {
            compatible = "zmk,behavior-hold-tap";
            flavor = SPACE_HOLDING_TYPE;
            tapping-term-ms = <SPACE_HOLDING_TIME>;
            quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
            #ifdef SPACE_FORGIVENESS
            retro-tap; // tap on standalone hold
            #endif
        };

        //
        // Shift + LEFT_PARENTHESIS = LESS_THAN
        //
        parang_left: left_parenthesis_and_less_than {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        //
  // Shift + RIGHT_PARENTHESIS = GREATER_THAN
  //
  parang_right: right_parenthesis_and_greater_than {
    compatible = "zmk,behavior-mod-morph";
    #binding-cells = <0>;
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
  };

    };

    combos {
        compatible = "zmk,combos";

        //
        // COMBO_FIRING_DECAY defines how much time you have left (milliseconds)
        // after pressing the first key in a ZMK combo to finish the whole chord.
        //
        #ifndef COMBO_FIRING_DECAY
        #define COMBO_FIRING_DECAY 50
        #endif
        
        #ifdef _A_TAB
        combo_alt_tab_switcher {
            timeout-ms = <COMBO_FIRING_DECAY>;
            key-positions = <76 70>; // BACKSPACE (position 76) + ESC (position 70)
            bindings = <&mod_tab_chord _A_TAB LAYER_Cursor>;
            layers = <0 1 2 3 4 5 6 7>;
        };
        #endif

        combo_sticky_hyper_right {
            timeout-ms = <COMBO_FIRING_DECAY>;
            key-positions = <75 81>; // ENTER (position 75) + SPACE (position 81)
            bindings = <&sk LG(LA(LC(LSHFT)))>;
            layers = <0 1 2 3 4 5 6 7>;
        };

        // à -> as combo
        combo_world_a_base_perso {
            timeout-ms = <COMBO_FIRING_DECAY>;
            key-positions = <49 50 >; // a (position 49) + s (position 50)
            bindings = <&world_a_base_perso>;
            layers = <0>;
        };
    };

    macros {

        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                <&bt BT_SEL 3>;
        };

        //
        // Linux Magic System Request Key - hold this down and type REISUB
        // - https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
        // - https://github.com/manna-harbour/miryoku/discussions/259
        //
        ZMK_MACRO(linux_magic_sysrq,
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
            = <&macro_press &mo 0 &kp RALT>
            , <&macro_tap &kp PRINTSCREEN>
            , <&macro_pause_for_release>
            , <&macro_release &mo 0 &kp RALT>
            ;
        )

        //
        // Mod+Tab application switcher - hold this down to keep menu open
        //
        mod_tab: mod_tab_switcher {
            compatible = "zmk,behavior-macro-one-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <1>;
            bindings
            = <&macro_param_1to1>
            , <&macro_press &kp MACRO_PLACEHOLDER>
            , <&macro_tap &kp TAB>
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &kp MACRO_PLACEHOLDER>
            ;
        };
        mod_tab_chord: mod_tab_switcher_chord {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings
            = <&macro_param_2to1>
            , <&macro_press &mo MACRO_PLACEHOLDER>
            , <&macro_param_1to1>
            , <&macro_press &mod_tab MACRO_PLACEHOLDER>
            , <&macro_pause_for_release>
            , <&macro_param_1to1>
            , <&macro_release &mod_tab MACRO_PLACEHOLDER>
            , <&macro_param_2to1>
            , <&macro_release &mo MACRO_PLACEHOLDER>
            ;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // Approximation of Pascal Getreuer's Select Word macro from QMK
        // - https://getreuer.info/posts/keyboards/select-word/index.html
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
        // after moving the cursor before it selects a word.  A larger delay
        // may allow the macro to move to the next word upon each invocation.
        //
        #ifndef SELECT_WORD_DELAY
        #define SELECT_WORD_DELAY 1
        #endif

        #define select_all kp _C(A)

        ZMK_MACRO(select_none,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        )

        //
        // select a word (jumps to next word upon each successive invocation)
        //
        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_word_right>, <&select_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
        )
        ZMK_MACRO(select_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
        )

        //
        // extend current selection by one word
        //
        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_word_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LS(RIGHT))>;
        )
        ZMK_MACRO(extend_word_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _W(LS(LEFT))>;
        )

        //
        // select current line
        //
        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(select_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _HOME &kp LS(_END)>;
        )
        ZMK_MACRO(select_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp _END &kp LS(_HOME)>;
        )

        //
        // extend current selection by one line
        //
        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ZMK_MACRO(extend_line_right,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(DOWN) &kp LS(_END)>;
        )
        ZMK_MACRO(extend_line_left,
            wait-ms = <SELECT_WORD_DELAY>;
            tap-ms = <SELECT_WORD_DELAY>;
            bindings = <&kp LS(UP) &kp LS(_HOME)>;
        )

        //////////////////////////////////////////////////////////////////////////
        //
        // World layer - international characters
        //
        //////////////////////////////////////////////////////////////////////////

        //
        // WORLD_USE_COMPOSE uses OS-native Compose keycodes instead of Unicode
        // for characters in the "compositions" section of the `world.yaml` file.
        //
        //#define WORLD_USE_COMPOSE

        //
        // WORLD_HOST_AZERTY indicates that your computer is set to AZERTY locale.
        //
        //#define WORLD_HOST_AZERTY
        #ifdef WORLD_HOST_AZERTY
            #define WORLD_SHIFT_NUMBER
            #define _NA Q
        #endif

        //
        // WORLD_SHIFT_NUMBER indicates that Shift must be applied when typing out
        // digits from the number row, which is needed for locales such as AZERTY.
        //
        //#define WORLD_SHIFT_NUMBER
        #ifdef WORLD_SHIFT_NUMBER
            #define _N0 LS(N0)
            #define _N1 LS(N1)
            #define _N2 LS(N2)
            #define _N3 LS(N3)
            #define _N4 LS(N4)
            #define _N5 LS(N5)
            #define _N6 LS(N6)
            #define _N7 LS(N7)
            #define _N8 LS(N8)
            #define _N9 LS(N9)
        #endif

        //
        // UNICODE_TAP_DELAY defines how long the macro waits (milliseconds)
        // between keystrokes while inputting the Unicode codepoint shortcut.
        //
        #ifndef UNICODE_TAP_DELAY
        #define UNICODE_TAP_DELAY 1
        #endif

        //
        // UNICODE_SEQ_DELAY defines how long the macro waits (milliseconds)
        // between emitting Unicode codepoints in multi-codepoint characters.
        //
        #ifndef UNICODE_SEQ_DELAY
        #define UNICODE_SEQ_DELAY 10
        #endif

        #define UNICODE(name, ...) \
            ZMK_MACRO(name, \
            wait-ms = <UNICODE_TAP_DELAY>; \
            tap-ms = <UNICODE_TAP_DELAY>; \
            bindings = __VA_ARGS__; \
            )

        //
        // UNICODE_SEQ_LINUX() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under Linux.
        //
        #ifndef UNICODE_SEQ_LINUX
        #define UNICODE_SEQ_LINUX(keystrokes) \
            <&macro_tap &kp LC(LS(U)) keystrokes &kp ENTER>
        #endif

        //
        // UNICODE_SEQ_MACOS() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under macOS.
        //
        #ifndef UNICODE_SEQ_MACOS
        #define UNICODE_SEQ_MACOS(keystrokes) \
            <&macro_press &kp LALT> ,\
            <&macro_tap keystrokes> ,\
            <&macro_release &kp LALT>
        #endif

        //
        // UNICODE_SEQ_WINDOWS() specifies how Unicode hexadecimal codepoint
        // keystrokes are transformed into Unicode characters under Windows.
        //
        // If you've configured WinCompose to use a different trigger hotkey,
        // such as F13 instead of the default RA(U) shortcut, simply override
        // this definition to adapt all UNICODE() function calls accordingly.
        //
        #ifndef UNICODE_SEQ_WINDOWS
        #define UNICODE_SEQ_WINDOWS(keystrokes) \
            <&macro_tap &kp RALT &kp U keystrokes &kp ENTER>
        #endif

        //
        // COMPOSE_KEY_LINUX specifies the keycode for Compose key in Linux,
        // which may be RALT by default but can be reconfigured as follows:
        //
        // $ setxkbmap -option compose:sclk # use ScrollLock as Compose key
        //
        // See xkeyboard-config(7) for possible choices for the Compose key:
        // https://manpages.debian.org/stable/xkb-data/xkeyboard-config.7.en.html#Position_of_Compose_key
        //
        // #define COMPOSE_KEY_LINUX RALT            // compose:ralt
        // #define COMPOSE_KEY_LINUX LGUI            // compose:lwin
        // #define COMPOSE_KEY_LINUX RA(LGUI)        // compose:lwin-altgr
        // #define COMPOSE_KEY_LINUX RGUI            // compose:rwin
        // #define COMPOSE_KEY_LINUX RA(RGUI)        // compose:rwin-altgr
        // #define COMPOSE_KEY_LINUX K_MENU          // compose:menu
        // #define COMPOSE_KEY_LINUX RA(K_MENU)      // compose:menu-altgr
        // #define COMPOSE_KEY_LINUX LCTL            // compose:lctrl
        // #define COMPOSE_KEY_LINUX RA(LCTL)        // compose:lctrl-altgr
        // #define COMPOSE_KEY_LINUX RCTL            // compose:rctrl
        // #define COMPOSE_KEY_LINUX RA(RCTL)        // compose:rctrl-altgr
        // #define COMPOSE_KEY_LINUX CAPS            // compose:caps
        // #define COMPOSE_KEY_LINUX RA(CAPS)        // compose:caps-altgr
        // #define COMPOSE_KEY_LINUX NON_US_BSLH     // compose:102
        // #define COMPOSE_KEY_LINUX RA(NON_US_BSLH) // compose:102-altgr
        // #define COMPOSE_KEY_LINUX PAUSE_BREAK     // compose:paus
        // #define COMPOSE_KEY_LINUX PSCRN           // compose:prsc
        // #define COMPOSE_KEY_LINUX SLCK            // compose:sclk
        //
        #ifndef COMPOSE_KEY_LINUX
        #define COMPOSE_KEY_LINUX RALT
        #endif

        //
        // COMPOSE_SEQ_LINUX() prefixes keystrokes with the Linux Compose key.
        //
        #ifndef COMPOSE_SEQ_LINUX
        #define COMPOSE_SEQ_LINUX(keystrokes) \
            <&macro_tap &kp COMPOSE_KEY_LINUX keystrokes>
        #endif

        //
        // COMPOSE_SEQ_MACOS() formats keystrokes for macOS character entry.
        //
        #ifndef COMPOSE_SEQ_MACOS
        #define COMPOSE_SEQ_MACOS(keystrokes) \
            <&macro_tap keystrokes>
        #endif

        //
        // COMPOSE_SEQ_WINDOWS() wraps keystrokes in Windows AltCode sequence.
        //
        #ifndef COMPOSE_SEQ_WINDOWS
        #define COMPOSE_SEQ_WINDOWS(keystrokes) \
            <&macro_press &kp LALT>, \
            <&macro_tap keystrokes>, \
            <&macro_release &kp LALT>
        #endif
        #if OPERATING_SYSTEM == 'L'
            #define UNICODE_MORPH_MODS (MOD_LCTL|MOD_LSFT)
        #elif OPERATING_SYSTEM == 'M'
            #define UNICODE_MORPH_MODS MOD_LALT
        #elif OPERATING_SYSTEM == 'W'
            #define UNICODE_MORPH_MODS MOD_RALT
        #endif
        #if OPERATING_SYSTEM == 'L'
            // $ grep "compose:" /usr/share/X11/xkb/rules/base.lst
            // compose:ralt         Right Alt
            #if COMPOSE_KEY_LINUX == RALT
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:lwin         Left Win
            #elif COMPOSE_KEY_LINUX == LGUI
            #define COMPOSE_MORPH_MODS MOD_LGUI
            // compose:lwin-altgr   3rd level of Left Win
            #elif COMPOSE_KEY_LINUX == RA(LGUI)
            #define COMPOSE_MORPH_MODS (MOD_LGUI|MOD_RALT)
            // compose:rwin         Right Win
            #elif COMPOSE_KEY_LINUX == RGUI
            #define COMPOSE_MORPH_MODS MOD_RGUI
            // compose:rwin-altgr   3rd level of Right Win
            #elif COMPOSE_KEY_LINUX == RA(RGUI)
            #define COMPOSE_MORPH_MODS (MOD_RGUI|MOD_RALT)
            // compose:menu         Menu
            // compose:menu-altgr   3rd level of Menu
            #elif COMPOSE_KEY_LINUX == RA(K_MENU)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:lctrl        Left Ctrl
            #elif COMPOSE_KEY_LINUX == LCTL
            #define COMPOSE_MORPH_MODS MOD_LCTL
            // compose:lctrl-altgr  3rd level of Left Ctrl
            #elif COMPOSE_KEY_LINUX == RA(LCTL)
            #define COMPOSE_MORPH_MODS (MOD_LCTL|MOD_RALT)
            // compose:rctrl        Right Ctrl
            #elif COMPOSE_KEY_LINUX == RCTL
            #define COMPOSE_MORPH_MODS MOD_RCTL
            // compose:rctrl-altgr  3rd level of Right Ctrl
            #elif COMPOSE_KEY_LINUX == RA(RCTL)
            #define COMPOSE_MORPH_MODS (MOD_RCTL|MOD_RALT)
            // compose:caps         Caps Lock
            // compose:caps-altgr   3rd level of Caps Lock
            #elif COMPOSE_KEY_LINUX == RA(CAPS)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:102          The "&lt; &gt;" key
            // compose:102-altgr    3rd level of the "&lt; &gt;" key
            #elif COMPOSE_KEY_LINUX == RA(NON_US_BSLH)
            #define COMPOSE_MORPH_MODS MOD_RALT
            // compose:paus         Pause
            // compose:prsc         PrtSc
            // compose:sclk         Scroll Lock
            #else
            #define COMPOSE_MORPH_MODS 0
            #endif
        #elif OPERATING_SYSTEM == 'M'
            #define COMPOSE_MORPH_MODS 0
        #elif OPERATING_SYSTEM == 'W'
            #define COMPOSE_MORPH_MODS MOD_LALT
        #endif
        #ifndef _N0
        #define _N0 N0
        #endif
        #ifndef _N1
        #define _N1 N1
        #endif
        #ifndef _N2
        #define _N2 N2
        #endif
        #ifndef _N3
        #define _N3 N3
        #endif
        #ifndef _N4
        #define _N4 N4
        #endif
        #ifndef _N5
        #define _N5 N5
        #endif
        #ifndef _N6
        #define _N6 N6
        #endif
        #ifndef _N7
        #define _N7 N7
        #endif
        #ifndef _N8
        #define _N8 N8
        #endif
        #ifndef _N9
        #define _N9 N9
        #endif
        #ifndef _NA
        #define _NA A
        #endif
        #ifndef _NB
        #define _NB B
        #endif
        #ifndef _NC
        #define _NC C
        #endif
        #ifndef _ND
        #define _ND D
        #endif
        #ifndef _NE
        #define _NE E
        #endif
        #ifndef _NF
        #define _NF F
        #endif

        //
        // NOTE: edit the world.yaml file and run `rake` to generate this:
        //

        //
        // codepoints
        //
        UNICODE(world_degree_sign_macro, /* ° */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_LINUX(&kp O &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_MACOS(&kp LA(LS(N8)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_degree_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N0)
            #endif
            #endif
        )
        world_degree_sign: world_degree_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_degree_sign_macro>, <&world_degree_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_degree_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_section_sign_macro, /* § */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_LINUX(&kp S &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_MACOS(&kp LA(N6))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_section_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N7)
            #endif
            #endif
        )
        world_section_sign: world_section_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_section_sign_macro>, <&world_section_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_section_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_paragraph_sign_macro, /* ¶ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_LINUX(&kp P &kp EXCL)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_MACOS(&kp LA(N7))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_paragraph_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N6)
            #endif
            #endif
        )
        world_paragraph_sign: world_paragraph_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_paragraph_sign_macro>, <&world_paragraph_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_paragraph_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_ordinal_macro, /* º */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_MACOS(&kp LA(N0))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_ordinal
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NA)
            #endif
            #endif
        )
        world_o_ordinal: world_o_ordinal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_ordinal_macro>, <&world_o_ordinal_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_ordinal
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_ordinal_macro, /* ª */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_LINUX(&kp CARET &kp UNDER &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_MACOS(&kp LA(N9))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ordinal
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NA)
            #endif
            #endif
        )
        world_a_ordinal: world_a_ordinal {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ordinal_macro>, <&world_a_ordinal_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ordinal
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_exclaim_left_macro, /* ¡ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_LINUX(&kp EXCL &kp EXCL)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_MACOS(&kp LA(N1))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_exclaim_left
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N1)
            #endif
            #endif
        )
        world_exclaim_left: world_exclaim_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_exclaim_left_macro>, <&world_exclaim_left_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_exclaim_left
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_question_left_macro, /* ¿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_LINUX(&kp QMARK &kp QMARK)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_MACOS(&kp LA(LS(FSLH)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_question_left
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NF)
            #endif
            #endif
        )
        world_question_left: world_question_left {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_question_left_macro>, <&world_question_left_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_question_left
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_crypto_macro, /* ₿ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NB &kp _NF)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NB &kp _NF)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NB &kp _NF)
            #endif
        )
        world_currency_crypto: world_currency_crypto {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_crypto_macro>, <&world_currency_crypto_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_crypto
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_cent_macro, /* ¢ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N2)
            #endif
        )
        world_currency_cent: world_currency_cent {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_cent_macro>, <&world_currency_cent_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_cent
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_sign_macro, /* ¤ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N4)
            #endif
        )
        world_currency_sign: world_currency_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_sign_macro>, <&world_currency_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_micro_sign_macro, /* µ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_LINUX(&kp M &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NB &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_MACOS(&kp LA(M))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_micro_sign
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N8 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N5)
            #endif
            #endif
        )
        world_micro_sign: world_micro_sign {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_micro_sign_macro>, <&world_micro_sign_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_micro_sign
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };

        //
        // characters
        //
        UNICODE(world_i_acute_lower_macro, /* í */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _ND)
            #endif
            #endif
        )
        world_i_acute_lower: world_i_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_lower_macro>, <&world_i_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_acute_upper_macro, /* Í */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _ND)
            #endif
            #endif
        )
        world_i_acute_upper: world_i_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_upper_macro>, <&world_i_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_acute: world_i_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute_lower>, <&world_i_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_diaeresis_lower_macro, /* ï */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NF)
            #endif
            #endif
        )
        world_i_diaeresis_lower: world_i_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_lower_macro>, <&world_i_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_diaeresis_upper_macro, /* Ï */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NF)
            #endif
            #endif
        )
        world_i_diaeresis_upper: world_i_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_upper_macro>, <&world_i_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_diaeresis: world_i_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis_lower>, <&world_i_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_circumflex_lower_macro, /* î */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NE)
            #endif
            #endif
        )
        world_i_circumflex_lower: world_i_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_lower_macro>, <&world_i_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_circumflex_upper_macro, /* Î */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NE)
            #endif
            #endif
        )
        world_i_circumflex_upper: world_i_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_upper_macro>, <&world_i_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_circumflex: world_i_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex_lower>, <&world_i_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_i_grave_lower_macro, /* ì */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp I)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp I)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NC)
            #endif
            #endif
        )
        world_i_grave_lower: world_i_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_lower_macro>, <&world_i_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_i_grave_upper_macro, /* Ì */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(I))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(I))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_i_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NC)
            #endif
            #endif
        )
        world_i_grave_upper: world_i_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_upper_macro>, <&world_i_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_i_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_i_grave: world_i_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_grave_lower>, <&world_i_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_acute_lower_macro, /* é */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N9)
            #endif
            #endif
        )
        world_e_acute_lower: world_e_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_lower_macro>, <&world_e_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_acute_upper_macro, /* É */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N9)
            #endif
            #endif
        )
        world_e_acute_upper: world_e_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_upper_macro>, <&world_e_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_acute: world_e_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute_lower>, <&world_e_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_diaeresis_lower_macro, /* ë */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NB)
            #endif
            #endif
        )
        world_e_diaeresis_lower: world_e_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_lower_macro>, <&world_e_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_diaeresis_upper_macro, /* Ë */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NB)
            #endif
            #endif
        )
        world_e_diaeresis_upper: world_e_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_upper_macro>, <&world_e_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_diaeresis: world_e_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis_lower>, <&world_e_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_circumflex_lower_macro, /* ê */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _NA)
            #endif
            #endif
        )
        world_e_circumflex_lower: world_e_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_lower_macro>, <&world_e_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_circumflex_upper_macro, /* Ê */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _NA)
            #endif
            #endif
        )
        world_e_circumflex_upper: world_e_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_upper_macro>, <&world_e_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_circumflex: world_e_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex_lower>, <&world_e_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_grave_lower_macro, /* è */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp E)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N8)
            #endif
            #endif
        )
        world_e_grave_lower: world_e_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_lower_macro>, <&world_e_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_grave_upper_macro, /* È */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(E))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N8)
            #endif
            #endif
        )
        world_e_grave_upper: world_e_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_upper_macro>, <&world_e_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_grave: world_e_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave_lower>, <&world_e_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_oe_lower_macro, /* œ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N5 &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N5 &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N5 &kp _N3)
            #endif
        )
        world_e_oe_lower: world_e_oe_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower_macro>, <&world_e_oe_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_oe_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_oe_upper_macro, /* Œ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N5 &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N5 &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N5 &kp _N2)
            #endif
        )
        world_e_oe_upper: world_e_oe_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_upper_macro>, <&world_e_oe_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_oe_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_oe: world_e_oe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower>, <&world_e_oe_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_e_ae_lower_macro, /* æ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_LINUX(&kp A &kp E)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_MACOS(&kp LA(SQT))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N6)
            #endif
            #endif
        )
        world_e_ae_lower: world_e_ae_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_lower_macro>, <&world_e_ae_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_e_ae_upper_macro, /* Æ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_LINUX(&kp LS(A) &kp LS(E))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(SQT)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_e_ae_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N6)
            #endif
            #endif
        )
        world_e_ae_upper: world_e_ae_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_upper_macro>, <&world_e_ae_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_e_ae_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_e_ae: world_e_ae {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae_lower>, <&world_e_ae_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_acute_lower_macro, /* á */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N1)
            #endif
            #endif
        )
        world_a_acute_lower: world_a_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_lower_macro>, <&world_a_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_acute_upper_macro, /* Á */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N1)
            #endif
            #endif
        )
        world_a_acute_upper: world_a_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_upper_macro>, <&world_a_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_acute: world_a_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute_lower>, <&world_a_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_diaeresis_lower_macro, /* ä */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N4)
            #endif
            #endif
        )
        world_a_diaeresis_lower: world_a_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_lower_macro>, <&world_a_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_diaeresis_upper_macro, /* Ä */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N4)
            #endif
            #endif
        )
        world_a_diaeresis_upper: world_a_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_upper_macro>, <&world_a_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_diaeresis: world_a_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis_lower>, <&world_a_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_circumflex_lower_macro, /* â */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N2)
            #endif
            #endif
        )
        world_a_circumflex_lower: world_a_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_lower_macro>, <&world_a_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_circumflex_upper_macro, /* Â */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N2)
            #endif
            #endif
        )
        world_a_circumflex_upper: world_a_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_upper_macro>, <&world_a_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_circumflex: world_a_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex_lower>, <&world_a_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_grave_lower_macro, /* à */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N0)
            #endif
            #endif
        )
        world_a_grave_lower: world_a_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_lower_macro>, <&world_a_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_grave_upper_macro, /* À */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N0)
            #endif
            #endif
        )
        world_a_grave_upper: world_a_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_upper_macro>, <&world_a_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_grave: world_a_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave_lower>, <&world_a_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_tilde_lower_macro, /* ã */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp A)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N3)
            #endif
            #endif
        )
        world_a_tilde_lower: world_a_tilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_lower_macro>, <&world_a_tilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_tilde_upper_macro, /* Ã */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N3)
            #endif
            #endif
        )
        world_a_tilde_upper: world_a_tilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_upper_macro>, <&world_a_tilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_tilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_tilde: world_a_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde_lower>, <&world_a_tilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_a_ring_lower_macro, /* å */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_LINUX(&kp O &kp A)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_MACOS(&kp LA(A))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N5)
            #endif
            #endif
        )
        world_a_ring_lower: world_a_ring_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_lower_macro>, <&world_a_ring_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_a_ring_upper_macro, /* Å */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_LINUX(&kp O &kp LS(A))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(A)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_a_ring_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N5)
            #endif
            #endif
        )
        world_a_ring_upper: world_a_ring_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_upper_macro>, <&world_a_ring_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_a_ring_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_a_ring: world_a_ring {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring_lower>, <&world_a_ring_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_y_acute_lower_macro, /* ý */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp Y)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp Y)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _ND)
            #endif
            #endif
        )
        world_y_acute_lower: world_y_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_lower_macro>, <&world_y_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_y_acute_upper_macro, /* Ý */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(Y))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(Y))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _ND)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _ND)
            #endif
            #endif
        )
        world_y_acute_upper: world_y_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_upper_macro>, <&world_y_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_y_acute: world_y_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute_lower>, <&world_y_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_y_diaeresis_lower_macro, /* ÿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp Y)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp Y)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NF)
            #endif
            #endif
        )
        world_y_diaeresis_lower: world_y_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_lower_macro>, <&world_y_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_y_diaeresis_upper_macro, /* Ÿ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(Y))
            #else
            UNICODE_SEQ_LINUX(&kp _N1 &kp _N7 &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(Y))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N1 &kp _N7 &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _N7 &kp _N8)
            #endif
            #endif
        )
        world_y_diaeresis_upper: world_y_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_upper_macro>, <&world_y_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_y_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_y_diaeresis: world_y_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_diaeresis_lower>, <&world_y_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_acute_lower_macro, /* ó */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N3)
            #endif
            #endif
        )
        world_o_acute_lower: world_o_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_lower_macro>, <&world_o_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_acute_upper_macro, /* Ó */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N3)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N3)
            #endif
            #endif
        )
        world_o_acute_upper: world_o_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_upper_macro>, <&world_o_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_acute: world_o_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute_lower>, <&world_o_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_diaeresis_lower_macro, /* ö */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N6)
            #endif
            #endif
        )
        world_o_diaeresis_lower: world_o_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_lower_macro>, <&world_o_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_diaeresis_upper_macro, /* Ö */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N6)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N6)
            #endif
            #endif
        )
        world_o_diaeresis_upper: world_o_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_upper_macro>, <&world_o_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_diaeresis: world_o_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis_lower>, <&world_o_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_circumflex_lower_macro, /* ô */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N4)
            #endif
            #endif
        )
        world_o_circumflex_lower: world_o_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_lower_macro>, <&world_o_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_circumflex_upper_macro, /* Ô */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N4)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N4)
            #endif
            #endif
        )
        world_o_circumflex_upper: world_o_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_upper_macro>, <&world_o_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_circumflex: world_o_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex_lower>, <&world_o_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_grave_lower_macro, /* ò */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N2)
            #endif
            #endif
        )
        world_o_grave_lower: world_o_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_lower_macro>, <&world_o_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_grave_upper_macro, /* Ò */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N2)
            #endif
            #endif
        )
        world_o_grave_upper: world_o_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_upper_macro>, <&world_o_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_grave: world_o_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_grave_lower>, <&world_o_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_tilde_lower_macro, /* õ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp O)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N5)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N5)
            #endif
            #endif
        )
        world_o_tilde_lower: world_o_tilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_lower_macro>, <&world_o_tilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_tilde_upper_macro, /* Õ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N5)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N5)
            #endif
            #endif
        )
        world_o_tilde_upper: world_o_tilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_upper_macro>, <&world_o_tilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_tilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_tilde: world_o_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde_lower>, <&world_o_tilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_o_slash_lower_macro, /* ø */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_LINUX(&kp FSLH &kp O)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_MACOS(&kp LA(O))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N8)
            #endif
            #endif
        )
        world_o_slash_lower: world_o_slash_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_lower_macro>, <&world_o_slash_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_o_slash_upper_macro, /* Ø */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_LINUX(&kp FSLH &kp LS(O))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(O)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N8)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_o_slash_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N6)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N8)
            #endif
            #endif
        )
        world_o_slash_upper: world_o_slash_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_upper_macro>, <&world_o_slash_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_o_slash_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_o_slash: world_o_slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash_lower>, <&world_o_slash_upper>;
            mods = <MOD_LSFT>;
        };
        world_o_oe: world_o_oe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe_lower>, <&world_e_oe_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_acute_lower_macro, /* ú */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_LINUX(&kp SQT &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NA)
            #endif
            #endif
        )
        world_u_acute_lower: world_u_acute_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_lower_macro>, <&world_u_acute_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_acute_upper_macro, /* Ú */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_LINUX(&kp SQT &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_MACOS(&kp LA(E) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NA)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_acute_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NA)
            #endif
            #endif
        )
        world_u_acute_upper: world_u_acute_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_upper_macro>, <&world_u_acute_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_acute_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_acute: world_u_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute_lower>, <&world_u_acute_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_diaeresis_lower_macro, /* ü */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_LINUX(&kp DQT &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NC)
            #endif
            #endif
        )
        world_u_diaeresis_lower: world_u_diaeresis_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_lower_macro>, <&world_u_diaeresis_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_diaeresis_upper_macro, /* Ü */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_LINUX(&kp DQT &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_MACOS(&kp LA(U) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N0)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NC)
            #endif
            #endif
        )
        world_u_diaeresis_upper: world_u_diaeresis_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_upper_macro>, <&world_u_diaeresis_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_diaeresis_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_diaeresis: world_u_diaeresis {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis_lower>, <&world_u_diaeresis_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_circumflex_lower_macro, /* û */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_LINUX(&kp CARET &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NB)
            #endif
            #endif
        )
        world_u_circumflex_lower: world_u_circumflex_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_lower_macro>, <&world_u_circumflex_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_circumflex_upper_macro, /* Û */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_LINUX(&kp CARET &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_MACOS(&kp LA(I) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NB)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NB)
            #endif
            #endif
        )
        world_u_circumflex_upper: world_u_circumflex_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_upper_macro>, <&world_u_circumflex_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_circumflex_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_circumflex: world_u_circumflex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex_lower>, <&world_u_circumflex_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_u_grave_lower_macro, /* ù */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp U)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp U)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N9)
            #endif
            #endif
        )
        world_u_grave_lower: world_u_grave_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_lower_macro>, <&world_u_grave_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_u_grave_upper_macro, /* Ù */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_LINUX(&kp GRAVE &kp LS(U))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_MACOS(&kp LA(GRAVE) &kp LS(U))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_u_grave_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N7)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N9)
            #endif
            #endif
        )
        world_u_grave_upper: world_u_grave_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_upper_macro>, <&world_u_grave_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_u_grave_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_u_grave: world_u_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave_lower>, <&world_u_grave_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_cedilla_lower_macro, /* ç */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_LINUX(&kp COMMA &kp C)
            #else
            UNICODE_SEQ_LINUX(&kp _NE &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_MACOS(&kp LA(C))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NE &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NE &kp _N7)
            #endif
            #endif
        )
        world_consonants_cedilla_lower: world_consonants_cedilla_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_lower_macro>, <&world_consonants_cedilla_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_cedilla_upper_macro, /* Ç */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_LINUX(&kp COMMA &kp LS(C))
            #else
            UNICODE_SEQ_LINUX(&kp _NC &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(C)))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NC &kp _N7)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NC &kp _N7)
            #endif
            #endif
        )
        world_consonants_cedilla_upper: world_consonants_cedilla_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_upper_macro>, <&world_consonants_cedilla_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_cedilla_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_cedilla: world_consonants_cedilla {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla_lower>, <&world_consonants_cedilla_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_eszett_lower_macro, /* ß */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_LINUX(&kp S &kp S)
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_MACOS(&kp LA(S))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _NF)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _NF)
            #endif
            #endif
        )
        world_consonants_eszett_lower: world_consonants_eszett_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_lower_macro>, <&world_consonants_eszett_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_eszett_upper_macro, /* ẞ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
            COMPOSE_SEQ_LINUX(&kp LS(S) &kp LS(S))
            #else
            UNICODE_SEQ_LINUX(&kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
            COMPOSE_SEQ_MACOS(&kp LA(LS(S)))
            #else
            UNICODE_SEQ_MACOS(&kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N1 &kp _NE &kp _N9 &kp _NE)
            #endif
        )
        world_consonants_eszett_upper: world_consonants_eszett_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_upper_macro>, <&world_consonants_eszett_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_eszett_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_eszett: world_consonants_eszett {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_eszett_lower>, <&world_consonants_eszett_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_consonants_ntilde_lower_macro, /* ñ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_LINUX(&kp TILDE &kp N)
            #else
            UNICODE_SEQ_LINUX(&kp _NF &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp N)
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NF &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N1)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _N1)
            #endif
            #endif
        )
        world_consonants_ntilde_lower: world_consonants_ntilde_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_lower_macro>, <&world_consonants_ntilde_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_consonants_ntilde_upper_macro, /* Ñ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_LINUX(&kp TILDE &kp LS(N))
            #else
            UNICODE_SEQ_LINUX(&kp _ND &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_MACOS(&kp LA(N) &kp LS(N))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _ND &kp _N1)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _ND &kp _N1)
            #endif
            #endif
        )
        world_consonants_ntilde_upper: world_consonants_ntilde_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_upper_macro>, <&world_consonants_ntilde_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_consonants_ntilde_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_consonants_ntilde: world_consonants_ntilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde_lower>, <&world_consonants_ntilde_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_angle_lower_macro, /* ‹ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N3 &kp _N9)
            #endif
        )
        world_quotes_left_angle_lower: world_quotes_left_angle_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_lower_macro>, <&world_quotes_left_angle_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_angle_upper_macro, /* « */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _NB)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NB)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NB)
            #endif
        )
        world_quotes_left_angle_upper: world_quotes_left_angle_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_upper_macro>, <&world_quotes_left_angle_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_angle_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_angle: world_quotes_left_angle {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle_lower>, <&world_quotes_left_angle_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_curly_lower_macro, /* ‘ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _N8)
            #endif
        )
        world_quotes_left_curly_lower: world_quotes_left_curly_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_lower_macro>, <&world_quotes_left_curly_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_curly_upper_macro, /* “ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NC)
            #endif
        )
        world_quotes_left_curly_upper: world_quotes_left_curly_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_upper_macro>, <&world_quotes_left_curly_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_curly_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_curly: world_quotes_left_curly {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly_lower>, <&world_quotes_left_curly_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_low_lower_macro, /* ‚ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NA)
            #endif
        )
        world_quotes_left_low_lower: world_quotes_left_low_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower_macro>, <&world_quotes_left_low_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_low_upper_macro, /* „ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _NE)
            #endif
        )
        world_quotes_left_low_upper: world_quotes_left_low_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_upper_macro>, <&world_quotes_left_low_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_low_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_low: world_quotes_left_low {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_corner1_lower_macro, /* 「 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NC)
            #endif
        )
        world_quotes_left_corner1_lower: world_quotes_left_corner1_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_lower_macro>, <&world_quotes_left_corner1_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_corner1_upper_macro, /* ﹁ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N1)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N1)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N1)
            #endif
        )
        world_quotes_left_corner1_upper: world_quotes_left_corner1_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_upper_macro>, <&world_quotes_left_corner1_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner1_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_corner1: world_quotes_left_corner1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1_lower>, <&world_quotes_left_corner1_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_corner2_lower_macro, /* 『 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NE)
            #endif
        )
        world_quotes_left_corner2_lower: world_quotes_left_corner2_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_lower_macro>, <&world_quotes_left_corner2_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_left_corner2_upper_macro, /* ﹃ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N3)
            #endif
        )
        world_quotes_left_corner2_upper: world_quotes_left_corner2_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_upper_macro>, <&world_quotes_left_corner2_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_corner2_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_left_corner2: world_quotes_left_corner2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2_lower>, <&world_quotes_left_corner2_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_left_grave_macro, /* ` */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N6 &kp _N0)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _N6 &kp _N0)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N6 &kp _N0)
            #endif
        )
        world_quotes_left_grave: world_quotes_left_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_grave_macro>, <&world_quotes_left_grave_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_left_grave
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_angle_lower_macro, /* › */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N3 &kp _NA)
            #endif
        )
        world_quotes_right_angle_lower: world_quotes_right_angle_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_lower_macro>, <&world_quotes_right_angle_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_angle_upper_macro, /* » */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NB &kp _NB)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _NB)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _NB)
            #endif
        )
        world_quotes_right_angle_upper: world_quotes_right_angle_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_upper_macro>, <&world_quotes_right_angle_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_angle_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_angle: world_quotes_right_angle {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle_lower>, <&world_quotes_right_angle_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_curly_lower_macro, /* ’ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _N9)
            #endif
        )
        world_quotes_right_curly_lower: world_quotes_right_curly_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_lower_macro>, <&world_quotes_right_curly_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_curly_upper_macro, /* ” */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _N1 &kp _ND)
            #endif
        )
        world_quotes_right_curly_upper: world_quotes_right_curly_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_upper_macro>, <&world_quotes_right_curly_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_curly_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_curly: world_quotes_right_curly {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly_lower>, <&world_quotes_right_curly_upper>;
            mods = <MOD_LSFT>;
        };
        world_quotes_right_low: world_quotes_right_low {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low_lower>, <&world_quotes_left_low_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_corner1_lower_macro, /* 」 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _ND)
            #endif
        )
        world_quotes_right_corner1_lower: world_quotes_right_corner1_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_lower_macro>, <&world_quotes_right_corner1_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_corner1_upper_macro, /* ﹂ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N2)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N2)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N2)
            #endif
        )
        world_quotes_right_corner1_upper: world_quotes_right_corner1_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_upper_macro>, <&world_quotes_right_corner1_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner1_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_corner1: world_quotes_right_corner1 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1_lower>, <&world_quotes_right_corner1_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_corner2_lower_macro, /* 』 */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N3 &kp _N0 &kp _N0 &kp _NF)
            #endif
        )
        world_quotes_right_corner2_lower: world_quotes_right_corner2_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_lower_macro>, <&world_quotes_right_corner2_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_quotes_right_corner2_upper_macro, /* ﹄ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NF &kp _NE &kp _N4 &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _NF &kp _NE &kp _N4 &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NF &kp _NE &kp _N4 &kp _N4)
            #endif
        )
        world_quotes_right_corner2_upper: world_quotes_right_corner2_upper {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_upper_macro>, <&world_quotes_right_corner2_upper_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_corner2_upper
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_quotes_right_corner2: world_quotes_right_corner2 {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2_lower>, <&world_quotes_right_corner2_upper>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_quotes_right_grave_macro, /* ´ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NB &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NB &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NB &kp _N4)
            #endif
        )
        world_quotes_right_grave: world_quotes_right_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_grave_macro>, <&world_quotes_right_grave_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_quotes_right_grave
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_dollar_lower_macro, /* $ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N4)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _N2 &kp _N4)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N4)
            #endif
        )
        world_currency_dollar_lower: world_currency_dollar_lower {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar_lower_macro>, <&world_currency_dollar_lower_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_dollar_lower
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_currency_dollar: world_currency_dollar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar_lower>, <&world_currency_cent>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_currency_yen_macro, /* ¥ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N5)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N5)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N5)
            #endif
        )
        world_currency_yen: world_currency_yen {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_yen_macro>, <&world_currency_yen_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_yen
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_euro_macro, /* € */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_LINUX(&kp E &kp EQUAL)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_MACOS(&kp LA(LS(N2)))
            #else
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_currency_euro
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N8)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NA &kp _NC)
            #endif
            #endif
        )
        world_currency_euro: world_currency_euro {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_euro_macro>, <&world_currency_euro_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_euro
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_won_macro, /* ₩ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N0 &kp _NA &kp _N9)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N0 &kp _NA &kp _N9)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N0 &kp _NA &kp _N9)
            #endif
        )
        world_currency_won: world_currency_won {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_won_macro>, <&world_currency_won_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_won
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_currency_pound_macro, /* £ */
            #if OPERATING_SYSTEM == 'L'
            UNICODE_SEQ_LINUX(&kp _NA &kp _N3)
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N3)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N3)
            #endif
        )
        world_currency_pound: world_currency_pound {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_pound_macro>, <&world_currency_pound_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_currency_pound
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_currency_generic: world_currency_generic {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_sign>, <&world_currency_crypto>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_sign_copyright_regular_macro, /* © */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_LINUX(&kp O &kp C)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_MACOS(&kp LA(G))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _N9)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N6 &kp KP_N9)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _N9)
            #endif
            #endif
        )
        world_sign_copyright_regular: world_sign_copyright_regular {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_regular_macro>, <&world_sign_copyright_regular_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_copyright_regular
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_sign_copyright_shifted_macro, /* ® */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_LINUX(&kp O &kp R)
            #else
            UNICODE_SEQ_LINUX(&kp _NA &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_MACOS(&kp LA(R))
            #else
            UNICODE_SEQ_MACOS(&kp _N0 &kp _N0 &kp _NA &kp _NE)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N7 &kp KP_N4)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _NA &kp _NE)
            #endif
            #endif
        )
        world_sign_copyright_shifted: world_sign_copyright_shifted {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_shifted_macro>, <&world_sign_copyright_shifted_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_copyright_shifted
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_sign_copyright: world_sign_copyright {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright_regular>, <&world_sign_copyright_shifted>;
            mods = <MOD_LSFT>;
        };
        UNICODE(world_sign_trademark_regular_macro, /* ™ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_LINUX(&kp T &kp M)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_MACOS(&kp LA(N2))
            #else
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #elif OPERATING_SYSTEM == 'W'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
            COMPOSE_SEQ_WINDOWS(&kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N3)
            #else
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N1 &kp _N2 &kp _N2)
            #endif
            #endif
        )
        world_sign_trademark_regular: world_sign_trademark_regular {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_regular_macro>, <&world_sign_trademark_regular_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_trademark_regular
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        UNICODE(world_sign_trademark_shifted_macro, /* ℠ */
            #if OPERATING_SYSTEM == 'L'
            #ifdef WORLD_USE_COMPOSE
            #define WORLD_USE_COMPOSE_FOR_world_sign_trademark_shifted
            COMPOSE_SEQ_LINUX(&kp S &kp M)
            #else
            UNICODE_SEQ_LINUX(&kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #endif
            #elif OPERATING_SYSTEM == 'M'
            UNICODE_SEQ_MACOS(&kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #elif OPERATING_SYSTEM == 'W'
            UNICODE_SEQ_WINDOWS(&kp _N0 &kp _N2 &kp _N1 &kp _N2 &kp _N0)
            #endif
        )
        world_sign_trademark_shifted: world_sign_trademark_shifted {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_shifted_macro>, <&world_sign_trademark_shifted_macro>;
            mods = <(~(
        #ifdef WORLD_USE_COMPOSE_FOR_world_sign_trademark_shifted
        COMPOSE_MORPH_MODS
        #else
        UNICODE_MORPH_MODS
        #endif
        ))>;
        };
        world_sign_trademark: world_sign_trademark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_trademark_regular>, <&world_sign_trademark_shifted>;
            mods = <MOD_LSFT>;
        };

        //
        // transforms
        //
        world_i_base: world_i_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_acute>, <&world_i_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_i_LCTL: world_i_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_diaeresis>, <&world_i_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_i_RCTL: world_i_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_i_circumflex>, <&world_i_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_e_base: world_e_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_acute>, <&world_e_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_LALT: world_e_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_oe>, <&world_e_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_RALT: world_e_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae>, <&world_e_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_e_LCTL: world_e_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis>, <&world_e_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_e_RCTL: world_e_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex>, <&world_e_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_a_base: world_a_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_acute>, <&world_a_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_LALT: world_a_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde>, <&world_a_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_RALT: world_a_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring>, <&world_a_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_a_LCTL: world_a_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis>, <&world_a_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_a_RCTL: world_a_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex>, <&world_a_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_y_base: world_y_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_y_acute>, <&world_y_diaeresis>;
            mods = <(MOD_LCTL)>;
        };
        world_o_base: world_o_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_acute>, <&world_o_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_LALT: world_o_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_tilde>, <&world_o_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_RALT: world_o_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_slash>, <&world_o_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_o_LCTL: world_o_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_diaeresis>, <&world_o_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_o_RCTL: world_o_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_o_circumflex>, <&world_o_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_u_base: world_u_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_acute>, <&world_u_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_u_LCTL: world_u_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_u_RCTL: world_u_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex>, <&world_u_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_consonants_base: world_consonants_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla>, <&world_consonants_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
        world_consonants_LCTL: world_consonants_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_ntilde>, <&world_consonants_eszett>;
            mods = <(MOD_RCTL)>;
        };
        world_quotes_left_base: world_quotes_left_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_angle>, <&world_quotes_left_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_LALT: world_quotes_left_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner1>, <&world_quotes_left_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_RALT: world_quotes_left_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_corner2>, <&world_quotes_left_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_LCTL: world_quotes_left_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_curly>, <&world_quotes_left_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_left_RCTL: world_quotes_left_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_left_low>, <&world_quotes_left_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_quotes_right_base: world_quotes_right_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_angle>, <&world_quotes_right_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_LALT: world_quotes_right_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner1>, <&world_quotes_right_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_RALT: world_quotes_right_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_corner2>, <&world_quotes_right_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_LCTL: world_quotes_right_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_curly>, <&world_quotes_right_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_quotes_right_RCTL: world_quotes_right_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_quotes_right_low>, <&world_quotes_right_grave>;
            mods = <(MOD_RSFT)>;
        };
        world_currency_base: world_currency_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_dollar>, <&world_currency_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_LALT: world_currency_LALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_yen>, <&world_currency_RALT>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_RALT: world_currency_RALT {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_won>, <&world_currency_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_LCTL: world_currency_LCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_euro>, <&world_currency_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
        world_currency_RCTL: world_currency_RCTL {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_currency_pound>, <&world_currency_generic>;
            mods = <(MOD_RSFT)>;
        };
        world_sign_base: world_sign_base {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_sign_copyright>, <&world_sign_trademark>;
            mods = <(MOD_LCTL)>;
        };

        //////////////////////////////////////////////////////////////////////////
        //
        // Emoji layer - modern age pictograms
        //
        //////////////////////////////////////////////////////////////////////////

        // On ne prend pas les Emoji


        //////////////////////////////////////////////////////////////////////////
        ///
        /// Autre macro 
        ///
        //////////////////////////////////////////////////////////////////////////
        focus_left_group: focus_left_group {
            label = "&focus_left_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp H>;
        };

        focus_right_group: focus_right_group {
            label = "&focus_right_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp L>;
        };

        focus_up_group: focus_up_group {
            label = "&focus_up_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp K>;
        };

        focus_down_group: focus_down_group {
            label = "&focus_down_group";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp J>;
        };

        /* Spit windows editort */
        split_editor_vertical: split_editor_vertical {
            label = "&split_editor_vertical";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp V>;
        };

        split_editor_horizontal: split_editor_horizontal {
            label = "&split_editor_horizontal";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(E)>
                , <&kp S>;
        };

        // To increase / decrease current view VsCode
        increase_vscode_view: increase_vscode_view {
            label = "&increase_vscode_view";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(T)>
                , <&kp KP_PLUS>;
        };

        decrease_vscode_view: decrease_vscode_view {
            label = "&decrease_vscode_view";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <5>;
            tap-ms = <5>;
            bindings
                = <&macro_tap>
                , <&kp LC(T)>
                , <&kp KP_MINUS>;
        };
        //////////////////////////////////////////////////////////////////////////
        ///
        /// Autre macro 
        ///
        //////////////////////////////////////////////////////////////////////////
        // Update to have "à" in default.
        world_a_base_perso: world_a_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_grave>, <&world_a_LALT>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_LALT_perso: world_a_LALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_tilde>, <&world_a_RALT_perso>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_RALT_perso: world_a_RALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_ring>, <&world_a_LCTL_perso>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_a_LCTL_perso: world_a_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_diaeresis>, <&world_a_RCTL_perso>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_a_RCTL_perso: world_a_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_a_circumflex>, <&world_a_acute>;
            mods = <(MOD_RSFT)>;
        };
            // For ç
            world_consonants_base_perso: world_consonants_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_consonants_cedilla>, <&world_consonants_cedilla_upper>;
            mods = <(MOD_LALT|MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            // Update to have "è" in default.
            world_e_base_perso: world_e_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_grave>, <&world_e_RALT_perso>;
            mods = <(MOD_RALT|MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_e_RALT_perso: world_e_RALT_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_ae>, <&world_e_LCTL_perso>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_e_LCTL_perso: world_e_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_diaeresis>, <&world_e_RCTL_perso>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_e_RCTL_perso: world_e_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_e_circumflex>, <&world_e_acute>;
            mods = <(MOD_RSFT)>;
        };
            // For u and have defaut "ù"
            world_u_base_perso: world_u_base_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_grave>, <&world_u_LCTL>;
            mods = <(MOD_LCTL|MOD_RCTL|MOD_RSFT)>;
        };
            world_u_LCTL_perso: world_u_LCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_diaeresis>, <&world_u_RCTL>;
            mods = <(MOD_RCTL|MOD_RSFT)>;
        };
            world_u_RCTL_perso: world_u_RCTL_perso {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&world_u_circumflex>, <&world_u_grave>;
            mods = <(MOD_RSFT)>;
        };

    };

    ////////////////////////////////////////////////////////////////
    /// Keymap configuration
    ////////////////////////////////////////////////////////////////

    keymap {
        compatible = "zmk,keymap";

        layer_QWERTY {
            bindings = <
&none  &none                         &none                         &none                         &none                           &none                                    &none       &none                          &none                           &none                          &none                          &none
&none  &kp N1                        &kp N2                        &world_e_acute                &kp SQT                         &kp N5                                   &kp N6      &kp N7                         &kp N8                          &kp N9                         &kp N0                         &none
&none  &kp Q                         &kp W                         &kp E                         &kp R                           &kp T                                    &kp Y       &kp U                          &kp I                           &kp O                          &kp SEMI                       &none
&none  &LeftPinky (A, LAYER_QWERTY)  &LeftRingy (S, LAYER_QWERTY)  &LeftMiddy (D, LAYER_QWERTY)  &LeftIndex (F, LAYER_QWERTY)    &kp G                                    &kp H       &RightIndex (J, LAYER_QWERTY)  &RightMiddy (K, LAYER_QWERTY)   &RightRingy (L, LAYER_QWERTY)  &RightPinky (P, LAYER_QWERTY)  &none
&none  &kp Z                         &kp X                         &kp C                         &kp V                           &kp B                                    &kp N       &kp M                          &kp COMMA                       &kp DOT                        &kp FSLH                       &none
&none  &none                         &kp UP                        &kp DOWN                      &none                                                                                &none                          &kp LBKT                        &kp RBKT                       &none                          &none
                                                                                                 &thumb LAYER_Function ESC       &none                        &none       &none       &thumb LAYER_System INSERT     &thumb LAYER_World ENTER
                                                                                                 &thumb LAYER_Cursor BACKSPACE   &thumb LAYER_Number DELETE   &none       &caps_word  &thumb LAYER_Mouse TAB         &space LAYER_Symbol SPACE
            >;
        };

        layer_LeftPinky {
            bindings = <
&trans  &trans                        &trans                       &trans                        &trans                       &trans                                &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_pinky_tap KEY_LH_C5R2   &left_pinky_tap KEY_LH_C4R2  &left_pinky_tap KEY_LH_C3R2   &left_pinky_tap KEY_LH_C2R2  &left_pinky_tap KEY_LH_C1R2           &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_pinky_tap Q             &left_pinky_tap W            &left_pinky_tap E             &left_pinky_tap R            &left_pinky_tap T                     &trans  &trans               &trans               &trans               &trans               &trans 
&trans  &none                         &LeftPinkyRingy              &LeftPinkyMiddy               &LeftPinkyIndex              &left_pinky_tap G                     &trans  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
&trans  &left_pinky_tap Z             &left_pinky_tap X            &left_pinky_tap C             &left_pinky_tap V            &left_pinky_tap B                     &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_pinky_tap GRAVE         &left_pinky_tap LBKT         &left_pinky_tap RBKT          &left_pinky_tap LSFT                                                       &trans               &trans               &trans               &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
            >;
        };

        layer_LeftRingy {
            bindings = <
&trans  &trans                        &trans                       &trans                        &trans                       &trans                                &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_ringy_tap KEY_LH_C5R2   &left_ringy_tap KEY_LH_C4R2  &left_ringy_tap KEY_LH_C3R2   &left_ringy_tap KEY_LH_C2R2  &left_ringy_tap KEY_LH_C1R2           &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_ringy_tap Q             &left_ringy_tap W            &left_ringy_tap E             &left_ringy_tap R            &left_ringy_tap T                     &trans  &trans               &trans               &trans               &trans               &trans 
&trans  &LeftRingyPinky               &none                        &LeftRingyMiddy               &LeftRingyIndex              &left_ringy_tap G                     &trans  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
&trans  &left_ringy_tap Z             &left_ringy_tap X            &left_ringy_tap C             &left_ringy_tap V            &left_ringy_tap B                     &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_ringy_tap GRAVE         &left_ringy_tap LBKT         &left_ringy_tap RBKT          &left_ringy_tap LSFT                                                       &trans               &trans               &trans               &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
            >;
        };

        layer_LeftMiddy {
            bindings = <
&trans  &trans                        &trans                       &trans                        &trans                       &trans                                &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_middy_tap KEY_LH_C5R2   &left_middy_tap KEY_LH_C4R2  &left_middy_tap KEY_LH_C3R2   &left_middy_tap KEY_LH_C2R2  &left_middy_tap KEY_LH_C1R2           &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_middy_tap Q             &left_middy_tap W            &left_middy_tap E             &left_middy_tap R            &left_middy_tap T                     &trans  &trans               &trans               &trans               &trans               &trans 
&trans  &LeftMiddyPinky               &LeftMiddyPinky              &none                         &LeftMiddyIndex              &left_middy_tap G                     &trans  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
&trans  &left_middy_tap Z             &left_middy_tap X            &left_middy_tap C             &left_middy_tap V            &left_middy_tap B                     &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_middy_tap GRAVE         &left_middy_tap LBKT         &left_middy_tap RBKT          &left_pinky_tap LSFT                                                       &trans               &trans               &trans               &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
            >;
        };

        layer_LeftIndex {
            bindings = <
&trans  &trans                        &trans                       &trans                        &trans                       &trans                                &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_index_tap KEY_LH_C5R2   &left_index_tap KEY_LH_C4R2  &left_index_tap KEY_LH_C3R2   &left_index_tap KEY_LH_C2R2  &left_index_tap KEY_LH_C1R2           &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_index_tap Q             &left_index_tap W            &left_index_tap E             &left_index_tap R            &left_index_tap T                     &trans  &trans               &trans               &trans               &trans               &trans 
&trans  &LeftIndexPinky               &LeftIndexRingy              &LeftIndexMiddy               &none                        &left_index_tap G                     &trans  &kp RIGHT_INDEX_KEY  &kp RIGHT_MIDDY_KEY  &kp RIGHT_RINGY_KEY  &kp RIGHT_PINKY_KEY  &trans
&trans  &left_index_tap Z             &left_index_tap X            &left_index_tap C             &left_index_tap V            &left_index_tap B                     &trans  &trans               &trans               &trans               &trans               &trans
&trans  &left_index_tap GRAVE         &left_index_tap LBKT         &left_index_tap RBKT          &left_index_tap LSFT                                                       &trans               &trans               &trans               &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
                                                                                                 &trans                       &trans                      &trans    &trans  &trans               &trans
            >;
        };

        layer_RightPinky {
            bindings = <
&trans  &trans              &trans              &trans              &trans              &trans            &trans              &trans                 &trans                  &trans                 &trans                  &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_pinky_tap 6  &right_pinky_tap 7     &right_pinky_tap 8      &right_pinky_tap 9     &right_pinky_tap 0      &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_pinky_tap H  &right_pinky_tap U     &right_pinky_tap I      &right_pinky_tap O     &right_pinky_tap SEMI   &trans
&trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &trans            &right_pinky_tap H  &RightPinkyIndex       &RightPinkyMiddy        &RightPinkyRingy       &none                   &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_pinky_tap N  &right_pinky_tap M     &right_pinky_tap COMMA  &right_pinky_tap DOT   &right_pinky_tap FSLH   &trans
&trans  &trans              &trans              &trans              &trans                                                    &right_pinky_tap RSFT  &right_pinky_tap LPAR   &right_pinky_tap RPAR  &right_pinky_tap BSLH   &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
            >;
        };

        layer_RightRingy {
            bindings = <
&trans  &trans              &trans              &trans              &trans              &trans            &trans              &trans                 &trans                  &trans                 &trans                  &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_ringy_tap 6  &right_ringy_tap 7     &right_ringy_tap 8      &right_ringy_tap 9     &right_ringy_tap 0      &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_ringy_tap H  &right_ringy_tap U     &right_ringy_tap I      &right_ringy_tap O     &right_ringy_tap SEMI   &trans
&trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &trans            &right_ringy_tap H  &RightRingyIndex       &RightRingyMiddy        &none                  &RightRingyPinky        &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_ringy_tap N  &right_ringy_tap M     &right_ringy_tap COMMA  &right_ringy_tap DOT   &right_ringy_tap FSLH   &trans
&trans  &trans              &trans              &trans              &trans                                                    &right_ringy_tap RSFT  &right_ringy_tap LPAR   &right_ringy_tap RPAR  &right_ringy_tap BSLH   &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
            >;
        };

        layer_RightMiddy {
            bindings = <
&trans  &trans              &trans              &trans              &trans              &trans            &trans              &trans                 &trans                  &trans                 &trans                  &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_middy_tap 6  &right_middy_tap 7     &right_middy_tap 8      &right_middy_tap 9     &right_middy_tap 0      &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_middy_tap H  &right_middy_tap U     &right_middy_tap I      &right_middy_tap O     &right_middy_tap SEMI   &trans
&trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &trans            &right_middy_tap H  &RightMiddyIndex       &none                   &RightMiddyRingy       &RightMiddyPinky        &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_middy_tap N  &right_middy_tap M     &right_middy_tap COMMA  &right_middy_tap DOT   &right_middy_tap FSLH   &trans
&trans  &trans              &trans              &trans              &trans                                                    &right_middy_tap RSFT  &right_middy_tap LPAR   &right_middy_tap RPAR  &right_middy_tap BSLH   &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
            >;
        };

        layer_RightIndex {
            bindings = <
&trans  &trans              &trans              &trans              &trans              &trans            &trans              &trans                 &trans                  &trans                 &trans                  &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_index_tap 6  &right_index_tap 7     &right_index_tap 8      &right_index_tap 9     &right_index_tap 0      &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_index_tap H  &right_index_tap U     &right_index_tap I      &right_index_tap O     &right_index_tap SEMI   &trans
&trans  &kp LEFT_PINKY_KEY  &kp LEFT_RINGY_KEY  &kp LEFT_MIDDY_KEY  &kp LEFT_INDEX_KEY  &trans            &right_index_tap H  &none                  &RightIndexMiddy        &RightIndexRingy       &RightIndexPinky        &trans
&trans  &trans              &trans              &trans              &trans              &trans            &right_index_tap N  &right_index_tap M     &right_index_tap COMMA  &right_index_tap DOT   &right_index_tap FSLH   &trans
&trans  &trans              &trans              &trans              &trans                                                    &right_index_tap RSFT  &right_index_tap LPAR   &right_index_tap RPAR  &right_index_tap BSLH   &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
                                                                    &trans              &trans  &trans    &trans              &trans                 &trans
            >;
        };

        layer_Cursor {
            bindings = <
&trans  &trans              &trans              &trans              &trans              &trans                  &trans    &trans     &trans     &trans     &trans     &trans
&trans  &trans              &trans              &trans              &trans              &trans                  &trans    &trans     &trans     &trans     &trans     &trans
&trans  &kp LA(LG(E))       &kp LA(R)           &kp LA(V)           &kp LA(A)           &kp _CUT                &kp BSPC  &kp SPACE  &kp _UNDO  &kp _REDO  &sk LSHFT  &trans
&trans  &kp LEFT_PINKY_MOD  &kp LEFT_RINGY_MOD  &kp LEFT_MIDDY_MOD  &kp LEFT_INDEX_MOD  &kp _COPY               &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &trans     &trans
&trans  &trans              &kp LA(T)           &kp LA(LG(J))       &kp LA(LG(L))       &kp _PASTE              &none     &kp F11    &trans     &trans     &trans     &trans
&trans  &trans              &trans              &trans              &trans                                                &trans     &trans     &trans     &trans     &trans
                                                                    &mod_tab _A_TAB     &mod_tab _G_TAB  &none  &trans    &trans     &kp RET
                                                                    &none               &mod_tab LCTL    &none  &trans    &kp TAB    &kp SPACE
            >;
        };

        layer_Number {
            bindings = <
&none  &none  &none     &none      &none       &none                    &none             &none       &none          &none          &none           &none
&none  &none  &none     &none      &none       &none                    &kp TILDE         &kp CARET   &kp HASH       &kp DLLR       &kp EXCL        &none
&none  &none  &none     &none      &kp LC(TAB) &kp LA(TAB)              &kp PRCNT         &kp _KP_N7  &kp _KP_N8     &kp _KP_N9     &kp COLON       &none
&none  &none  &kp BSPC  &kp SPACE  &kp DOT     &none                    &kp _KP_PLUS      &kp _KP_N4  &kp _KP_N5     &kp _KP_N6     &kp _KP_MINUS   &none
&none  &none  &none     &none      &kp COMMA   &kp LS(LG(N4))           &kp _KP_ASTERISK  &kp _KP_N1  &kp _KP_N2     &kp _KP_N3     &kp _KP_SLASH   &none
&none  &none  &none     &none      &none                                                  &none       &kp LT         &kp GT         &none           &none
                                   &none       &none          &none     &none             &kp LPAR    &kp _KP_EQUAL 
                                   &none       &none          &none     &none             &kp RPAR    &kp _KP_N0 
            >;
        };

        layer_Function {
            bindings = <
&none  &none                &none              &none               &none               &none             &none          &none                  &none                  &none         &none    &none
&none  &none                &none              &none               &none               &none             &kp F1         &kp F2                 &kp F3                 &kp F4        &kp F8   &kp F12
&none  &sk LSHFT            &none              &none               &none               &none             &kp LG(LA(Y))  &kp LG(LA(U))          &kp LG(LA(I))          &kp F5        &kp F9   &kp F13
&none  &kp LEFT_PINKY_MOD   &kp LEFT_RINGY_MOD &kp LEFT_MIDDY_MOD  &kp LEFT_INDEX_MOD  &none             &kp LS(LG(N4)) &kp LG(KP_MINUS)       &kp LG(KP_PLUS)        &kp F6        &kp F10  &kp F14
&none  &none                &none              &none               &none               &none             &none          &decrease_vscode_view  &increase_vscode_view  &kp F7        &kp F11  &kp F15
&none  &none                &none              &none               &none                                                &none                  &kp C_BRI_UP           &kp C_BRI_DN  &none    &none
                                                                   &none               &none    &none    &kp C_PP       &kp C_PREV             &kp C_NEXT
                                                                   &none               &none    &none    &kp C_MUTE     &kp C_VOL_DN           &kp C_VOL_UP
            >;
        };

        layer_Symbol {
            bindings = <
&none     &none      &none      &none      &none      &none                &none     &none      &none       &none       &none      &none
&none     &none      &none      &none      &none      &none                &none     &none      &kp EXCL    &kp EQUAL   &none      &none
&none     &kp SQT    &kp LPAR   &kp LBKT   &kp DQT    &kp QMARK            &kp SQT   &kp DQT    &kp RBKT    &kp RPAR    &kp AMPS   &none
&kp HASH  &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR             &kp BSPC  &kp SPACE  &kp TAB     &kp SEMI    &kp AT     &none
&kp GRAVE &kp LT     &kp PIPE   &kp MINUS  &kp GT     &kp FSLH             &kp GRAVE &kp DEL    &kp COMMA   &kp DOT     &kp TILDE  &none
&none     &none      &kp LBRC   &kp RBRC   &none                                     &none      &none       &kp _KP_N0  &none      &none
                                           &kp BSLH   &none      &none     &none     &none      &none
                                           &kp PRCNT  &kp COLON  &none     &none     &none      &none
            >;
        };

        layer_Mouse {
            bindings = <
&none  &none               &none               &none               &none               &none                  &none                    &none                      &none                    &none                 &none  &none
&none  &none               &none               &none               &none               &none                  &msc SCRL_DOWN           &msc SCRL_UP               &none                    &none                 &none  &none
&none  &none               &none               &msc SCRL_RIGHT     &msc SCRL_LEFT      &kp _CUT               &kp LC(N)                &split_editor_horizontal   &split_editor_vertical   &none                 &none  &none
&none  &kp LEFT_PINKY_MOD  &kp LEFT_RINGY_MOD  &kp LEFT_MIDDY_MOD  &kp LEFT_INDEX_MOD  &kp _COPY              &focus_left_group        &focus_down_group          &focus_up_group          &focus_right_group    &none  &none
&none  &none               &none               &none               &none               &kp _PASTE             &none                    &kp LG(LS(E))              &kp LG(N1)               &kp LC(GRAVE)         &none  &none
&none  &none               &msc SCRL_DOWN      &msc SCRL_UP        &none                                                               &none                      &msc SCRL_DOWN           &msc SCRL_UP          &none  &none
                                                                   &none               &mkp MCLK    &none     &mkp LCLK                &mkp RCLK                  &mkp MCLK
                                                                   &mkp LCLK           &mkp RCLK    &none     &none                    &none                      &none
            >;
        };

        layer_System {
            bindings = <
&trans         &trans  &trans  &trans  &trans     &trans                        &trans  &trans           &trans           &trans           &trans           &trans
&bootloader    &trans  &trans  &trans  &trans     &bt BT_CLR_ALL                &trans  &trans           &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &bootloader
&studio_unlock &trans  &trans  &trans  &trans     &bt BT_CLR                    &trans  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &trans
&trans         &bt_3   &bt_2   &bt_0   &bt_1      &out OUT_USB                  &trans  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &trans
&trans         &trans  &trans  &trans  &trans     &trans                        &trans  &trans           &trans           &trans           &trans           &trans
&sys_reset     &trans  &trans  &trans  &trans                                           &trans           &trans           &trans           &trans           &sys_reset
                                       &kp _LOCK  &kp _SLEEP       &kp _POWER   &trans  &trans           &trans
                                       &trans     &trans           &trans       &trans  &trans           &trans
            >;
        };

        layer_World {
            bindings = <
&none  &none                 &none  &none                         &none  &none            &none  &none                &none          &none           &none      &none
&none  &none                 &none  &none                         &none  &none            &none  &none                &none          &none           &none      &none
&none  &none                 &none  &world_e_base_perso           &none  &none            &none  &world_u_base_perso  &world_i_base  &world_o_base   &none      &none
&none  &world_a_base_perso   &none  &none                         &none  &none            &none  &sk LSHFT            &sk LCTRL      &sk RCTRL       &sk RSHFT  &none
&none  &world_currency_base  &none  &world_consonants_base_perso  &none  &none            &none  &none                &sk LALT       &sk RALT        &none      &none
&none  &none                 &none  &none                         &none                          &none                &none          &none           &none      &none
                                                                  &trans &none   &none    &none  &none                &none
                                                                  &trans &trans  &none    &none  &none                &none
            >;
        };
    };
};

////////////////////////////////////////////////////////////////
// Trackball configuration
////////////////////////////////////////////////////////////////
// Configuration trackball main droite uniquement

&trackball_peripheral_listener { input-processors = <&zip_temp_layer 13 500>; };
